var docs = [{"key":"api-BarcodeManager","name":"BarcodeManager","md":"#BarcodeManager\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKBase\n\n##Methods\n###AddConnectionListener\n**public virtual void AddConnectionListener (Symbol.EMDK.Xamarin.Barcode.BarcodeManager.IScannerConnectionListener p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.BarcodeManager+IScannerConnectionListener **p0** - To be added.\n\n**Returns** - System.Void\n\n###GetDevice\n**public virtual Symbol.EMDK.Xamarin.Barcode.Scanner GetDevice (Symbol.EMDK.Xamarin.Barcode.BarcodeManager.DeviceIdentifier p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.BarcodeManager+DeviceIdentifier **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.Scanner\n\n###GetDevice\n**public virtual Symbol.EMDK.Xamarin.Barcode.Scanner GetDevice (Symbol.EMDK.Xamarin.Barcode.ScannerInfo p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.ScannerInfo **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.Scanner\n\n###RemoveConnectionListener\n**public virtual void RemoveConnectionListener (Symbol.EMDK.Xamarin.Barcode.BarcodeManager.IScannerConnectionListener p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.BarcodeManager+IScannerConnectionListener **p0** - To be added.\n\n**Returns** - System.Void\n\n##Properties\n\n###SupportedDevicesInfo\nTo be added.\n\n**Type** - System.Collections.Generic.IList<Symbol.EMDK.Xamarin.Barcode.ScannerInfo>\n\n\n"},{"key":"api-BarcodeManager_ConnectionState","name":"BarcodeManager+ConnectionState","md":"#BarcodeManager+ConnectionState\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.BarcodeManager.ConnectionState ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+ConnectionState\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.BarcodeManager.ConnectionState[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+ConnectionState[]\n\n##Properties\n\n###Connected\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+ConnectionState\n###Disconnected\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+ConnectionState\n\n\n"},{"key":"api-BarcodeManager_DeviceIdentifier","name":"BarcodeManager+DeviceIdentifier","md":"#BarcodeManager+DeviceIdentifier\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.BarcodeManager.DeviceIdentifier ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+DeviceIdentifier\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.BarcodeManager.DeviceIdentifier[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+DeviceIdentifier[]\n\n##Properties\n\n###BluetoothImager1\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+DeviceIdentifier\n###Default\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+DeviceIdentifier\n###InternalCamera1\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+DeviceIdentifier\n###InternalImager1\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+DeviceIdentifier\n###InternalLaser1\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+DeviceIdentifier\n\n\n"},{"key":"api-BarcodeManager_IScannerConnectionListener","name":"BarcodeManager+IScannerConnectionListener","md":"#BarcodeManager+IScannerConnectionListener\nTo be added.\n\n**Type** - \n\n##Methods\n###OnConnectionChange\n**public void OnConnectionChange (Symbol.EMDK.Xamarin.Barcode.ScannerInfo p0, Symbol.EMDK.Xamarin.Barcode.BarcodeManager.ConnectionState p1);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.ScannerInfo **p0** - To be added.\n* Symbol.EMDK.Xamarin.Barcode.BarcodeManager+ConnectionState **p1** - To be added.\n\n**Returns** - System.Void\n\n\n\n"},{"key":"api-BarcodeManager_ScannerConnectionEventArgs","name":"BarcodeManager+ScannerConnectionEventArgs","md":"#BarcodeManager+ScannerConnectionEventArgs\nTo be added.\n\n**Type** - System.EventArgs\n\n##Constructors\n### ScannerConnectionEventArgs \n**public ScannerConnectionEventArgs (Symbol.EMDK.Xamarin.Barcode.ScannerInfo p0, Symbol.EMDK.Xamarin.Barcode.BarcodeManager.ConnectionState p1);**\n\n##Properties\n\n###P0\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo\n###P1\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.BarcodeManager+ConnectionState\n\n\n"},{"key":"api-EMDKBase","name":"EMDKBase","md":"#EMDKBase\nThis is the base class that all the EMDK manager classes derived from.\n\n**Type** - Java.Lang.Object\n\n##Constructors\n### EMDKBase \n**public EMDKBase ();**\n\n\n\n"},{"key":"api-EMDKManager","name":"EMDKManager","md":"#EMDKManager\nThe EMDKManager class is the key class in Android EMDK. This class provides access to different classes for the supported features. Clients should call EMDKManager.getEMDKManager(Context, EMDKManager.EMDKListener), to get the EMDKManager object. Each application implements EMDKListener interface. The EMDKManager object will be returned on successful opening through the EMDKListener callback.\n\nExample Usage:\n\n\t:::\n\tEMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), emdkListener);\n      \n**Type** - Java.Lang.Object\n\n##Methods\n###GetEMDKManager\n**public static Symbol.EMDK.Xamarin.EMDKResults GetEMDKManager (Android.Content.Context p0, Symbol.EMDK.Xamarin.EMDKManager.IEMDKListener p1);**\n\nThis is static method and it is the key function to get the EMDKManager object. Clients must implement EMDKManager.EMDKListener to get notified of the EMDK manager status and to get the EMDKManager object.\n\n**Parameters:** \n\n* Android.Content.Context **context** - The application context should be provided by the user.\n* Symbol.EMDK.Xamarin.EMDKManager+IEMDKListener **emdkListener** -  The EMDK Listener for listener callbacks.\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKResults\n\n###GetInstance\n**public virtual Symbol.EMDK.Xamarin.EMDKBase GetInstance (Symbol.EMDK.Xamarin.EMDKManager.FEATURE_TYPE p0);**\n\nThis method returns an object instance which has derived from EMDKBase. Based on the type given, the object needs to be type-casted before used. Calling this method EMDKManager.getInstance(EMDKManager.FEATURE_TYPE) before EMDKManager opened will return null.\n\nExample Usage:\n\n\t:::\n\tVersionManager mVersionManager = (VersionManager) emdkManager.getInstance(EMDKManager.FEATURE_TYPE.VERSION);\n          \n**Parameters:** \n\n* Symbol.EMDK.Xamarin.EMDKManager+FEATURE_TYPE **featureType** - The EMDKManager.FEATURE_TYPE the object to be created.\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKBase\n\n###Release\n**public virtual void Release ();**\n\nThis method releases all the resources constructed by EMDKManager. EMDKManager can't be used after this call. The clients must call this method before exiting the application.\n\nExample Usage:\n\n\t:::\n\temdkManager.release();\n          \n\n**Returns** - System.Void\n\n###Release\n**public virtual void Release (Symbol.EMDK.Xamarin.EMDKManager.FEATURE_TYPE p0);**\n\nThis method releases resources of a given manager type. Instance variable is not required as multiple instances are not allowed by design.\n\nExample Usage:\n\n\t:::\n\temdkManager.release(EMDKManager.FEATURE_TYPE.PROFILE);\n          \n**Parameters:** \n\n* Symbol.EMDK.Xamarin.EMDKManager+FEATURE_TYPE **featureType** - Type of EMDKManager.FEATURE_TYPE to be released. Only the given feature related manager will be cleared if it has been constructed.\n\n**Returns** - System.Void\n\n\n\n"},{"key":"api-EMDKManager_FEATURE_TYPE","name":"EMDKManager+FEATURE_TYPE","md":"#EMDKManager+FEATURE_TYPE\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.EMDKManager.FEATURE_TYPE ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKManager+FEATURE_TYPE\n\n###Values\n**public static Symbol.EMDK.Xamarin.EMDKManager.FEATURE_TYPE[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKManager+FEATURE_TYPE[]\n\n##Properties\n\n###Barcode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKManager+FEATURE_TYPE\n###Profile\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKManager+FEATURE_TYPE\n###Version\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKManager+FEATURE_TYPE\n\n\n"},{"key":"api-EMDKManager_IEMDKListener","name":"EMDKManager+IEMDKListener","md":"#EMDKManager+IEMDKListener\nTo be added.\n\n**Type** - \n\n##Methods\n###OnClosed\n**public void OnClosed ();**\n\nTo be added.\n\n\n**Returns** - System.Void\n\n###OnOpened\n**public void OnOpened (Symbol.EMDK.Xamarin.EMDKManager p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.EMDKManager **p0** - To be added.\n\n**Returns** - System.Void\n\n\n\n"},{"key":"api-EMDKManager_OpenedEventArgs","name":"EMDKManager+OpenedEventArgs","md":"#EMDKManager+OpenedEventArgs\nTo be added.\n\n**Type** - System.EventArgs\n\n##Constructors\n### OpenedEventArgs \n**public OpenedEventArgs (Symbol.EMDK.Xamarin.EMDKManager p0);**\n\n##Properties\n\n###P0\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKManager\n\n\n"},{"key":"api-EMDKResults","name":"EMDKResults","md":"#EMDKResults\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###ExtendedStatusCode\nTo be added.\n\nExample Usage:\n\n\t:::\n\t\n            Property Code snippet\n          \n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###ExtendedStatusMessage\nTo be added.\n\nExample Usage:\n\n\t:::\n\t\n            Property Code snippet\n          \n**Type** - System.String\n###StatusCode\nTo be added.\n\nExample Usage:\n\n\t:::\n\t\n            Property Code snippet\n          \n**Type** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n###StatusDocument\nTo be added.\n\nExample Usage:\n\n\t:::\n\t\n            Property Code snippet\n          \n**Type** - Org.W3c.Dom.IDocument\n###StatusString\nTo be added.\n\nExample Usage:\n\n\t:::\n\t\n            Property Code snippet\n          \n**Type** - System.String\n###SuccessFeaturesCount\nTo be added.\n\nExample Usage:\n\n\t:::\n\t\n            Property Code snippet\n          \n**Type** - System.Int32\n###TotalFeaturesCount\nTo be added.\n\nExample Usage:\n\n\t:::\n\t\n            Property Code snippet\n          \n**Type** - System.Int32\n\n\n"},{"key":"api-EMDKResults_EXTENDED_STATUS_CODE","name":"EMDKResults+EXTENDED_STATUS_CODE","md":"#EMDKResults+EXTENDED_STATUS_CODE\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.EMDKResults.EXTENDED_STATUS_CODE ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n\n###Values\n**public static Symbol.EMDK.Xamarin.EMDKResults.EXTENDED_STATUS_CODE[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE[]\n\n##Properties\n\n###ActivitySelectionMergingNotSupported\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###AppNotAllowedToSubmitXml\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###DependacyComponentFailure\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###FeatureNameNotFoundInConfig\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###FeatureNameNotFoundInExtradata\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###FeatureNotUniqueInConfig\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###FeatureNotUniqueInExtradata\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###FeatureTypeNotFoundInConfig\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###FeatureTypeNotFoundInExtradata\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###GeneralExceptionOccured\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###InvalidProfileConfiguration\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###InvalidValue\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###NamevalueMismatchInExtradata\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###NamevalueMissmatchInConfig\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###None\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###ProfileNameFormatError\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###ProfileNotFoundInConfig\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n###ProfileNotFoundInExtradata\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+EXTENDED_STATUS_CODE\n\n\n"},{"key":"api-EMDKResults_STATUS_CODE","name":"EMDKResults+STATUS_CODE","md":"#EMDKResults+STATUS_CODE\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.EMDKResults.STATUS_CODE ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n\n###Values\n**public static Symbol.EMDK.Xamarin.EMDKResults.STATUS_CODE[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE[]\n\n##Properties\n\n###CheckXml\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n###EmdkNotOpened\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n###EmptyProfilename\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n###Failure\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n###NoDataListener\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n###NullPointer\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n###PreviousRequestInProgress\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n###Processing\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n###Success\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n###Unknown\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults+STATUS_CODE\n\n\n"},{"key":"api-InterfaceConfig","name":"InterfaceConfig","md":"#InterfaceConfig\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###ConnectionEstablishTime\nTo be added.\n\n**Type** - System.Int32\n###DisplayBluetoothAddressBarcode\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ProfileManager","name":"ProfileManager","md":"#ProfileManager\nThis class handles all the profile related functions.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKBase\n\n##Methods\n###AddDataListener\n**public virtual void AddDataListener (Symbol.EMDK.Xamarin.ProfileManager.IDataListener p0);**\n\nThe client can register to get data notification via callbacks.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.ProfileManager+IDataListener **p0** - DataListener Instance\n\n**Returns** - System.Void\n\n###CreateNameValuePair\n**public static string CreateNameValuePair (string p0, string p1, string p2);**\n\nThis function creates a name value pair string according to the Name-Value pair request. The return string is compatible with ProfileManager.processProfile(String profileName, PROFILE_FLAG profileFlag, String[] extraData) function’s extraData array element. If this function failed, it throws InvalidParameterException exception.\n\n**Parameters:** \n\n* System.String **p0** - Emdk Name\n* System.String **p1** - Parameter Name.\n* System.String **p2** - Parameter Value.\n\n**Returns** - System.String\n\n###ProcessProfile\n**public virtual Symbol.EMDK.Xamarin.EMDKResults ProcessProfile (string p0, Symbol.EMDK.Xamarin.ProfileManager.PROFILE_FLAG p1, Org.W3c.Dom.IDocument p2);**\n\nProcesses the given profile based on the data provided and the flag and return status of the action.\n\n**Parameters:** \n\n* System.String **p0** - profileName - Name of the profile. ex: 'Profile1'.\n* Symbol.EMDK.Xamarin.ProfileManager+PROFILE_FLAG **p1** - profileFlag - ProfileManager.PROFILE_FLAG If the profileFlag is set to SET, and if the given profile is not available in the EMDKConfig.xml, it will look for valid profile in extraData argument and if present, the profile will be added to the internal XML volatile repository and also applied to the device. If the profile is present in the EMDKConfig.xml, it will be applied to the device. If profileFlag is set to GET and if the profile is present in the internal repository, it will be returned in extraData.\n* Org.W3c.Dom.IDocument **p2** - This can be used to provide data for processing action.\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKResults\n\n###ProcessProfile\n**public virtual Symbol.EMDK.Xamarin.EMDKResults ProcessProfile (string p0, Symbol.EMDK.Xamarin.ProfileManager.PROFILE_FLAG p1, string[] p2);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n* Symbol.EMDK.Xamarin.ProfileManager+PROFILE_FLAG **p1** - To be added.\n* System.String[] **p2** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKResults\n\n###ProcessProfileAsync\n**public virtual Symbol.EMDK.Xamarin.EMDKResults ProcessProfileAsync (string p0, Symbol.EMDK.Xamarin.ProfileManager.PROFILE_FLAG p1, Org.W3c.Dom.IDocument p2);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n* Symbol.EMDK.Xamarin.ProfileManager+PROFILE_FLAG **p1** - To be added.\n* Org.W3c.Dom.IDocument **p2** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKResults\n\n###ProcessProfileAsync\n**public virtual Symbol.EMDK.Xamarin.EMDKResults ProcessProfileAsync (string p0, Symbol.EMDK.Xamarin.ProfileManager.PROFILE_FLAG p1, string[] p2);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n* Symbol.EMDK.Xamarin.ProfileManager+PROFILE_FLAG **p1** - To be added.\n* System.String[] **p2** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.EMDKResults\n\n###RemoveDataListener\n**public virtual void RemoveDataListener (Symbol.EMDK.Xamarin.ProfileManager.IDataListener p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.ProfileManager+IDataListener **p0** - To be added.\n\n**Returns** - System.Void\n\n##Properties\n\n###IsPreviousRequestPending\nThis method tells whether the previous process profile request is pending or not. If the previous request is pending, you can't submit the next request until the current request completes and calling the process profile method will return error.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ProfileManager_DataEventArgs","name":"ProfileManager+DataEventArgs","md":"#ProfileManager+DataEventArgs\nTo be added.\n\n**Type** - System.EventArgs\n\n##Constructors\n### DataEventArgs \n**public DataEventArgs (Symbol.EMDK.Xamarin.ProfileManager.ResultData p0);**\n\n##Properties\n\n###P0\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.ProfileManager+ResultData\n\n\n"},{"key":"api-ProfileManager_IDataListener","name":"ProfileManager+IDataListener","md":"#ProfileManager+IDataListener\nTo be added.\n\n**Type** - \n\n##Methods\n###OnData\n**public void OnData (Symbol.EMDK.Xamarin.ProfileManager.ResultData p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.ProfileManager+ResultData **p0** - To be added.\n\n**Returns** - System.Void\n\n\n\n"},{"key":"api-ProfileManager_PROFILE_FLAG","name":"ProfileManager+PROFILE_FLAG","md":"#ProfileManager+PROFILE_FLAG\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.ProfileManager.PROFILE_FLAG ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.ProfileManager+PROFILE_FLAG\n\n###Values\n**public static Symbol.EMDK.Xamarin.ProfileManager.PROFILE_FLAG[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.ProfileManager+PROFILE_FLAG[]\n\n##Properties\n\n###CheckCompatibility\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.ProfileManager+PROFILE_FLAG\n###Get\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.ProfileManager+PROFILE_FLAG\n###Reset\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.ProfileManager+PROFILE_FLAG\n###Set\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.ProfileManager+PROFILE_FLAG\n\n\n"},{"key":"api-ProfileManager_ResultData","name":"ProfileManager+ResultData","md":"#ProfileManager+ResultData\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###ProfileDocument\nTo be added.\n\n**Type** - Org.W3c.Dom.IDocument\n###ProfileFlag\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.ProfileManager+PROFILE_FLAG\n###ProfileName\nTo be added.\n\n**Type** - System.String\n###ProfileString\nTo be added.\n\n**Type** - System.String\n###Result\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKResults\n\n\n"},{"key":"api-ScanDataCollection","name":"ScanDataCollection","md":"#ScanDataCollection\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Methods\n###GetScanData\n**public virtual System.Collections.Generic.IList<Symbol.EMDK.Xamarin.Barcode.ScanDataCollection.ScanData> GetScanData ();**\n\nTo be added.\n\n\n**Returns** - System.Collections.Generic.IList<Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+ScanData>\n\n##Properties\n\n###FriendlyName\nTo be added.\n\n**Type** - System.String\n###Result\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n\n\n"},{"key":"api-ScanDataCollection_LabelType","name":"ScanDataCollection+LabelType","md":"#ScanDataCollection+LabelType\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScanDataCollection.LabelType ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScanDataCollection.LabelType[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType[]\n\n##Properties\n\n###Auspostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Aztec\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Bookland\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Canpostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Chinese2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Codabar\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Code11\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Code128\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Code32\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Code39\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Code93\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###CompositeAb\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###CompositeC\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Coupon\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###D2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###DatabarCoupon\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Datamatrix\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Dutchpostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Ean128\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Ean13\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Ean8\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Gs1Databar\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Gs1DatabarExp\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Gs1DatabarLim\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Hanxin\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###I2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Iata2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Isbt128\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Jappostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Korean3of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Mailmark\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Matrix2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Maxicode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Micropdf\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Microqr\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Msi\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Ocr\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Pdf417\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Qrcode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Signature\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Tlc39\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Trioptic39\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Ukpostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Undefined\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Upca\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Upce0\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Upce1\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Us4state\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Us4stateFics\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Usplanet\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Uspostnet\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###Webcode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n\n\n"},{"key":"api-ScanDataCollection_ScanData","name":"ScanDataCollection+ScanData","md":"#ScanDataCollection+ScanData\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###Data\nTo be added.\n\n**Type** - System.String\n###LabelType\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection+LabelType\n###TimeStamp\nTo be added.\n\n**Type** - System.String\n\n\n"},{"key":"api-Scanner","name":"Scanner","md":"#Scanner\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Methods\n###AddDataListener\n**public virtual void AddDataListener (Symbol.EMDK.Xamarin.Barcode.Scanner.IDataListener p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.Scanner+IDataListener **p0** - To be added.\n\n**Returns** - System.Void\n\n###AddStatusListener\n**public virtual void AddStatusListener (Symbol.EMDK.Xamarin.Barcode.Scanner.IStatusListener p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.Scanner+IStatusListener **p0** - To be added.\n\n**Returns** - System.Void\n\n###CancelRead\n**public virtual void CancelRead ();**\n\nTo be added.\n\n\n**Returns** - System.Void\n\n###Disable\n**public virtual void Disable ();**\n\nTo be added.\n\n\n**Returns** - System.Void\n\n###Enable\n**public virtual void Enable ();**\n\nTo be added.\n\n\n**Returns** - System.Void\n\n###Read\n**public virtual void Read ();**\n\nTo be added.\n\n\n**Returns** - System.Void\n\n###Release\n**public virtual void Release ();**\n\nTo be added.\n\n\n**Returns** - System.Void\n\n###RemoveDataListener\n**public virtual void RemoveDataListener (Symbol.EMDK.Xamarin.Barcode.Scanner.IDataListener p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.Scanner+IDataListener **p0** - To be added.\n\n**Returns** - System.Void\n\n###RemoveStatusListener\n**public virtual void RemoveStatusListener (Symbol.EMDK.Xamarin.Barcode.Scanner.IStatusListener p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.Scanner+IStatusListener **p0** - To be added.\n\n**Returns** - System.Void\n\n##Properties\n\n###Config\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig\n###InterfaceConfig\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.InterfaceConfig\n###IsEnabled\nTo be added.\n\n**Type** - System.Boolean\n###IsReadPending\nTo be added.\n\n**Type** - System.Boolean\n###ScannerInfo\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo\n###TriggerTypes\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.Scanner+TriggerType\n\n\n"},{"key":"api-Scanner_DataEventArgs","name":"Scanner+DataEventArgs","md":"#Scanner+DataEventArgs\nTo be added.\n\n**Type** - System.EventArgs\n\n##Constructors\n### DataEventArgs \n**public DataEventArgs (Symbol.EMDK.Xamarin.Barcode.ScanDataCollection p0);**\n\n##Properties\n\n###P0\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScanDataCollection\n\n\n"},{"key":"api-Scanner_IDataListener","name":"Scanner+IDataListener","md":"#Scanner+IDataListener\nTo be added.\n\n**Type** - \n\n##Methods\n###OnData\n**public void OnData (Symbol.EMDK.Xamarin.Barcode.ScanDataCollection p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.ScanDataCollection **p0** - To be added.\n\n**Returns** - System.Void\n\n\n\n"},{"key":"api-Scanner_IStatusListener","name":"Scanner+IStatusListener","md":"#Scanner+IStatusListener\nTo be added.\n\n**Type** - \n\n##Methods\n###OnStatus\n**public void OnStatus (Symbol.EMDK.Xamarin.Barcode.StatusData p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.StatusData **p0** - To be added.\n\n**Returns** - System.Void\n\n\n\n"},{"key":"api-Scanner_StatusEventArgs","name":"Scanner+StatusEventArgs","md":"#Scanner+StatusEventArgs\nTo be added.\n\n**Type** - System.EventArgs\n\n##Constructors\n### StatusEventArgs \n**public StatusEventArgs (Symbol.EMDK.Xamarin.Barcode.StatusData p0);**\n\n##Properties\n\n###P0\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.StatusData\n\n\n"},{"key":"api-Scanner_TriggerType","name":"Scanner+TriggerType","md":"#Scanner+TriggerType\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.Scanner.TriggerType ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.Scanner+TriggerType\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.Scanner.TriggerType[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.Scanner+TriggerType[]\n\n##Properties\n\n###Hard\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.Scanner+TriggerType\n###SoftAlways\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.Scanner+TriggerType\n###SoftOnce\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.Scanner+TriggerType\n\n\n"},{"key":"api-ScannerConfig","name":"ScannerConfig","md":"#ScannerConfig\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Methods\n###IsParamSupported\n**public virtual bool IsParamSupported (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - System.Boolean\n\n###ResetToDefault\n**public virtual void ResetToDefault (Symbol.EMDK.Xamarin.Barcode.Scanner p0);**\n\nTo be added.\n\n**Parameters:** \n\n* Symbol.EMDK.Xamarin.Barcode.Scanner **p0** - To be added.\n\n**Returns** - System.Void\n\n##Properties\n\n###DecoderParameters\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams\n###ReaderParameters\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ReaderParams\n###ScanParameters\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ScanParams\n###SkipOnUnsupported\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SkipOnUnSupported\n\n\n"},{"key":"api-ScannerConfig_AudioStreamType","name":"ScannerConfig+AudioStreamType","md":"#ScannerConfig+AudioStreamType\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.AudioStreamType ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+AudioStreamType\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.AudioStreamType[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+AudioStreamType[]\n\n##Properties\n\n###Alarams\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+AudioStreamType\n###Media\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+AudioStreamType\n###Ringer\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+AudioStreamType\n\n\n"},{"key":"api-ScannerConfig_BooklandFormat","name":"ScannerConfig+BooklandFormat","md":"#ScannerConfig+BooklandFormat\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.BooklandFormat ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+BooklandFormat\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.BooklandFormat[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+BooklandFormat[]\n\n##Properties\n\n###Isbn10\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+BooklandFormat\n###Isbn13\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+BooklandFormat\n\n\n"},{"key":"api-ScannerConfig_CheckDigit","name":"ScannerConfig+CheckDigit","md":"#ScannerConfig+CheckDigit\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.CheckDigit ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigit\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.CheckDigit[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigit[]\n\n##Properties\n\n###One\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigit\n###Two\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigit\n\n\n"},{"key":"api-ScannerConfig_CheckDigitScheme","name":"ScannerConfig+CheckDigitScheme","md":"#ScannerConfig+CheckDigitScheme\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.CheckDigitScheme ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigitScheme\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.CheckDigitScheme[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigitScheme[]\n\n##Properties\n\n###Mod1010\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigitScheme\n###Mod1110\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigitScheme\n\n\n"},{"key":"api-ScannerConfig_CheckDigitType","name":"ScannerConfig+CheckDigitType","md":"#ScannerConfig+CheckDigitType\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.CheckDigitType ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigitType\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.CheckDigitType[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigitType[]\n\n##Properties\n\n###No\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigitType\n###Opcc\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigitType\n###Uss\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigitType\n\n\n"},{"key":"api-ScannerConfig_CodeIdType","name":"ScannerConfig+CodeIdType","md":"#ScannerConfig+CodeIdType\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.CodeIdType ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CodeIdType\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.CodeIdType[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CodeIdType[]\n\n##Properties\n\n###Aim\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CodeIdType\n###None\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CodeIdType\n###Symbol\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CodeIdType\n\n\n"},{"key":"api-ScannerConfig_CouponReport","name":"ScannerConfig+CouponReport","md":"#ScannerConfig+CouponReport\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.CouponReport ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CouponReport\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.CouponReport[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CouponReport[]\n\n##Properties\n\n###Both\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CouponReport\n###New\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CouponReport\n###Old\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CouponReport\n\n\n"},{"key":"api-ScannerConfig_DecoderParams","name":"ScannerConfig+DecoderParams","md":"#ScannerConfig+DecoderParams\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###DecoderAustralianPostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+AustralianPostal\n###DecoderAztec\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Aztec\n###DecoderCanadianPostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+CanadianPostal\n###DecoderChinese2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Chinese2of5\n###DecoderCode11\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Code11\n###DecoderCode128\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Code128\n###DecoderCode39\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Code93\n###DecoderCode93\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Code39\n###DecoderCodeBar\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+CodaBar\n###DecoderCompositeAB\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+CompositeAB\n###DecoderCompositeC\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+CompositeC\n###DecoderD2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+D2of5\n###DecoderDataMatrix\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+DataMatrix\n###DecoderDutchPostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+DutchPostal\n###DecoderEan13\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Ean13\n###DecoderEan8\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Ean8\n###DecoderGs1Databar\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Gs1Databar\n###DecoderGs1DatabarExp\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Gs1DatabarExp\n###DecoderGs1DatabarLim\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Gs1DatabarLim\n###DecoderHanXin\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+HanXin\n###DecoderI2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+I2of5\n###DecoderJapanesePostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+JapanesePostal\n###DecoderKorean3of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Korean3of5\n###DecoderMailMark\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+MailMark\n###DecoderMatrix2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Matrix2of5\n###DecoderMaxiCode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+MaxiCode\n###DecoderMsi\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Msi\n###DecoderPdf417\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Pdf417\n###DecoderQrCode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+QrCode\n###DecoderSignature\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Signature\n###DecoderTlc39\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Tlc39\n###DecoderTriOptics39\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+TriOptic39\n###DecoderUkPostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+UkPostal\n###DecoderUpca\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Upca\n###DecoderUpce0\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Upce0\n###DecoderUpce1\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Upce1\n###DecoderUpcEanParams\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+UpcEanParams\n###DecoderUs4State\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Us4State\n###DecoderUs4StateFics\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+Us4StateFics\n###DecoderUsPlanet\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+UsPlanet\n###DecoderUsPostNet\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+UsPostNet\n###DecoderWebCode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+WebCode\n###MicroPDF\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+MicroPdf\n###MicroQR\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+MicroQr\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_AustralianPostal","name":"ScannerConfig+DecoderParams+AustralianPostal","md":"#ScannerConfig+DecoderParams+AustralianPostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Aztec","name":"ScannerConfig+DecoderParams+Aztec","md":"#ScannerConfig+DecoderParams+Aztec\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_BaseDecoder","name":"ScannerConfig+DecoderParams+BaseDecoder","md":"#ScannerConfig+DecoderParams+BaseDecoder\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Constructors\n### BaseDecoder \n**public BaseDecoder (Symbol.EMDK.Xamarin.Barcode.ScannerConfig.DecoderParams __self);**\n\n##Properties\n\n###Enabled\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_CanadianPostal","name":"ScannerConfig+DecoderParams+CanadianPostal","md":"#ScannerConfig+DecoderParams+CanadianPostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Chinese2of5","name":"ScannerConfig+DecoderParams+Chinese2of5","md":"#ScannerConfig+DecoderParams+Chinese2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_CodaBar","name":"ScannerConfig+DecoderParams+CodaBar","md":"#ScannerConfig+DecoderParams+CodaBar\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###ClsiEditing\nTo be added.\n\n**Type** - System.Boolean\n###Length1\nTo be added.\n\n**Type** - System.Int32\n###Length2\nTo be added.\n\n**Type** - System.Int32\n###NotisEditing\nTo be added.\n\n**Type** - System.Boolean\n###Redundancy\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Code11","name":"ScannerConfig+DecoderParams+Code11","md":"#ScannerConfig+DecoderParams+Code11\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###Length1\nTo be added.\n\n**Type** - System.Int32\n###Length2\nTo be added.\n\n**Type** - System.Int32\n###Redundancy\nTo be added.\n\n**Type** - System.Boolean\n###ReportCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n###VerifyCheckDigit\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+VerifyCheckDigit\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Code128","name":"ScannerConfig+DecoderParams+Code128","md":"#ScannerConfig+DecoderParams+Code128\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###CheckIsbtTable\nTo be added.\n\n**Type** - System.Boolean\n###EnableEan128\nTo be added.\n\n**Type** - System.Boolean\n###EnableIsbt128\nTo be added.\n\n**Type** - System.Boolean\n###EnablePlain\nTo be added.\n\n**Type** - System.Boolean\n###Isbt128ConcatMode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Isbt128ContactMode\n###Length1\nTo be added.\n\n**Type** - System.Int32\n###Length2\nTo be added.\n\n**Type** - System.Int32\n###Redundancy\nTo be added.\n\n**Type** - System.Boolean\n###SecurityLevel\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SecurityLevel\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Code39","name":"ScannerConfig+DecoderParams+Code39","md":"#ScannerConfig+DecoderParams+Code39\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###ConvertToCode32\nTo be added.\n\n**Type** - System.Boolean\n###FullAscii\nTo be added.\n\n**Type** - System.Boolean\n###Length1\nTo be added.\n\n**Type** - System.Int32\n###Length2\nTo be added.\n\n**Type** - System.Int32\n###Redundancy\nTo be added.\n\n**Type** - System.Boolean\n###ReportCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n###ReportCode32Prefix\nTo be added.\n\n**Type** - System.Boolean\n###SecurityLevel\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SecurityLevel\n###VerifyCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Code93","name":"ScannerConfig+DecoderParams+Code93","md":"#ScannerConfig+DecoderParams+Code93\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###Length1\nTo be added.\n\n**Type** - System.Int32\n###Length2\nTo be added.\n\n**Type** - System.Int32\n###Redundancy\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_CompositeAB","name":"ScannerConfig+DecoderParams+CompositeAB","md":"#ScannerConfig+DecoderParams+CompositeAB\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###UccLinkMode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+UccLinkMode\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_CompositeC","name":"ScannerConfig+DecoderParams+CompositeC","md":"#ScannerConfig+DecoderParams+CompositeC\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_D2of5","name":"ScannerConfig+DecoderParams+D2of5","md":"#ScannerConfig+DecoderParams+D2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###Length1\nTo be added.\n\n**Type** - System.Int32\n###Length2\nTo be added.\n\n**Type** - System.Int32\n###Redundancy\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_DataMatrix","name":"ScannerConfig+DecoderParams+DataMatrix","md":"#ScannerConfig+DecoderParams+DataMatrix\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_DutchPostal","name":"ScannerConfig+DecoderParams+DutchPostal","md":"#ScannerConfig+DecoderParams+DutchPostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Ean13","name":"ScannerConfig+DecoderParams+Ean13","md":"#ScannerConfig+DecoderParams+Ean13\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Ean8","name":"ScannerConfig+DecoderParams+Ean8","md":"#ScannerConfig+DecoderParams+Ean8\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###ConvertToEan13\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Gs1Databar","name":"ScannerConfig+DecoderParams+Gs1Databar","md":"#ScannerConfig+DecoderParams+Gs1Databar\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Gs1DatabarExp","name":"ScannerConfig+DecoderParams+Gs1DatabarExp","md":"#ScannerConfig+DecoderParams+Gs1DatabarExp\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Gs1DatabarLim","name":"ScannerConfig+DecoderParams+Gs1DatabarLim","md":"#ScannerConfig+DecoderParams+Gs1DatabarLim\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_HanXin","name":"ScannerConfig+DecoderParams+HanXin","md":"#ScannerConfig+DecoderParams+HanXin\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###HanXinInverse\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+HanXinInverse\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_I2of5","name":"ScannerConfig+DecoderParams+I2of5","md":"#ScannerConfig+DecoderParams+I2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###ConvertToEan13\nTo be added.\n\n**Type** - System.Boolean\n###Length1\nTo be added.\n\n**Type** - System.Int32\n###Length2\nTo be added.\n\n**Type** - System.Int32\n###Redundancy\nTo be added.\n\n**Type** - System.Boolean\n###ReportCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n###SecurityLevel\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SecurityLevel\n###VerifyCheckDigit\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigitType\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_JapanesePostal","name":"ScannerConfig+DecoderParams+JapanesePostal","md":"#ScannerConfig+DecoderParams+JapanesePostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Korean3of5","name":"ScannerConfig+DecoderParams+Korean3of5","md":"#ScannerConfig+DecoderParams+Korean3of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_MailMark","name":"ScannerConfig+DecoderParams+MailMark","md":"#ScannerConfig+DecoderParams+MailMark\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Matrix2of5","name":"ScannerConfig+DecoderParams+Matrix2of5","md":"#ScannerConfig+DecoderParams+Matrix2of5\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###Length1\nTo be added.\n\n**Type** - System.Int32\n###Length2\nTo be added.\n\n**Type** - System.Int32\n###Redundancy\nTo be added.\n\n**Type** - System.Boolean\n###ReportCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n###VerifyCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_MaxiCode","name":"ScannerConfig+DecoderParams+MaxiCode","md":"#ScannerConfig+DecoderParams+MaxiCode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_MicroPdf","name":"ScannerConfig+DecoderParams+MicroPdf","md":"#ScannerConfig+DecoderParams+MicroPdf\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_MicroQr","name":"ScannerConfig+DecoderParams+MicroQr","md":"#ScannerConfig+DecoderParams+MicroQr\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Msi","name":"ScannerConfig+DecoderParams+Msi","md":"#ScannerConfig+DecoderParams+Msi\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###CheckDigits\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigit\n###CheckDigitScheme\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CheckDigitScheme\n###Length1\nTo be added.\n\n**Type** - System.Int32\n###Length2\nTo be added.\n\n**Type** - System.Int32\n###Redundancy\nTo be added.\n\n**Type** - System.Boolean\n###ReportCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Pdf417","name":"ScannerConfig+DecoderParams+Pdf417","md":"#ScannerConfig+DecoderParams+Pdf417\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_QrCode","name":"ScannerConfig+DecoderParams+QrCode","md":"#ScannerConfig+DecoderParams+QrCode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Signature","name":"ScannerConfig+DecoderParams+Signature","md":"#ScannerConfig+DecoderParams+Signature\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Tlc39","name":"ScannerConfig+DecoderParams+Tlc39","md":"#ScannerConfig+DecoderParams+Tlc39\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_TriOptic39","name":"ScannerConfig+DecoderParams+TriOptic39","md":"#ScannerConfig+DecoderParams+TriOptic39\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###Redundancy\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_UkPostal","name":"ScannerConfig+DecoderParams+UkPostal","md":"#ScannerConfig+DecoderParams+UkPostal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###ReportCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Upca","name":"ScannerConfig+DecoderParams+Upca","md":"#ScannerConfig+DecoderParams+Upca\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###Preamble\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Preamble\n###ReportCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Upce0","name":"ScannerConfig+DecoderParams+Upce0","md":"#ScannerConfig+DecoderParams+Upce0\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###ConvertToUpca\nTo be added.\n\n**Type** - System.Boolean\n###Preamble\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Preamble\n###ReportCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Upce1","name":"ScannerConfig+DecoderParams+Upce1","md":"#ScannerConfig+DecoderParams+Upce1\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###ConvertToUpca\nTo be added.\n\n**Type** - System.Boolean\n###Preamble\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Preamble\n###ReportCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_UpcEanParams","name":"ScannerConfig+DecoderParams+UpcEanParams","md":"#ScannerConfig+DecoderParams+UpcEanParams\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###BooklandCode\nTo be added.\n\n**Type** - System.Boolean\n###BooklandFormat\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+BooklandFormat\n###ConvertDataBarToUpcEan\nTo be added.\n\n**Type** - System.Boolean\n###CouponCode\nTo be added.\n\n**Type** - System.Boolean\n###CouponReport\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CouponReport\n###EanZeroExtend\nTo be added.\n\n**Type** - System.Boolean\n###LinearDecode\nTo be added.\n\n**Type** - System.Boolean\n###RandomWeightCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n###SecurityLevel\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SecurityLevel\n###Supplemental2\nTo be added.\n\n**Type** - System.Boolean\n###Supplemental5\nTo be added.\n\n**Type** - System.Boolean\n###SupplementalMode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SupplementalMode\n###SupplementalRetries\nTo be added.\n\n**Type** - System.Int32\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Us4State","name":"ScannerConfig+DecoderParams+Us4State","md":"#ScannerConfig+DecoderParams+Us4State\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_Us4StateFics","name":"ScannerConfig+DecoderParams+Us4StateFics","md":"#ScannerConfig+DecoderParams+Us4StateFics\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_UsPlanet","name":"ScannerConfig+DecoderParams+UsPlanet","md":"#ScannerConfig+DecoderParams+UsPlanet\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###ReportCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_UsPostNet","name":"ScannerConfig+DecoderParams+UsPostNet","md":"#ScannerConfig+DecoderParams+UsPostNet\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###ReportCheckDigit\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_DecoderParams_WebCode","name":"ScannerConfig+DecoderParams+WebCode","md":"#ScannerConfig+DecoderParams+WebCode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+DecoderParams+BaseDecoder\n\n##Properties\n\n###SubType\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_HanXinInverse","name":"ScannerConfig+HanXinInverse","md":"#ScannerConfig+HanXinInverse\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.HanXinInverse ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+HanXinInverse\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.HanXinInverse[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+HanXinInverse[]\n\n##Properties\n\n###Auto\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+HanXinInverse\n###Disabled\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+HanXinInverse\n###Enabled\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+HanXinInverse\n\n\n"},{"key":"api-ScannerConfig_IlluminationMode","name":"ScannerConfig+IlluminationMode","md":"#ScannerConfig+IlluminationMode\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.IlluminationMode ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+IlluminationMode\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.IlluminationMode[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+IlluminationMode[]\n\n##Properties\n\n###Off\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+IlluminationMode\n###On\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+IlluminationMode\n\n\n"},{"key":"api-ScannerConfig_InterfaceParams","name":"ScannerConfig+InterfaceParams","md":"#ScannerConfig+InterfaceParams\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###ConnectionEstablishTime\nTo be added.\n\n**Type** - System.Int32\n###DisplayBluetoothAddressBarcode\nTo be added.\n\n**Type** - System.Boolean\n\n\n"},{"key":"api-ScannerConfig_Inverse1DMode","name":"ScannerConfig+Inverse1DMode","md":"#ScannerConfig+Inverse1DMode\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.Inverse1DMode ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Inverse1DMode\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.Inverse1DMode[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Inverse1DMode[]\n\n##Properties\n\n###Auto\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Inverse1DMode\n###Disabled\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Inverse1DMode\n###Enabled\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Inverse1DMode\n\n\n"},{"key":"api-ScannerConfig_Isbt128ContactMode","name":"ScannerConfig+Isbt128ContactMode","md":"#ScannerConfig+Isbt128ContactMode\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.Isbt128ContactMode ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Isbt128ContactMode\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.Isbt128ContactMode[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Isbt128ContactMode[]\n\n##Properties\n\n###Always\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Isbt128ContactMode\n###Auto\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Isbt128ContactMode\n###Never\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Isbt128ContactMode\n\n\n"},{"key":"api-ScannerConfig_LcdMode","name":"ScannerConfig+LcdMode","md":"#ScannerConfig+LcdMode\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.LcdMode ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LcdMode\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.LcdMode[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LcdMode[]\n\n##Properties\n\n###Disabled\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LcdMode\n###Enabled\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LcdMode\n\n\n"},{"key":"api-ScannerConfig_LinearSecurityLevel","name":"ScannerConfig+LinearSecurityLevel","md":"#ScannerConfig+LinearSecurityLevel\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.LinearSecurityLevel ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LinearSecurityLevel\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.LinearSecurityLevel[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LinearSecurityLevel[]\n\n##Properties\n\n###AllThrice\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LinearSecurityLevel\n###AllTwice\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LinearSecurityLevel\n###LongAndShort\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LinearSecurityLevel\n###ShortOrCodabar\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LinearSecurityLevel\n\n\n"},{"key":"api-ScannerConfig_PickList","name":"ScannerConfig+PickList","md":"#ScannerConfig+PickList\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.PickList ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PickList\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.PickList[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PickList[]\n\n##Properties\n\n###Disabled\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PickList\n###Enabled\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PickList\n\n\n"},{"key":"api-ScannerConfig_PowerMode","name":"ScannerConfig+PowerMode","md":"#ScannerConfig+PowerMode\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.PowerMode ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PowerMode\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.PowerMode[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PowerMode[]\n\n##Properties\n\n###AlwaysOn\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PowerMode\n###High\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PowerMode\n###Low\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PowerMode\n###Optimized\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PowerMode\n\n\n"},{"key":"api-ScannerConfig_Preamble","name":"ScannerConfig+Preamble","md":"#ScannerConfig+Preamble\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.Preamble ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Preamble\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.Preamble[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Preamble[]\n\n##Properties\n\n###CountryAndSysChar\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Preamble\n###None\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Preamble\n###SysChar\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Preamble\n\n\n"},{"key":"api-ScannerConfig_ReaderParams","name":"ScannerConfig+ReaderParams","md":"#ScannerConfig+ReaderParams\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###ReaderSpecificParams\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ReaderParams+ReaderSpecific\n\n\n"},{"key":"api-ScannerConfig_ReaderParams_ReaderSpecific","name":"ScannerConfig+ReaderParams+ReaderSpecific","md":"#ScannerConfig+ReaderParams+ReaderSpecific\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Constructors\n### ReaderSpecific \n**public ReaderSpecific (Symbol.EMDK.Xamarin.Barcode.ScannerConfig.ReaderParams __self);**\n\n##Properties\n\n###CameraSpecificParams\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ReaderParams+ReaderSpecific+CameraSpecific\n###ImagerSpecificParams\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ReaderParams+ReaderSpecific+ImagerSpecific\n###LaserSpecificParams\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ReaderParams+ReaderSpecific+LaserSpecific\n\n\n"},{"key":"api-ScannerConfig_ReaderParams_ReaderSpecific_CameraSpecific","name":"ScannerConfig+ReaderParams+ReaderSpecific+CameraSpecific","md":"#ScannerConfig+ReaderParams+ReaderSpecific+CameraSpecific\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###BeamTimer\nTo be added.\n\n**Type** - System.Int32\n###ContinuousRead\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ReaderParams+ReaderSpecific+ContinuousRead\n###IlluminationMode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+IlluminationMode\n###Inverse1DMode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Inverse1DMode\n###LinearSecurityLevel\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LinearSecurityLevel\n###ViewfinderMode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ViewFinderMode\n\n\n"},{"key":"api-ScannerConfig_ReaderParams_ReaderSpecific_ContinuousRead","name":"ScannerConfig+ReaderParams+ReaderSpecific+ContinuousRead","md":"#ScannerConfig+ReaderParams+ReaderSpecific+ContinuousRead\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Constructors\n### ContinuousRead \n**public ContinuousRead (Symbol.EMDK.Xamarin.Barcode.ScannerConfig.ReaderParams.ReaderSpecific __self);**\n\n##Properties\n\n###DifferentSymbolTimeout\nTo be added.\n\n**Type** - System.Int32\n###IsContinuousScan\nTo be added.\n\n**Type** - System.Boolean\n###SameSymbolTimeout\nTo be added.\n\n**Type** - System.Int32\n\n\n"},{"key":"api-ScannerConfig_ReaderParams_ReaderSpecific_ImagerSpecific","name":"ScannerConfig+ReaderParams+ReaderSpecific+ImagerSpecific","md":"#ScannerConfig+ReaderParams+ReaderSpecific+ImagerSpecific\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###BeamTimer\nTo be added.\n\n**Type** - System.Int32\n###ConnectionIdleTime\nTo be added.\n\n**Type** - System.Int32\n###ContinuousRead\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ReaderParams+ReaderSpecific+ContinuousRead\n###DisconnectOnExit\nTo be added.\n\n**Type** - System.Boolean\n###IlluminationBrightness\nTo be added.\n\n**Type** - System.Int32\n###Inverse1DMode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Inverse1DMode\n###LcdMode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LcdMode\n###LinearSecurityLevel\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LinearSecurityLevel\n###PickList\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PickList\n\n\n"},{"key":"api-ScannerConfig_ReaderParams_ReaderSpecific_LaserSpecific","name":"ScannerConfig+ReaderParams+ReaderSpecific+LaserSpecific","md":"#ScannerConfig+ReaderParams+ReaderSpecific+LaserSpecific\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###BeamTimer\nTo be added.\n\n**Type** - System.Int32\n###ContinuousRead\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ReaderParams+ReaderSpecific+ContinuousRead\n###Inverse1DMode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+Inverse1DMode\n###LinearSecurityLevel\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+LinearSecurityLevel\n###PowerMode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+PowerMode\n\n\n"},{"key":"api-ScannerConfig_ScanParams","name":"ScannerConfig+ScanParams","md":"#ScannerConfig+ScanParams\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###AudioStreamType\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+AudioStreamType\n###CodeIdType\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+CodeIdType\n###DecodeAudioFeedbackUri\nTo be added.\n\n**Type** - System.String\n###DecodeHapticFeedback\nTo be added.\n\n**Type** - System.Boolean\n###DecodeLEDFeedback\nTo be added.\n\n**Type** - System.Boolean\n###DecodeLEDTime\nTo be added.\n\n**Type** - System.Int32\n\n\n"},{"key":"api-ScannerConfig_SecurityLevel","name":"ScannerConfig+SecurityLevel","md":"#ScannerConfig+SecurityLevel\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.SecurityLevel ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SecurityLevel\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.SecurityLevel[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SecurityLevel[]\n\n##Properties\n\n###Level0\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SecurityLevel\n###Level1\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SecurityLevel\n###Level2\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SecurityLevel\n###Level3\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SecurityLevel\n\n\n"},{"key":"api-ScannerConfig_SkipOnUnSupported","name":"ScannerConfig+SkipOnUnSupported","md":"#ScannerConfig+SkipOnUnSupported\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.SkipOnUnSupported ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SkipOnUnSupported\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.SkipOnUnSupported[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SkipOnUnSupported[]\n\n##Properties\n\n###All\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SkipOnUnSupported\n###None\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SkipOnUnSupported\n###UnsupportedParam\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SkipOnUnSupported\n###UnsupportedValue\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SkipOnUnSupported\n\n\n"},{"key":"api-ScannerConfig_SupplementalMode","name":"ScannerConfig+SupplementalMode","md":"#ScannerConfig+SupplementalMode\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.SupplementalMode ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SupplementalMode\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.SupplementalMode[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SupplementalMode[]\n\n##Properties\n\n###Always\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SupplementalMode\n###Auto\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SupplementalMode\n###No\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SupplementalMode\n###S378379\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SupplementalMode\n###S414419434439\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SupplementalMode\n###S977\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SupplementalMode\n###S978979\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SupplementalMode\n###Smart\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+SupplementalMode\n\n\n"},{"key":"api-ScannerConfig_UccLinkMode","name":"ScannerConfig+UccLinkMode","md":"#ScannerConfig+UccLinkMode\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.UccLinkMode ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+UccLinkMode\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.UccLinkMode[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+UccLinkMode[]\n\n##Properties\n\n###AlwaysLinked\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+UccLinkMode\n###AutoDiscriminate\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+UccLinkMode\n###LinkFlagIgnored\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+UccLinkMode\n\n\n"},{"key":"api-ScannerConfig_VerifyCheckDigit","name":"ScannerConfig+VerifyCheckDigit","md":"#ScannerConfig+VerifyCheckDigit\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.VerifyCheckDigit ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+VerifyCheckDigit\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.VerifyCheckDigit[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+VerifyCheckDigit[]\n\n##Properties\n\n###No\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+VerifyCheckDigit\n###One\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+VerifyCheckDigit\n###Two\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+VerifyCheckDigit\n\n\n"},{"key":"api-ScannerConfig_ViewFinderMode","name":"ScannerConfig+ViewFinderMode","md":"#ScannerConfig+ViewFinderMode\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.ViewFinderMode ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ViewFinderMode\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerConfig.ViewFinderMode[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ViewFinderMode[]\n\n##Properties\n\n###Enabled\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ViewFinderMode\n###StaticRecticle\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerConfig+ViewFinderMode\n\n\n"},{"key":"api-ScannerException","name":"ScannerException","md":"#ScannerException\nTo be added.\n\n**Type** - Java.Lang.Exception\n\n##Properties\n\n###Result\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n\n\n"},{"key":"api-ScannerInfo","name":"ScannerInfo","md":"#ScannerInfo\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Methods\n###GetConnectionType\n**public virtual Symbol.EMDK.Xamarin.Barcode.ScannerInfo.ConnectionType GetConnectionType ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+ConnectionType\n\n###GetDecoderType\n**public virtual Symbol.EMDK.Xamarin.Barcode.ScannerInfo.DecoderType GetDecoderType ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DecoderType\n\n###GetDeviceType\n**public virtual Symbol.EMDK.Xamarin.Barcode.ScannerInfo.DeviceType GetDeviceType ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DeviceType\n\n##Properties\n\n###FriendlyName\nTo be added.\n\n**Type** - System.String\n###IsConnected\nTo be added.\n\n**Type** - System.Boolean\n###IsDefaultScanner\nTo be added.\n\n**Type** - System.Boolean\n###ModelNumber\nTo be added.\n\n**Type** - System.String\n\n\n"},{"key":"api-ScannerInfo_ConnectionType","name":"ScannerInfo+ConnectionType","md":"#ScannerInfo+ConnectionType\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerInfo.ConnectionType ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+ConnectionType\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerInfo.ConnectionType[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+ConnectionType[]\n\n##Properties\n\n###BluetoothSsi\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+ConnectionType\n###Internal\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+ConnectionType\n###SerialSsi\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+ConnectionType\n###Undefined\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+ConnectionType\n###Usb\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+ConnectionType\n\n\n"},{"key":"api-ScannerInfo_DecoderType","name":"ScannerInfo+DecoderType","md":"#ScannerInfo+DecoderType\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerInfo.DecoderType ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DecoderType\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerInfo.DecoderType[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DecoderType[]\n\n##Properties\n\n###OneDimensional\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DecoderType\n###TwoDimensional\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DecoderType\n###Undefined\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DecoderType\n\n\n"},{"key":"api-ScannerInfo_DeviceType","name":"ScannerInfo+DeviceType","md":"#ScannerInfo+DeviceType\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerInfo.DeviceType ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DeviceType\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerInfo.DeviceType[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DeviceType[]\n\n##Properties\n\n###Camera\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DeviceType\n###Imager\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DeviceType\n###Laser\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DeviceType\n###Undefined\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerInfo+DeviceType\n\n\n"},{"key":"api-ScannerResults","name":"ScannerResults","md":"#ScannerResults\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerResults ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.ScannerResults[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.ScannerResults[]\n\n##Properties\n\n###AlreadyScanning\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###Description\nTo be added.\n\n**Type** - System.String\n###Failure\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###FeatureNotSupported\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###InvalidObject\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###InvalidValue\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###LengthMismatch\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###NoDataListener\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###ScanDataFailure\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###ScannerDeinitFailure\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###ScannerInitFailure\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###ScannerInUse\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###ScannerNotEnabled\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###ScannerNotSupported\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###ScannerOperationFailure\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###ScannerTimedOut\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###ScanParamNotSupported\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###ScanParamReadOnly\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###Success\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###TriggerKeyInUse\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###TriggerKeyRegFailed\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###TriggerKeyUnregFailed\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###Undefined\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n###Value\nTo be added.\n\n**Type** - System.Int32\n###VfError\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.ScannerResults\n\n\n"},{"key":"api-StatusData","name":"StatusData","md":"#StatusData\nTo be added.\n\n**Type** - Java.Lang.Object\n\n##Properties\n\n###FriendlyName\nTo be added.\n\n**Type** - System.String\n###State\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.StatusData+ScannerStates\n\n\n"},{"key":"api-StatusData_ScannerStates","name":"StatusData+ScannerStates","md":"#StatusData+ScannerStates\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.Barcode.StatusData.ScannerStates ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.StatusData+ScannerStates\n\n###Values\n**public static Symbol.EMDK.Xamarin.Barcode.StatusData.ScannerStates[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.Barcode.StatusData+ScannerStates[]\n\n##Properties\n\n###Disabled\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.StatusData+ScannerStates\n###Error\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.StatusData+ScannerStates\n###Idle\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.StatusData+ScannerStates\n###Scanning\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.StatusData+ScannerStates\n###Waiting\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.Barcode.StatusData+ScannerStates\n\n\n"},{"key":"api-Symbol.EMDK.Xamarin.Barcode.EMDKList","name":"#Symbol.EMDK.Xamarin.Barcode.EMDKList","md":"##Symbol.EMDK.Xamarin.Barcode.EMDKList\n\n###BarcodeManager\n\n* [BarcodeManager](#api--?/api/BarcodeManager)\n* [BarcodeManager_ConnectionState](#api--?/api/BarcodeManager_ConnectionState)\n* [BarcodeManager_DeviceIdentifier](#api--?/api/BarcodeManager_DeviceIdentifier)\n* [BarcodeManager_IScannerConnectionListener](#api--?/api/BarcodeManager_IScannerConnectionListener)\n* [BarcodeManager_ScannerConnectionEventArgs](#api--?/api/BarcodeManager_ScannerConnectionEventArgs)\n\n\n###InterfaceConfig\n\n* [InterfaceConfig](#api--?/api/InterfaceConfig)\n\n\n###ScanDataCollection\n\n* [ScanDataCollection](#api--?/api/ScanDataCollection)\n* [ScanDataCollection_LabelType](#api--?/api/ScanDataCollection_LabelType)\n* [ScanDataCollection_ScanData](#api--?/api/ScanDataCollection_ScanData)\n\n\n###Scanner\n\n* [Scanner](#api--?/api/Scanner)\n* [Scanner_DataEventArgs](#api--?/api/Scanner_DataEventArgs)\n* [Scanner_IDataListener](#api--?/api/Scanner_IDataListener)\n* [Scanner_IStatusListener](#api--?/api/Scanner_IStatusListener)\n* [Scanner_StatusEventArgs](#api--?/api/Scanner_StatusEventArgs)\n* [Scanner_TriggerType](#api--?/api/Scanner_TriggerType)\n\n\n###ScannerConfig\n\n* [ScannerConfig](#api--?/api/ScannerConfig)\n* [ScannerConfig_AudioStreamType](#api--?/api/ScannerConfig_AudioStreamType)\n* [ScannerConfig_BooklandFormat](#api--?/api/ScannerConfig_BooklandFormat)\n* [ScannerConfig_CheckDigit](#api--?/api/ScannerConfig_CheckDigit)\n* [ScannerConfig_CheckDigitScheme](#api--?/api/ScannerConfig_CheckDigitScheme)\n* [ScannerConfig_CheckDigitType](#api--?/api/ScannerConfig_CheckDigitType)\n* [ScannerConfig_CodeIdType](#api--?/api/ScannerConfig_CodeIdType)\n* [ScannerConfig_CouponReport](#api--?/api/ScannerConfig_CouponReport)\n* [ScannerConfig_DecoderParams_AustralianPostal](#api--?/api/ScannerConfig_DecoderParams_AustralianPostal)\n* [ScannerConfig_DecoderParams_Aztec](#api--?/api/ScannerConfig_DecoderParams_Aztec)\n* [ScannerConfig_DecoderParams_BaseDecoder](#api--?/api/ScannerConfig_DecoderParams_BaseDecoder)\n* [ScannerConfig_DecoderParams_CanadianPostal](#api--?/api/ScannerConfig_DecoderParams_CanadianPostal)\n* [ScannerConfig_DecoderParams_Chinese2of5](#api--?/api/ScannerConfig_DecoderParams_Chinese2of5)\n* [ScannerConfig_DecoderParams_CodaBar](#api--?/api/ScannerConfig_DecoderParams_CodaBar)\n* [ScannerConfig_DecoderParams_Code11](#api--?/api/ScannerConfig_DecoderParams_Code11)\n* [ScannerConfig_DecoderParams_Code128](#api--?/api/ScannerConfig_DecoderParams_Code128)\n* [ScannerConfig_DecoderParams_Code39](#api--?/api/ScannerConfig_DecoderParams_Code39)\n* [ScannerConfig_DecoderParams_Code93](#api--?/api/ScannerConfig_DecoderParams_Code93)\n* [ScannerConfig_DecoderParams_CompositeAB](#api--?/api/ScannerConfig_DecoderParams_CompositeAB)\n* [ScannerConfig_DecoderParams_CompositeC](#api--?/api/ScannerConfig_DecoderParams_CompositeC)\n* [ScannerConfig_DecoderParams_D2of5](#api--?/api/ScannerConfig_DecoderParams_D2of5)\n* [ScannerConfig_DecoderParams_DataMatrix](#api--?/api/ScannerConfig_DecoderParams_DataMatrix)\n* [ScannerConfig_DecoderParams_DutchPostal](#api--?/api/ScannerConfig_DecoderParams_DutchPostal)\n* [ScannerConfig_DecoderParams_Ean13](#api--?/api/ScannerConfig_DecoderParams_Ean13)\n* [ScannerConfig_DecoderParams_Ean8](#api--?/api/ScannerConfig_DecoderParams_Ean8)\n* [ScannerConfig_DecoderParams_Gs1Databar](#api--?/api/ScannerConfig_DecoderParams_Gs1Databar)\n* [ScannerConfig_DecoderParams_Gs1DatabarExp](#api--?/api/ScannerConfig_DecoderParams_Gs1DatabarExp)\n* [ScannerConfig_DecoderParams_Gs1DatabarLim](#api--?/api/ScannerConfig_DecoderParams_Gs1DatabarLim)\n* [ScannerConfig_DecoderParams_HanXin](#api--?/api/ScannerConfig_DecoderParams_HanXin)\n* [ScannerConfig_DecoderParams_I2of5](#api--?/api/ScannerConfig_DecoderParams_I2of5)\n* [ScannerConfig_DecoderParams_JapanesePostal](#api--?/api/ScannerConfig_DecoderParams_JapanesePostal)\n* [ScannerConfig_DecoderParams_Korean3of5](#api--?/api/ScannerConfig_DecoderParams_Korean3of5)\n* [ScannerConfig_DecoderParams_MailMark](#api--?/api/ScannerConfig_DecoderParams_MailMark)\n* [ScannerConfig_DecoderParams_Matrix2of5](#api--?/api/ScannerConfig_DecoderParams_Matrix2of5)\n* [ScannerConfig_DecoderParams_MaxiCode](#api--?/api/ScannerConfig_DecoderParams_MaxiCode)\n* [ScannerConfig_DecoderParams_MicroPdf](#api--?/api/ScannerConfig_DecoderParams_MicroPdf)\n* [ScannerConfig_DecoderParams_MicroQr](#api--?/api/ScannerConfig_DecoderParams_MicroQr)\n* [ScannerConfig_DecoderParams_Msi](#api--?/api/ScannerConfig_DecoderParams_Msi)\n* [ScannerConfig_DecoderParams_Pdf417](#api--?/api/ScannerConfig_DecoderParams_Pdf417)\n* [ScannerConfig_DecoderParams_QrCode](#api--?/api/ScannerConfig_DecoderParams_QrCode)\n* [ScannerConfig_DecoderParams_Signature](#api--?/api/ScannerConfig_DecoderParams_Signature)\n* [ScannerConfig_DecoderParams_Tlc39](#api--?/api/ScannerConfig_DecoderParams_Tlc39)\n* [ScannerConfig_DecoderParams_TriOptic39](#api--?/api/ScannerConfig_DecoderParams_TriOptic39)\n* [ScannerConfig_DecoderParams_UkPostal](#api--?/api/ScannerConfig_DecoderParams_UkPostal)\n* [ScannerConfig_DecoderParams_Upca](#api--?/api/ScannerConfig_DecoderParams_Upca)\n* [ScannerConfig_DecoderParams_Upce0](#api--?/api/ScannerConfig_DecoderParams_Upce0)\n* [ScannerConfig_DecoderParams_Upce1](#api--?/api/ScannerConfig_DecoderParams_Upce1)\n* [ScannerConfig_DecoderParams_UpcEanParams](#api--?/api/ScannerConfig_DecoderParams_UpcEanParams)\n* [ScannerConfig_DecoderParams_Us4State](#api--?/api/ScannerConfig_DecoderParams_Us4State)\n* [ScannerConfig_DecoderParams_Us4StateFics](#api--?/api/ScannerConfig_DecoderParams_Us4StateFics)\n* [ScannerConfig_DecoderParams_UsPlanet](#api--?/api/ScannerConfig_DecoderParams_UsPlanet)\n* [ScannerConfig_DecoderParams_UsPostNet](#api--?/api/ScannerConfig_DecoderParams_UsPostNet)\n* [ScannerConfig_DecoderParams_WebCode](#api--?/api/ScannerConfig_DecoderParams_WebCode)\n* [ScannerConfig_DecoderParams](#api--?/api/ScannerConfig_DecoderParams)\n* [ScannerConfig_HanXinInverse](#api--?/api/ScannerConfig_HanXinInverse)\n* [ScannerConfig_IlluminationMode](#api--?/api/ScannerConfig_IlluminationMode)\n* [ScannerConfig_InterfaceParams](#api--?/api/ScannerConfig_InterfaceParams)\n* [ScannerConfig_Inverse1DMode](#api--?/api/ScannerConfig_Inverse1DMode)\n* [ScannerConfig_Isbt128ContactMode](#api--?/api/ScannerConfig_Isbt128ContactMode)\n* [ScannerConfig_LcdMode](#api--?/api/ScannerConfig_LcdMode)\n* [ScannerConfig_LinearSecurityLevel](#api--?/api/ScannerConfig_LinearSecurityLevel)\n* [ScannerConfig_PickList](#api--?/api/ScannerConfig_PickList)\n* [ScannerConfig_PowerMode](#api--?/api/ScannerConfig_PowerMode)\n* [ScannerConfig_Preamble](#api--?/api/ScannerConfig_Preamble)\n* [ScannerConfig_ReaderParams_ReaderSpecific_CameraSpecific](#api--?/api/ScannerConfig_ReaderParams_ReaderSpecific_CameraSpecific)\n* [ScannerConfig_ReaderParams_ReaderSpecific_ContinuousRead](#api--?/api/ScannerConfig_ReaderParams_ReaderSpecific_ContinuousRead)\n* [ScannerConfig_ReaderParams_ReaderSpecific_ImagerSpecific](#api--?/api/ScannerConfig_ReaderParams_ReaderSpecific_ImagerSpecific)\n* [ScannerConfig_ReaderParams_ReaderSpecific_LaserSpecific](#api--?/api/ScannerConfig_ReaderParams_ReaderSpecific_LaserSpecific)\n* [ScannerConfig_ReaderParams_ReaderSpecific](#api--?/api/ScannerConfig_ReaderParams_ReaderSpecific)\n* [ScannerConfig_ReaderParams](#api--?/api/ScannerConfig_ReaderParams)\n* [ScannerConfig_ScanParams](#api--?/api/ScannerConfig_ScanParams)\n* [ScannerConfig_SecurityLevel](#api--?/api/ScannerConfig_SecurityLevel)\n* [ScannerConfig_SkipOnUnSupported](#api--?/api/ScannerConfig_SkipOnUnSupported)\n* [ScannerConfig_SupplementalMode](#api--?/api/ScannerConfig_SupplementalMode)\n* [ScannerConfig_UccLinkMode](#api--?/api/ScannerConfig_UccLinkMode)\n* [ScannerConfig_VerifyCheckDigit](#api--?/api/ScannerConfig_VerifyCheckDigit)\n* [ScannerConfig_ViewFinderMode](#api--?/api/ScannerConfig_ViewFinderMode)\n\n\n###ScannerException\n\n* [ScannerException](#api--?/api/ScannerException)\n\n\n###ScannerInfo\n\n* [ScannerInfo](#api--?/api/ScannerInfo)\n* [ScannerInfo_ConnectionType](#api--?/api/ScannerInfo_ConnectionType)\n* [ScannerInfo_DecoderType](#api--?/api/ScannerInfo_DecoderType)\n* [ScannerInfo_DeviceType](#api--?/api/ScannerInfo_DeviceType)\n\n\n###ScannerResults\n\n* [ScannerResults](#api--?/api/ScannerResults)\n\n\n###StatusData\n\n* [StatusData](#api--?/api/StatusData)\n* [StatusData_ScannerStates](#api--?/api/StatusData_ScannerStates)\n\n\n\n\n"},{"key":"api-Symbol.EMDK.Xamarin.EMDKList","name":"#Symbol.EMDK.Xamarin.EMDKList","md":"##Symbol.EMDK.Xamarin.EMDKList\n\n###EMDKBase\n\n* [EMDKBase](#api--?/api/EMDKBase)\n\n\n###EMDKManager\n\n* [EMDKManager](#api--?/api/EMDKManager)\n* [EMDKManager_FEATURE_TYPE](#api--?/api/EMDKManager_FEATURE_TYPE)\n* [EMDKManager_IEMDKListener](#api--?/api/EMDKManager_IEMDKListener)\n* [EMDKManager_OpenedEventArgs](#api--?/api/EMDKManager_OpenedEventArgs)\n\n\n###EMDKResults\n\n* [EMDKResults](#api--?/api/EMDKResults)\n* [EMDKResults_EXTENDED_STATUS_CODE](#api--?/api/EMDKResults_EXTENDED_STATUS_CODE)\n* [EMDKResults_STATUS_CODE](#api--?/api/EMDKResults_STATUS_CODE)\n\n\n###ProfileManager\n\n* [ProfileManager](#api--?/api/ProfileManager)\n* [ProfileManager_DataEventArgs](#api--?/api/ProfileManager_DataEventArgs)\n* [ProfileManager_IDataListener](#api--?/api/ProfileManager_IDataListener)\n* [ProfileManager_PROFILE_FLAG](#api--?/api/ProfileManager_PROFILE_FLAG)\n* [ProfileManager_ResultData](#api--?/api/ProfileManager_ResultData)\n\n\n###VersionManager\n\n* [VersionManager](#api--?/api/VersionManager)\n* [VersionManager_VERSION_TYPE](#api--?/api/VersionManager_VERSION_TYPE)\n\n\n\n\n"},{"key":"api-VersionManager","name":"VersionManager","md":"#VersionManager\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.EMDKBase\n\n##Methods\n###GetVersion\n**public virtual string GetVersion (Symbol.EMDK.Xamarin.VersionManager.VERSION_TYPE p0);**\n\nTo be added.\n\nExample Usage:\n\n\t:::\n\t\n            class Example {\n              public static void Main ()\n              {\n                System.Console.WriteLine (\"Hello, World!\");\n              }\n            }\n          \n**Parameters:** \n\n* Symbol.EMDK.Xamarin.VersionManager+VERSION_TYPE **p0** - To be added.\n\n**Returns** - System.String\n\n\n\n"},{"key":"api-VersionManager_VERSION_TYPE","name":"VersionManager+VERSION_TYPE","md":"#VersionManager+VERSION_TYPE\nTo be added.\n\n**Type** - Java.Lang.Enum\n\n##Methods\n###ValueOf\n**public static Symbol.EMDK.Xamarin.VersionManager.VERSION_TYPE ValueOf (string p0);**\n\nTo be added.\n\n**Parameters:** \n\n* System.String **p0** - To be added.\n\n**Returns** - Symbol.EMDK.Xamarin.VersionManager+VERSION_TYPE\n\n###Values\n**public static Symbol.EMDK.Xamarin.VersionManager.VERSION_TYPE[] Values ();**\n\nTo be added.\n\n\n**Returns** - Symbol.EMDK.Xamarin.VersionManager+VERSION_TYPE[]\n\n##Properties\n\n###Barcode\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.VersionManager+VERSION_TYPE\n###Emdk\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.VersionManager+VERSION_TYPE\n###Mx\nTo be added.\n\n**Type** - Symbol.EMDK.Xamarin.VersionManager+VERSION_TYPE\n\n\n"},{"key":"guide-about","name":" EMDK For Xamarin - Beta","md":"# EMDK For Xamarin - Beta\nWelcome to the EMDK for Xamarin Beta. This beta will provide you with ability to use Zebra's EMDK features within your Xamarin application. Please be sure to read the contents of this guide in it's entirety to ensure your evironment is properly setup\n\n###Before you get started\n In order to use the EMDK for Xamarin Beta, you must first have Microsoft Visual Studio 2010 or above, and the Xamarin Platform installed on your development system.  Zebra does not provide licenses for Microsoft Visual Studio or licenses for Xamarin Platform/Xamarin Studio. Further information on obtaining licenses or getting started with these products, can be found at the following links.\n\n* [Microsoft Visual Studio](https://www.visualstudio.com/downloads/download-visual-studio-vs)\n\n* [Xamarin](http://developer.xamarin.com/guides/cross-platform/getting_started/)\n\n\n\n###Features Supported\n\n- Profile Manager Visual Studio (2012+) Plugin\n- Symbol.EMDK.Xamarin APIs\n\t- EMDKManager, ProfileManager, VersionManager, EMDKBase\n\n###Not Yet Implemented\n\n- Symbol.EMDK.Xamarin.Barcode - this may be functional, but API names may change\n- Xamarin Studio Add-In\n- Mac Support\n\n##Getting Started\n### 1) Install The Visual Studio Extension\nDownload and install the Visual Studio Extension using the online extension gallery. For this beta, you will need to add a private gallery to your Visual Studio settings in order to access the extension.\n\n- [Read the Visual Studio Setup Guide](#guide-vs-setup)\n\n### 2) Install The Xamarin Component\nWhen this product is released, the component will be available on the Xamarin Component store, but for the beta you must install it manually:\n\n- [Read the Xamarin Component Install Guide](#guide-component-install)\n\n### 3) Try the Sample\nA sample is included as part of the Xamarin Component package to help get you started. Click on the **samples** tab on the component details page to add it to your solution project.\n\n- [Read the Using Xamarin Samples Guide](#guide-sample-about)\n\n### 4) Understand Profile Manager\nOne unique feature to EMDK for Xamarin is to control device behavior and configuration through the use of *profiles*. The EMDK Profile Manager lets you create profiles right from your IDE using a GUI interface for selecting the features and settings that your application wishes to use. Then in your application you would simply apply the profile when needed. This results in a simple approach and minimal lines of code required to accomplish tasks\n\n- [Read the Profile Manager Overview Guide](#guide-profiles-about)\n\n### 5) Build a Simple Application\nNow that you have your environment setup and have an overview of the EMDK for Xamarin, let's walk through and build an application from scratch.\n\n- [Follow the Hello Xamarin tutorial](#guide-tutorial-helloxamarin)\n\n<div style=\"display:none\">\n<!-- this section used in Xamarin gettingstarted.md for component packaging -->\n### 6) Check out our docs\nWe have a lot more resources for you to benefit from:\n\n- API reference\n- Developer Guides\n- Tutorials\n- Videos\n- More Samples\n- [More docs online](http://emdk.github.io/xamarin-docs/edge)\n</div>\n\n### Report Feedback/Issues\nThanks for taking the time to try out this beta. We would love to hear your [feedback or issues](https://github.com/emdk/xamarin-docs/issues/new?title=EMDK%20For%20Xamarin) you have encountered. Note; A GitHub account is required to create issues, please log into Github before submitting an issue.\n"},{"key":"guide-abouthelp","name":"About EMDK For Android Help","md":"#About EMDK For Android Help\n\n##Overview\n\nWelcome to the EMDK for Android Technical Documentation. This help system allows you to browse the EMDK For Android documentation on your local computer and features many tools for navigating and searching through the content. \n\n## Updating Local Documentation\nThere may be updates to the documentation that is included with the EMDK For Android installation after it has been released. Although the documentation for the latest version is also published to [Launchpad](https://developer.motorolasolutions.com/community/android/emdk) and may contain additional or updated content. You can also update your local version to contain the latest updates.\n\n### Help Version\nYou can check your current help version by looking at the menu on the left hand side of the page (offline version only). This indicates the version of the help documentation. If the number corresponds with the version of the EMDK For Android (Noted in the page header), then it is the same as what has been released with the software. Updates to the documentation after release will be denoted by an extra version number. For example, say the EMDK For Android release was 3.0.1, a documentation update post release may be indicated with a Help version of 3.0.1.1\n\n![img](images/HelpVersions.jpg)\n\n### Downloading Updated Documentation\nFollow these instructions for updating your local documentation to be the latest.\n\n* [Download the latest documentation](https://s3.amazonaws.com/emdk/EMDK.Docs.Latest.zip)\n* Unzip the contents of the download\n* Copy the contents of the zip folder to the `InstallationPath\\Help` folder. For example `\\Program Files\\Symbol EMDK for Android\\v3.0\\Help`\n\n![img](images/HelpFolder.jpg)\n\n##Help Features\n\n###Table of Contents:\n\nThe menu on the left hand side of the page can be used to navigate through the varies documents contained inside this help application.  \n\n![img](images/about/toc1.png)\n\nThe documents are broken in to categories that can be drilled down to.\n\n![img](images/about/toc3.png)\n\nThe menu icon will allow you to collapse and expand the \"Table of Contents\".\n\n![img](images/about/toc2.png)\n \n###Search:\n\nAt the top of the page you will see a search box. \n\n![img](images/about/s1.png)\n\nThis box will search all documents in the system and highlight selected terms in the current document. You can switch between relevant documents buy selecting the document in \"Search Results\". You can minimize the \"Search Results\" by clicking on the \"-\" icon. You can bring the \"Search Results back by click on the search bar. \n\n![img](images/about/s2.png)\n\nAt the bottom right hand side of the page you will see next and previous buttons that will allow you to move through the selected items. \n\n![img](images/about/s3.png)\n\nAfter searching, if you browse to another page the search terms will automatically be used to bring you to the first found entry. Clearing the search results field will prevent this behavior.\n\n###In This Document:\n\nIn This document is a list of the main sections in the current document. When Selecting a link the document the document will scroll to the selected section, and show any sub sections. \n\n![img](images/about/itd1.png)\n\n###Image Viewer:\n\nWhen click on an image the image will open up at 100% in an in page pop up. If the image is bigger then your screen you will be able to scroll the image inside the pop up. If you click on the image in the pop up it will open in a new tab. Clicking the [X] in the pop up or clicking outside the pop up will close it.\n\n![img](images/about/lb1.png)\n\n### External Links\n\nWhen clicking on a link that is an external website, the url will be opened in a new tab of your browser.\n\n##Supported Web Browsers\n\n* Firefox 29 or newer\n* Google Chrome 35 or newer \n* Internet Explore 9 or newer"},{"key":"guide-component-install","name":"Xamarin Component Install","md":"#Xamarin Component Install\nThe Xamarin Component part of the EMDK includes the API libraries that you will use in your Android application. You must install the component and add it to your android project before being able to use the APIs.\n\n## Watch This Guide\n![yt:RazeKMsKrXU](images/video.png)\n\n\n## Installing the Xamarin Component\nNormally, you would install the Xamarin Component by accessing the Xamarin Component store, however for the beta we have included the component as part of the [Visual Studio Extension](#guide-vs-setup). After you have installed the EMDK For Xamarin Visual Studio Extension:\n\n1. Select `EMDK\\Add Xamarin Component`\n\n\t![img](images/vs/install-component.png)\n\nThis will install the Xamarin Component to Visual Studio so that it may be added to any Android project.\n\n![img](images/vs/install-component-installed.png)\n\n## Adding to a Visual Studio Project\nOnce the Xamarin Component has been installed to the IDE, you need to add it to your Android project.\n\n> Note: Each project will cache the version of the component you have added withing your project folder. Even after removing the component from your project using the IDE, the component files will remain inside your project folder. \n\n1. Create or Open an Android based project.\n2. Right click on the Project's `Component` folder in the `Solution Explorer`.\n3. Choose `Edit Components`\n\n\t![img](images/vs/edit-components.png)\n4. You must be logged into your Xamarin account in order to add the component\t\n\n\t![img](images/component/login.png)\n\t![img](images/component/login-complete.png)\n\n5. Choose `Add to Project` in the `EMDK For Xamarin` item of the `Installed on this machine` section\n\n\t![img](images/component/add.png)\n\n6. The project is now installed and listed in the projects `Component` folder.\n\n\t![img](images/component/installed.png)\n\n7. Clicking on the `Details` link in the projects `Edit Components` page will give you access to more details about the component, like version information, documentation and samples.\n\n\t![img](images/component/details-button.png)\n\t![img](images/component/details.png)\n\n"},{"key":"guide-components","name":"Xamarin Components","md":"#Xamarin Components\n\nfew sentences on what they are and what they provide\n\n## Adding to a project\nexplain in general what it means to add a component to a project\n\n### Visual Studio\nexplain instructions on adding components to Visual Studio projects\n\n### Xamarin Studio\nexplain instructions on adding components to Xamarin Studio projects\n\n## Upgrading\nExplain about versions and to make sure the project is using the right version\n### Visual Studio\nexplain instructions on adding components to Visual Studio projects\n\n### Xamarin Studio\nexplain instructions on adding components to Xamarin Studio projects\n\n\n## Removing from a project\n\n### Visual Studio\nexplain instructions on adding components to Visual Studio projects\n\n### Xamarin Studio\nexplain instructions on adding components to Xamarin Studio projects\n\n\n"},{"key":"guide-deviceupdate","name":" Configuring A Device","md":"# Configuring A Device\n\n>NOTE: Devices will need to be updated with the latest EMDK for Android Device Runtime\n\n##\tInstalling The Device Update\n\nFor your convenience, a menu item has been added to the Visual Studio extension to perform the device updated. Before running make sure:\n\n1. The device has USB Debugging enabled\n2. The device has been connected to the development machine\n\nOnce the device is connected:\n\n1. Select the `EMDK` menu from the menu bar\n2. Select `Apply Device Update` menu item\n\n![img](images/deviceupdate.png)\n\nThe device will be reboot after the device update completes.\n\n### Device Update APK\nAfter selecting the `Apply Device Update` at least once, the device update APK file can be found in `C:\\Users\\Public\\Symbol EMDK For Xamarin` folder.\n\n## Installing the EMDK device runtime when the AppLock Manager is On:\n\n* Option 1: Turn Off the AppLock Manager before EMDK device runtime deployment and the AppLock Manager can be turned On after device reboot.\n* Option 2: The customer can add the EMDK OS update app name to the AppLock Manager Applications white list before the EMDK device runtime deployment.\n\n## Installing the EMDK device runtime on Google Mobile Service (GMS) devices:\nBefore installing EMDK device runtime on GMS devices, you must enable the enterprise-grade features like Mobility Extensions (MX). To download enterprise enabler for your device, go to [https://portal.motorolasolutions.com/Support/US-EN](https://portal.motorolasolutions.com/Support/US-EN) and search for \"Enterprise Enabler\" along with the device name.\n\n## Modify Device Runtime Installation Behavior\nThe EMDK device runtime update application will skip the EMDK runtime install if a device has an EMDK runtime version higher than the install version. The EMDK device runtime installation behavior can be modified by pushing an EMDK install mode configuration (`emdkosupdateconfig.xml`) to the `/enterprise/usr/` folder on a devices internal storage. This overrides the default settings of the application.\n\n>NOTE: **This process is not required to use the default installation behavior.**\n\n**Example emdkosupdateconfig.xml**\n\n\t\t:::xml\n\t\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t\t<wap-provisioningdoc>\n\t\t\t<characteristic type=\"EmdkOSUpdateMode\">\n\t\t\t\t<parm name=\"InstallMode\" value=\"skip\"/>\n\t\t\t\t<parm name=\"RemoveInstaller\" value=\"true\"/>\n\t\t\t</characteristic>\n\t\t</wap-provisioningdoc>\n\n\n**InstallMode Parm Value Options:**\nThis determines the install behavior when the existing version on the device is higher than the version being installed. The default install mode is `skip`.\n\n* **auto** - Displays alert box during installation and waits for the user input\n* **overwrite** - Overwrite and continue installation\n* **skip** - Skip and continue installation. This is the default\n* **cancel** - Exit the installation\n\n**RemoveInstaller Parm Value Options:**\nRemoves the EMDK OS Update application on successful update.\n\n* **true** - Removes the EMDK OS Update application on successful update (Default).\n* **false** - Don't remove the EMDK OS Update application on successful update.\n\n>Note: Supported in EMDKOS Update App v3.1.37 or higher.\n\n**EMDK Device Runtime Installation Steps**\n\n1. Create `emdkosupdateconfig.xml` and push into `/enterprise/usr/` to modify the default behavior.\n2. Push the `EmdkOSUpdateApp_[version].apk` to a supported Symbol device.\n3. Install EmdkOSUpdateApp application.\n4. Launch installed EmdkOSUpdateApp application.\n\n>NOTE: If the update succeeds, the EmdkOSUpdateApp will be un-installed (if the default settings have not overridden) and device will be rebooted. If the update fails, the EmdkOSUpdateApp application will not be un-installed. The update results will be available at  `/enterprise/usr/emdkosupdateresults.xml`\n"},{"key":"guide-extended_status","name":"Extended Status Information User Guide","md":"#Extended Status Information User Guide\n\n##Introduction \nThe [EMDKResults](#api-EMDKResults) class exposes an Enum ( EXTENDED_STATUS_CODE ). Inspecting that Enum after a profile has been processed could provide detailed error information that may have occured while being processed. \n\n\n### Section of EMDKConfig.xml\nName of the file “EMDKConfig.xml. It is fixed and cannot be changed.\nName of the Profile. One config file can contain one or more Profiles. But only one Profile is activated in one instance.\nFeature Type\nFeature Name.\n\n####Special Test Cases\n\n**Case 01:**\n\n    :::xml\n    //XML (EMDKConfig.xml):\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?><wap-provisioningdoc>\n    <characteristic type=\"ProfileInfo\">\n    <parm name=\"created_wizard_version\" value=\"3.0.2\"/>\n    </characteristic>\n    <characteristic type=\"Profile\">\n    <parm name=\"ProfileName\" value=\"ClockProfile-1\"/>\n    <parm name=\"ModifiedDate\" value=\"2015-03-16 09:14:43\"/>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2001-01-01\"/>\n    <parm name=\"Time\" value=\"01:01:01\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk02\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2002-02-02\"/>\n    <parm name=\"Time\" value=\"02:02:02\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk03\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2003-03-03\"/>\n    <parm name=\"Time\" value=\"03:03:03\"/>\n    </characteristic>\n    </characteristic>\n    </wap-provisioningdoc>\n\n\n**Parameters**\n\n    :::java\n    extraData[0] \t\t= \"Clk01.Date=2014-10-10\"\n    extraData[1] \t\t= \"Clk02.Time=10:10:10\"\n    profileName\t\t\t= ClockProfile-1\n    profileFlag\t\t\t= PROFILE_FLAG.SET\n\n**Results**\n\n    :::xml\n    extendedStatusCode\t= NONE\n    statusCode\t        \t= CHECK_XML\n    xmlString           \t= <?xml version=\"1.0\" encoding=\"UTF-8\"?><wap-provisioningdoc><characteristic type=\"status\"><parm name=\"code\" value=\"6\"/><parm name=\"description\" value=\"Review the XML for details\"/><characteristic type=\"extended_status\"><parm name=\"code\" value=\"0\"/><parm name=\"description\" value=\"\"/></characteristic></characteristic><characteristic type=\"Clock\" version=\"4.3\"><parm name=\"AutoTime\" value=\"false\"/><parm name=\"TimeZone\" value=\"GMT+05:30\"/><parm name=\"Date\" value=\"2014-10-10\"/><parm name=\"Time\" value=\"01:01:01\"/></characteristic><characteristic type=\"Clock\" version=\"4.3\"><parm name=\"AutoTime\" value=\"false\"/><parm name=\"TimeZone\" value=\"GMT+05:30\"/><parm name=\"Date\" value=\"2002-02-02\"/><parm name=\"Time\" value=\"10:10:10\"/></characteristic><characteristic type=\"Clock\" version=\"4.3\"><parm name=\"AutoTime\" value=\"false\"/><parm name=\"TimeZone\" value=\"GMT+05:30\"/><parm name=\"Date\" value=\"2003-03-03\"/><parm name=\"Time\" value=\"03:03:03\"/></characteristic></wap-provisioningdoc>\n\n####Case 02:\n\n    :::xml\n    //XML (EMDKConfig.xml):\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?><wap-provisioningdoc>\n    <characteristic type=\"ProfileInfo\">\n    <parm name=\"created_wizard_version\" value=\"3.0.2\"/>\n    </characteristic>\n    <characteristic type=\"Profile\">\n    <parm name=\"ProfileName\" value=\"ClockProfile-1\"/>\n    <parm name=\"ModifiedDate\" value=\"2015-03-16 09:14:43\"/>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2001-01-01\"/>\n    <parm name=\"Time\" value=\"01:01:01\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk02\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2002-02-02\"/>\n    <parm name=\"Time\" value=\"02:02:02\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk03\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2003-03-03\"/>\n    <parm name=\"Time\" value=\"03:03:03\"/>\n    </characteristic>\n    </characteristic>\n    </wap-provisioningdoc>\n\n    Parameters\n    extraData[0] \t\t= \"Clk01.Date=2014-10-10\"\n    extraData[1] \t\t= \"Clk02.Time=10:10:10\"\n    profileName\t\t\t= ClockProfile-1/Clock/Clk01\n    profileFlag\t\t\t= PROFILE_FLAG.SET\n\n    Results\n\n    extendedStatusCode\t= NAMEVALUE_MISMATCH_EXTRADATA\n    statusCode\t        \t= FAILURE\n\n\n####Case 03:\n\n    :::xml\n    XML (EMDKConfig.xml):\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?><wap-provisioningdoc>\n    <characteristic type=\"ProfileInfo\">\n    <parm name=\"created_wizard_version\" value=\"3.0.2\"/>\n    </characteristic>\n    <characteristic type=\"Profile\">\n    <parm name=\"ProfileName\" value=\"ClockProfile-1\"/>\n    <parm name=\"ModifiedDate\" value=\"2015-03-16 09:14:43\"/>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2001-01-01\"/>\n    <parm name=\"Time\" value=\"01:01:01\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk02\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2002-02-02\"/>\n    <parm name=\"Time\" value=\"02:02:02\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk03\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2003-03-03\"/>\n    <parm name=\"Time\" value=\"03:03:03\"/>\n    </characteristic>\n    </characteristic>\n    </wap-provisioningdoc>\n\n    Parameters\n    extraData[0] \t\t= \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <characteristic type=\"Profile\" >\n        <parm name=\"ProfileName\" value=\"ClockProfile-1\" />\n        <characteristic type=\"Clock\" >\n            <parm name=\"emdk_name\" value=\"Clk01\" />\n            <parm name=\"Date\" value=\"2014-11-22\" />\n            <parm name=\"Time\" value=\"11:22:33\" />\n        </characteristic>\n        <characteristic type=\"Clock\" >\n            <parm name=\"emdk_name\" value=\"Clk02\" />\n            <parm name=\"Date\" value=\"2014-11-22\" />\n            <parm name=\"Time\" value=\"11:22:33\" />\n        </characteristic>\n    </characteristic>\n\n\n    profileName\t\t\t= ClockProfile-1\n    profileFlag\t\t\t= PROFILE_FLAG.SET\n\n    Results\n\n    extendedStatusCode\t= NONE\n    statusCode\t        \t= CHECK_XML\n    xmlString           \t= <?xml version=\"1.0\" encoding=\"UTF-8\"?><wap-provisioningdoc><characteristic type=\"status\"><parm name=\"code\" \n    value=\"6\"/><parm name=\"description\" value=\"Review the XML for details\"/><characteristic type=\"extended_status\"><parm name=\"code\" value=\"0\"/><parm name=\"description\" value=\"\"/></characteristic></characteristic><characteristic type=\"Clock\" version=\"4.3\"><parm name=\"AutoTime\" value=\"false\"/><parm name=\"TimeZone\" value=\"GMT+05:30\"/><parm name=\"Date\" value=\"2014-11-22\"/><parm name=\"Time\" value=\"11:22:33\"/></characteristic><characteristic type=\"Clock\" version=\"4.3\"><parm name=\"AutoTime\" value=\"false\"/><parm name=\"TimeZone\" value=\"GMT+05:30\"/><parm name=\"Date\" value=\"2014-11-22\"/><parm name=\"Time\" value=\"11:22:33\"/></characteristic><characteristic type=\"Clock\" version=\"4.3\"><parm name=\"AutoTime\" value=\"false\"/><parm name=\"TimeZone\" value=\"GMT+05:30\"/><parm name=\"Date\" value=\"2003-03-03\"/><parm name=\"Time\" value=\"03:03:03\"/></characteristic></wap-provisioningdoc>\n\n####Case 04:\n\n    :::xml\n    XML (EMDKConfig.xml):\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?><wap-provisioningdoc>\n    <characteristic type=\"ProfileInfo\">\n    <parm name=\"created_wizard_version\" value=\"3.0.2\"/>\n    </characteristic>\n    <characteristic type=\"Profile\">\n    <parm name=\"ProfileName\" value=\"ClockProfile-1\"/>\n    <parm name=\"ModifiedDate\" value=\"2015-03-16 09:14:43\"/>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2001-01-01\"/>\n    <parm name=\"Time\" value=\"01:01:01\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk02\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2002-02-02\"/>\n    <parm name=\"Time\" value=\"02:02:02\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk03\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2003-03-03\"/>\n    <parm name=\"Time\" value=\"03:03:03\"/>\n    </characteristic>\n    </characteristic>\n    </wap-provisioningdoc>\n\n    Parameters\n    extraData[0] \t\t= \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <characteristic type=\"Profile\" >\n        <parm name=\"ProfileName\" value=\"ClockProfile-1\" />\n        <characteristic type=\"Clock\" >\n            <parm name=\"emdk_name\" value=\"Clk01\" />\n            <parm name=\"Date\" value=\"2014-11-22\" />\n            <parm name=\"Time\" value=\"11:22:33\" />\n        </characteristic>\n        <characteristic type=\"Clock\" >\n            <parm name=\"emdk_name\" value=\"Clk02\" />\n            <parm name=\"Date\" value=\"2014-11-22\" />\n            <parm name=\"Time\" value=\"11:22:33\" />\n        </characteristic>\n    </characteristic>\n\n\n    profileName\t\t\t= ClockProfile-1/Clock/Clk01\n    profileFlag\t\t\t= PROFILE_FLAG.SET\n\n    Results\n\n    extendedStatusCode\t= FEATURE_NOT_UNIQUE_EXTRADATA\n    statusCode\t        \t= FAILURE\n\n\n####Case 05:\n\n    :::xml\n    XML (EMDKConfig.xml):\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?><wap-provisioningdoc>\n    <characteristic type=\"ProfileInfo\">\n    <parm name=\"created_wizard_version\" value=\"3.0.2\"/>\n    </characteristic>\n    <characteristic type=\"Profile\">\n    <parm name=\"ProfileName\" value=\"ClockProfile-1\"/>\n    <parm name=\"ModifiedDate\" value=\"2015-03-16 09:14:43\"/>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2001-01-01\"/>\n    <parm name=\"Time\" value=\"01:01:01\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2002-02-02\"/>\n    <parm name=\"Time\" value=\"02:02:02\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk03\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2003-03-03\"/>\n    <parm name=\"Time\" value=\"03:03:03\"/>\n    </characteristic>\n    </characteristic>\n    </wap-provisioningdoc>\n\n    Parameters\n    extraData[0] = \"Clk01.Date=2014-10-10\";\n    extraData[1] = \"Clk01.Time=10:10:10\";\n\n    profileName\t\t\t= ClockProfile-1\n    profileFlag\t\t\t= PROFILE_FLAG.SET\n\n    Results\n\n    extendedStatusCode\t= FEATURE_NOT_UNIQUE_CONFIG\n    statusCode\t        \t= FAILURE\n\n####Case 06:\n\n    :::xml\n    XML (EMDKConfig.xml):\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?><wap-provisioningdoc>\n    <characteristic type=\"ProfileInfo\">\n    <parm name=\"created_wizard_version\" value=\"3.0.2\"/>\n    </characteristic>\n    <characteristic type=\"Profile\">\n    <parm name=\"ProfileName\" value=\"ClockProfile-1\"/>\n    <parm name=\"ModifiedDate\" value=\"2015-03-16 09:14:43\"/>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2001-01-01\"/>\n    <parm name=\"Time\" value=\"01:01:01\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2002-02-02\"/>\n    <parm name=\"Time\" value=\"02:02:02\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk03\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2003-03-03\"/>\n    <parm name=\"Time\" value=\"03:03:03\"/>\n    </characteristic>\n    </characteristic>\n    </wap-provisioningdoc>\n\n    Parameters\n    extraData[0] = \"Clk01.Date=2014-10-10\";\n    extraData[1] = \"Clk01.Time=10:10:10\";\n\n    profileName\t\t\t= ClockProfile-1/Clock/Clk01\n    profileFlag\t\t\t= PROFILE_FLAG.SET\n\n    Results\n\n    extendedStatusCode\t= FEATURE_NOT_UNIQUE_CONFIG\n    statusCode\t        \t= FAILURE\n    Case 07:\n    XML (EMDKConfig.xml):\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?><wap-provisioningdoc>\n    <characteristic type=\"ProfileInfo\">\n    <parm name=\"created_wizard_version\" value=\"3.0.2\"/>\n    </characteristic>\n    <characteristic type=\"Profile\">\n    <parm name=\"ProfileName\" value=\"ClockProfile-1\"/>\n    <parm name=\"ModifiedDate\" value=\"2015-03-16 09:14:43\"/>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2001-01-01\"/>\n    <parm name=\"Time\" value=\"01:01:01\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2002-02-02\"/>\n    <parm name=\"Time\" value=\"02:02:02\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk03\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2003-03-03\"/>\n    <parm name=\"Time\" value=\"03:03:03\"/>\n    </characteristic>\n    </characteristic>\n    </wap-provisioningdoc>\n\n    Parameters\n    extraData[0] = \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <characteristic type=\"Profile\" >\n    <parm name=\"ProfileName\" value=\"ClockProfile-1\" />\n    <characteristic type=\"Clock\" >\n        <parm name=\"emdk_name\" value=\"Clk01\" />\n        <parm name=\"Date\" value=\"2014-11-22\" />\n        <parm name=\"Time\" value=\"11:22:33\" />\n    </characteristic>\n    </characteristic>\n\n\n\n    profileName\t\t\t= ClockProfile-1\n    profileFlag\t\t\t= PROFILE_FLAG.SET\n\n    Results\n\n    extendedStatusCode\t= FEATURE_NOT_UNIQUE_CONFIG\n    statusCode\t        \t= FAILURE\n\n####Case 08:\n\n    :::xml\n    XML (EMDKConfig.xml):\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?><wap-provisioningdoc>\n    <characteristic type=\"ProfileInfo\">\n    <parm name=\"created_wizard_version\" value=\"3.0.2\"/>\n    </characteristic>\n    <characteristic type=\"Profile\">\n    <parm name=\"ProfileName\" value=\"ClockProfile-1\"/>\n    <parm name=\"ModifiedDate\" value=\"2015-03-16 09:14:43\"/>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2001-01-01\"/>\n    <parm name=\"Time\" value=\"01:01:01\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk01\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2002-02-02\"/>\n    <parm name=\"Time\" value=\"02:02:02\"/>\n    </characteristic>\n    <characteristic type=\"Clock\" version=\"4.2\">\n    <parm name=\"emdk_name\" value=\"Clk03\"/>\n    <parm name=\"AutoTime\" value=\"false\"/>\n    <parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n    <parm name=\"Date\" value=\"2003-03-03\"/>\n    <parm name=\"Time\" value=\"03:03:03\"/>\n    </characteristic>\n    </characteristic>\n    </wap-provisioningdoc>\n\n    Parameters\n    extraData[0] = \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <characteristic type=\"Profile\" >\n    <parm name=\"ProfileName\" value=\"ClockProfile-1\" />\n    <characteristic type=\"Clock\" >\n        <parm name=\"emdk_name\" value=\"Clk01\" />\n        <parm name=\"Date\" value=\"2014-11-22\" />\n        <parm name=\"Time\" value=\"11:22:33\" />\n    </characteristic>\n    </characteristic>\n\n\n\n    profileName\t\t\t= ClockProfile-1/Clock/Clk01\n    profileFlag\t\t\t= PROFILE_FLAG.SET\n\n    Results\n\n    extendedStatusCode\t= FEATURE_NOT_UNIQUE_CONFIG\n    statusCode\t        \t= FAILURE"},{"key":"guide-name_value_pair","name":"Name Value Pair Functionality Programmer's Guide","md":"#Name Value Pair Functionality Programmer's Guide\n\n##Introduction\n\nThe [ProfileManager](#api-ProfileManager) API exposes a method ( processProfile ) that is used\nto install and activate a static XML profile located in your projects Assets folder. The API also exposes an overload for processProfile that allows one to submit a String Array containing Name=Value Pairs that can be used to replace Name=Value Pairs in a specified Profile before installing and activating that profile. The following guide explains the use of Name=Value Pair replacement and a utility method to help create Name=Value pairs.\n\n##String Array ( extraData )as Name-Value Pair Array\n###Method Signature\n\n\t:::java\n\tprocessProfile(String profileName,\n\t\t\t\t   ProfileManager.PROFILE_FLAG profileFlag,\n\t \t\t\t   String[] extraData);\n\n\n###profileName\nThe profileName argument, can be used to specify the entire profile or a named section of XML Profile.\n\n- To Specify the entire profile, pass the value of the \"ProfileName\" parm as the profileName argument.\n- To Specify a section of a profile, build and pass a String containing the top level \"ProfileName\", the featureType of the section, and the emdk_name of the section all separated by forward slashes.\n **[profileName]/[featureType]/[feature Name]**\n\n>For example, if my profile is called ‘EmdkSampleProfile-1’ and the name I gave to the Clock feature is 'clock1'. Passing 'profileName' as ' EmdkSampleProfile-1/Clock/clock1’ will just process this part of the profile.\n\n###featureType\n\nValid FeatureTypes:\n\n- ActivitySelection\n- Barcode\n- MSR\n- Intent\n- Keystroke\n- IP\n- Clock\n- PowerMgr\n- PersistMgr\n- CertMgr\n- AppMgr\n- AccessMgr\n- Wi-Fi\n- GprsMgr\n\n\t\n\t\n###profileFlag\nThe profileFlag should be ProfileManager.PROFILE_FLAG.SET.\n\n###extraData\nExtraData should be an array of Strings. Each string element should be `<Feature_Name>.<Param_name>=<param_value>` format. For example \"bc1.decoder_upce0=true\". The Feature_Name can be from multiple features.\n\n##Example Usage\n\n\t:::java\n\t//EMDKConfig.xml\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?><wap-provisioningdoc>\n\t<characteristic type=\"ProfileInfo\">\n\t<parm name=\"created_wizard_version\" value=\"3.0.2\"/>\n\t</characteristic>\n\t<characteristic type=\"Profile\">\n\t<parm name=\"ProfileName\" value=\"ClockProfile-1\"/>\n\t<parm name=\"ModifiedDate\" value=\"2015-03-16 09:14:43\"/>\n\t<characteristic type=\"Clock\" version=\"4.2\">\n\t<parm name=\"emdk_name\" value=\"Clk01\"/>\n\t<parm name=\"AutoTime\" value=\"false\"/>\n\t<parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n\t<parm name=\"Date\" value=\"2001-01-01\"/>\n\t<parm name=\"Time\" value=\"01:01:01\"/>\n\t</characteristic>\n\t<characteristic type=\"Clock\" version=\"4.2\">\n\t<parm name=\"emdk_name\" value=\"Clk02\"/>\n\t<parm name=\"AutoTime\" value=\"false\"/>\n\t<parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n\t<parm name=\"Date\" value=\"2002-02-02\"/>\n\t<parm name=\"Time\" value=\"02:02:02\"/>\n\t</characteristic>\n\t<characteristic type=\"Clock\" version=\"4.2\">\n\t<parm name=\"emdk_name\" value=\"Clk03\"/>\n\t<parm name=\"AutoTime\" value=\"false\"/>\n\t<parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n\t<parm name=\"Date\" value=\"2003-03-03\"/>\n\t<parm name=\"Time\" value=\"03:03:03\"/>\n\t</characteristic>\n\t</characteristic>\n\t</wap-provisioningdoc>\n\n\n\t//example.java\n\tString[] extraData = new String[2];\n\textraData[0] \t\t= \"Clk01.Date=2014-10-10\"\n\textraData[1] \t\t= \"Clk02.Time=10:10:10\"\n\tprofileName\t\t= ClockProfile-1/Clock/Clk01\n\tEMDKResults result = mProfileManager.processProfile(\n\tprofileName, \n\tProfileManager.PROFILE_FLAG.SET, extraData);\n\nIn above example the profileName is given as ClockProfile-1/Clock/Clk01. The ClockProfile-1 is the profileName in XML. Clock is the feature Type and Clk01 is the feature Name. The feature name also referred as emdk_name.\n\n##Name Value Pair Utility Function\n\n###CreateNameValuePair\nCreateNameValuePair is a static function of the ProfileManager class. This function creates a name value pair string according to the format that is compatible with com.symbol.emdk.ProfileManager.processProfile(String, * PROFILE_FLAG, String[]) function. \n\n\t:::java\n\t/**\n\t * This function creates a name value pair string according to the format \n\t * that is compatible with \n\t * com.symbol.emdk.ProfileManager.processProfile(String, \n\t * PROFILE_FLAG, String[]) function.\n\t * @param emdk_name - emdk name String  \n\t * @param param_name - Parameter name String\n\t * @param param_value - Parameter value String\n\t * @return - Name value pair string.\n\t */\n\tString CreateNameValuePair(String emdk_name, String param_name, String param_value)\n\t\n\t//This function returns the String in <emdk_name>.<param_name>=<param_value> format.\n\t//For instance, \"clock1.date=2014-10-10\";\n"},{"key":"guide-newprojectvisualstudio","name":"Create a new project in Visual Studio","md":"#Create a new project in Visual Studio\n\n##Prerequisites\nBefore creating a project in Visual Studio you must have installed the following items:\n\n* Visual Studio 2013 or higher\n* [Xamarin Platform](http://xamarin.com/download)\n\n#Create a new project\n\n1. Start Visual Studio, and wait for the IDE to finish loading.\n2. From the `File` Menu, select `New`, then `Project`\n3. In the **New Project** dialog, select `Visual C#` then `Android` from the far left pane.\n4. Step 3 will load the the Xamarin Android Templates in the center pane, select `Blank App (Android)` from that pane.\n5. Enter a name for your project in the **Name:** field below the templates pane.\n6. Press `OK`, to create the project.\n\nVisual studio will then create and then load your new project.\n\n> Navigate **Back** in your browser to continue this tutorial\n"},{"key":"guide-profiles-about","name":" Using EMDK for Android Profiles","md":"# Using EMDK for Android Profiles\n##EMDK Profiles Overview\n\nThe EMDK for Android allows you to easily access various capabilities of your Android device from within an Android application. These capabilities are grouped together into, what is referred to as EMDK profiles. Each EMDK profile is broken into various features. Each profile feature has parameters to provide automatic enablement as well as configuration options that will control it's behavior. One such profile feature is Data Capture, which allows you to accesses the devices bar code scanner and magstripe reader.\n\n##EMDK Profile Features\n\n###Data Capture\n\nEMDK Data Capture profiles allow you to access and configure a devices bar code scanner and magstripe reader, along with how the data captured should be transmitted to your application. There are typically three components that are used to make this work:\n\n* [Activity Selector](#guide-profiles-profileactivity) - Automatically activates the profile based on application & activity combinations.\n* Input Sources - Choose if [Barcode](#guide-profiles-profilebarcode) & [MSR](#guide-profiles-profilemsr) is the source of the data.\n* Output Sources - Output the input source data as a [Keystroke](#guide-profiles-profilekeystroke), [Intent](#guide-profiles-profileintent) or [IP](#guide-profiles-profileIP) output.\n\n###Access Manager\nThe [Access Manager](#guide-profiles-access) profile feature allows you to configure a set of applications that will be allowed to run on the device. When a profile with this feature is enabled, the device will only allow applications on the WhileList to be executed.\n\n###Analytics Manager\nThe [Analytics Manager](#guide-profiles-analytics) profile feature allows you to configure what data about a device should be collected, and where the collected data should be stored.\n\n###App Manager\nThe [App Manager](#guide-profiles-app) profile feature allows you to install, upgrade, remove, enable, disable applications from the device. It also allows you to change the current application launcher, clear recent app list and much more.\n\n###Audio Manager\nThe [Audio Manager](#guide-profiles-audio) profile feature allows you to manage enhanced audio volume control configurations like Mute/Vibrate State and Current Active Profile.\n\n###Battery Manager\nZebra's Device batteries store information in their internal memory, for instance, the number of charge cycles a battery has accumulated. The [Battery Manager](#guide-profiles-battery) profile feature allows the developer to modify that Decommission Threshold from its factory setting.\n\n###Browser Manager\nThe [Browser Manager](#guide-profiles-browser) profile feature allows you to control the web browser on the device. For example you can set the browser homepage.\n\n###Camera Manager\nThe [Camera Manager](#guide-profiles-camera) profile feature allows you to control access to the cameras in a device. For example you can disable the user from using all cameras on the device.\n\n###Cellular Manager\nThe [Cellular Manager](#guide-profiles-cellular) profile feature allows you to configure options of the cellular radio on your device. For example you can turn off data roaming.\n\n###Cert Manager\nThe [Cert Manager](#guide-profiles-cert) profile feature allows you to install or uninstall certificates that can be used identify your device for a variety of purposes, including VPN or Wi-Fi network access as well as authentication to servers by apps such as Email or Chrome.\n\n###Clock\nThe [Clock Manager](#guide-profiles-clock) profile feature allows you to set the devices current date, time and timezone.\n\n###Component Manager\nThe [Component Manager](#guide-profiles-component) profile feature allows you to manage the state of Components, such as a device's Ethernet Port.\n\n###Device Admin Manager\nThe [Device Admin Manager](#guide-profiles-devadmin) profile feature allows you to manage applications allowed configure settings on the device.\n\n###DHCP Manager\nThe [DHCP Manager](#guide-profiles-dhcp) profile feature allows you to control various DHCP configuration options.\n\n###Display Manager\nThe [Display Manager](#guide-profiles-display) profile feature allows you to control the screen timeout value to conserve power.\n\n###Encrypt Manager\nThe [Encrypt Manager](#guide-profiles-encrypt) profile feature allows you to set encryption policies on a device through MX XML. For example a developer can create an EFS for storing application data.\n\n###GPRS Manager\nThe [GPRS Manager](#guide-profiles-gprs) profile feature allows you to configure GPRS APN settings for a carrier's network.\n\n###KeyMap Manager\nThe [KeyMap Manager](#guide-profiles-keymap) profile feature allows you remap the usage of the device's hardware keys.\n\n###Persistence Manager\nThe [Persistence Manager](#guide-profiles-persistence) profile feature allows you to keep the MX features persistent on a device even after a reset.\n\n###Power Key Manager\nThe [PowerKey Manager](#guide-profiles-powerkey) profile feature allows you to control which options appear on the power menu on the device.\n\n###Power Manager\nThe [Power Manager](#guide-profiles-power) profile feature allows you to perform power management operations such as putting the device into Sleep mode, re-power or perform an OS Update. It also allows you to perform Enterprise Reset, Factory Reset and full device wipe. The action will be performed when the profile is enabled.\n\n###SD Card Manager\nThe [SD Card Manager](#guide-profiles-sdcard) profile feature allows you to manage the use of the devices SD card.\n\n###Settings Manager\nThe [Settings Manager](#guide-profiles-settings) profile feature allows you to manage settings UI configuration by providing the ability to invoke Enterprise Reset in Settings UI of your device.\n\n###Threat Manager\nThe [Threat Manager](#guide-profiles-threat) profile feature allows you to control what security threats a device actively monitors and how to respond.\n\n###Touch Manager\nThe [Touch Manager](#guide-profiles-touch) profile feature allows you to set the Touch Mode on your device in order to interact with User Interface.\n\n###UI Manager\nThe [UI Manager](#guide-profiles-ui) profile feature allows you to manage UI configurations using its UI Manager parameters.\n\n###USB Manager\nThe [USB Manager](#guide-profiles-usb) profile feature allows you to manage USB configurations of your device.\n\n###Wi-FI\nThe [Wi-Fi](#guide-profiles-wifi) profile feature allows you to manage Wi-Fi profiles available on the device as wells Wi-Fi settings Band and Channel selection, 802.11d / country configuration, and Disable / Enable, etc.\n\n###Wireless Manager\nThe [Wireless Manager](#guide-profiles-wireless) profile feature allows you to configure wireless devices such as Bluetooth, and NFC.\n\n> The Wifi radio is configured through Wi-Fi Manager profile not this Wireless Manager Profile\n\n###XML Manager\nThe [XML Manager](#guide-profiles-xml) profile feature allows you to specify various XML processing modes to be used.\n\n\n##Using the EMDK Profile Manager\n\nProfile Manager is an exclusive EMDK technology offered within your IDE, providing a GUI based development tool. This allows you to write fewer lines of code resulting in reduced development time, effort and errors.  \n\n###Accessing the Profile Manager\n1. Inside your IDE select an open Android Application.\n2. Select \"EMDK\" -> \"Profile Manager\" on the toolbar.  \n    ![img](images/profiles/image001.jpg)\n\n###Creating a Profile\n\n1. Open the \"EMDK Profile Manager\".  \n2. Click \"Create\".  \n\n    ![img](images/profiles/image002.jpg)\n3. Enter a Profile Name and click \"Create\".  This name is how the profile will be identified by the EMDK.\n\n\t![img](images/profiles/image003.jpg)  \n4. Select the features you would like to enable by selecting the item from the list of \"Available Features\" and clicking the right arrow button.\n\t>Note:  \n\t>\n\t> You must enable both a Data Capture Delivery Feature and a Data Capture Input Feature for the profile to send data to your application. For example \"Barcode\" and \"Intent\".\n\t>\n\t> You can remove a feature from the \"Selected Features\" list by clicking the left arrow button.\n\n\t![img](images/profiles/image004.jpg)  \n\n5. Select a \"Selected Features\" and the list of parameters will populate on the right hand side of the dialog. When you click on a parameter a description with populate on the lower left hand corner of the dialog.  \n\n\t![img](images/profiles/image005.jpg)  \n6. When complete click \"Finish\".\n7. Click \"Close\".  \n\n\t![img](images/profiles/image006.jpg)\n\t>Note:  \n\t>The profile XML will be generated and saved to \"EMDKConfig.XML\" inside your projects \"assets\" folder.\n\n###Editing a Profile\n\n1. Open the EMDK Profile Manager.\n2. Select a Profile to modify and click \"Edit\".  \n\n\t![img](images/profiles/image007.jpg)  \n3. Edit the profile using the Profile Manager in the same way you would when creating a new profile.\n4. When complete click \"Finish\".\n5. Click \"Close\".  \n\n\t![img](images/profiles/image008.jpg)\n\n\t>Note:  \n\t>The profile XML will be updated and saved to \"EMDKConfig.XML\" inside your projects \"assets\" folder.\n\n###Renaming a Profile\n\n1. Open the EMDK Profile Manager.\n2. Select a Profile to rename and click \"Rename\".  \n\n\t![img](images/profiles/image009.jpg)  \n3. Enter the new name and click \"Rename\";  \n\n\t![img](images/profiles/image010.jpg)  \n4. Click \"Close\".  \n\n\t![img](images/profiles/image011.jpg)  \n\n\t>Note:  \n\t>The profile XML will be updated and saved to \"EMDKConfig.XML\" inside your projects \"assets\" folder.\n\n###Copying a Profile\n\n1. Open the EMDK Profile Manager.\n2. Select a Profile to copy and click \"Copy\".  \n\n\t![img](images/profiles/image012.jpg)  \n3. Enter the a name profile name to uses and click \"Copy\";  \n\n\t![img](images/profiles/image013.jpg)  \n4. Click \"Close\".  \n\n\t![img](images/profiles/image014.jpg)  \n\n\t>Note:  \n\t>The profile XML will be updated and saved to \"EMDKConfig.XML\" inside your projects \"assets\" folder.\n\n\n###Deleting a Profile\n1. Open the EMDK Profile Manager.\n2. Select a Profile to delete and click \"Delete\".  \n\n\t![img](images/profiles/image015.jpg)  \n3. Confirm delete by clicking \"Delete\";  \n\n\t![img](images/profiles/image016.jpg)  \n4. Click \"Close\".  \n\n\t![img](images/profiles/image017.jpg)  \n\n\t>Note:  \n\t>The profile XML will be updated and saved to \"EMDKConfig.XML\" inside your projects \"assets\" folder.\n\n##Using the Profile Manager API\nOnce you create your profiles using the Profile Manager, they will be bundled with your application and available to access using the [Profile Manager APIs](#guide-reference-EMDKList). These profiles will NOT be applied on the device until it is processed using these APIs.\n\n### Multiple Ways to Access\nIn the ProfileManager API, you will see three methods for `processProfile`. Essentially the last parameter, `extraData`, is one of three types:\n\n* **Document** - data will be handled as a XML Document.\n* **String** - data will be handled as a raw string.\n* **ProfileConfig** - data will be handled as a ProfileConfig class.\n\n>WARNING!: The preferred way is to use the `ProfileConfig` option and the examples below present using such option. Using the Document or String methods may not work if the XML is not structured properly. See usage notes below for more information about using these methods.\n\n###Creating or Activating a Profile\nA profile is created or activated with using the PROFILE_FLAG.SET option. If the profileFlag is set to SET, and if the given profile is not available, it will look for a valid profile in the extraData argument and if present, the profile  will be added to the internal XML volatile repository and also applied to the device.  If the profile is present, then it will be applied to the device.\n\n> Note: The following example uses ProfileConfig object, which is currently only available for DataCapture profile features.\n\n\t:::java\n\t@Override  \n    public void onOpened(EMDKManager emdkmanager)  \n    {  \n        //Create the Profile Config object  \n        ProfileConfig profileConfigObj = new ProfileConfig();  \n\n        //Get the Profile Manager  \n        ProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);  \n\n        //Create the new profile  \n        EMDKResults results = profileManager.processProfile(\"ProfileName\", ProfileManager.PROFILE_FLAG.SET, profileConfigObj);\n    }  \n\n###Getting a Profile\nIf profileFlag is set to GET and if the profile is present in the internal repository, it will be returned in the extraData object.\n\n> Note: The following example uses ProfileConfig object, which is currently only available for DataCapture profile features.\n\n\t:::java\n\t@Override  \n    public void onOpened(EMDKManager emdkmanager)  \n    {  \n        //Create the Profile Config object  \n        ProfileConfig profileConfigObj = new ProfileConfig();  \n\n        //Get the Profile Manager  \n        ProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);  \n\n        //Get the profile and store it in the ProfileConfig object  \n        EMDKResults results = profileManager.processProfile(\"ProfileName\", ProfileManager.PROFILE_FLAG.GET, profileConfigObj);\n    }  \n\n###Modifying a Profile\nTo modify a profile, you would:\n\n* Use the PROFILE_FLAG.GET option to retrieve the profile (if it exists).\n* Use the profileConfig Object and APIs to modify the feature parameters.\n* Use the PROFILE_FLAG.SET option to save the parameters.\n\n> Note: The following example uses ProfileConfig object, which is currently only available for DataCapture profile features.\n\n \t:::java\n \t@Override  \n    public void onOpened(EMDKManager emdkmanager)  \n    {  \n        //Create the Profile Config object  \n        ProfileConfig profileConfigObj = new ProfileConfig();  \n\n        //Get the Profile Manager  \n        ProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);  \n\n        //Get the profile and store it in the ProfileConfig object  \n        EMDKResults results = profileManager.processProfile(\"ProfileName\", ProfileManager.PROFILE_FLAG.GET, profileConfigObj);  \n        //Enable MSR  \n        profileConfigObj.dataCapture.msr.msr_input_enabled = ENABLED_STATE.TRUE;  \n        //Modify Profile  \n        EMDKResults ModifyResults = profileManager.processProfile(\"ProfileName\", ProfileManager.PROFILE_FLAG.SET, profileConfigObj);  \n    }  \n\n## Usage Notes\n\n### Getting Started with Tutorial\nThis is an overview of how you can create and integrate Profiles using EMDK Profile Manager. Click [here](#guide-tutorial-tutdatacaptureprofile) to get started with a detailed tutorial on Data Capture Profiles to understand better.  \n\n### Multiple Instance of Features\nThere should only be one instance of the DataCapture feature. The EMDK Profile Manager will not allow you to add multiple DataCapture features, but may happen if you are manually editing the EMDKConfig.xml. Other profile features can have multiple instances and may be required in some cases. For example, you may need two 'Certificate Manager' features. The first one to initialize the certificate store and the second one to install a new certificate.\n\n### Order of Features\nThe profile features will be applied synchronously in the order they appear. For example, you may want to set the clock before you attempt to connect to a Wi-Fi network.\n\n### extraData as XML String\nThe processProfile method has an overload method that allows sending XML content in the `extraData` parameter as a String.  \n\nMethod Signature:\n\n\t:::java\n\t// Pass in a string in XML form\n\tprocessProfile(String profileName, ProfileManager.PROFILE_FLAG profileFlag, String extraData)\n\n`profileName` can be:\n\n1. `[Name of Profile]` - to reference the entire profile. ex: 'EMDKProfile1'\n2. `[profileName]/[featureType]/[feature friendly name in profile parameters]` to just edit part of the profile. For example, if my profile is called 'Profile1' and the name I gave to the Clock feature is 'ckEST'. Passing 'profileName' as 'Profile1/Clock/ckEST' will just process this part of the profile.\n\t* Valid `[featureType]`:\tActivitySelection, Barcode, MSR, Intent, Keystroke, IP, Clock, PowerMgr, PersistMgr, CertMgr, AppMgr, AccessMgr, Wi-Fi, GprsMgr\n\n#### XML String Structure\nOne way you can see how this XML string should be structured is to use the Profile Manager in Eclipse.\n\n1. Open any project in Eclipse that does not have a EMDK profile defined already (so you get just the parameters you want to change).\n2. Select EMDK / Profile Manager from the menu.\n3. Add the Profile features you want and selection the options you wish to use.\n4. Click Finish when you are done with your selections.\n5. Look in the `assets` folder and open `EMDKConfig.xml`\n\n\t![img](images/MxAppManagerTutorialImages/emdk_config_file_entries.jpg)\n6. Notice the XML structure that is shown. This complete structure is to be passed in the extraData parameter as a string. You can choose to copy and paste this into your code to be used.\n\n> WARNING!: XML parm names and values may not be the same as what is presented in the Profile Manager wizard. Pay close attention to the fields of interest. It is not recommended to manually edit this XML, use the Profile Manager Wizard to ensure proper formation of the XML structure and values.\n\n#### Profile Name Usage Notes\nIf the ProfileName node is given in extraData and the ProfileFlag is SET, ProfileName in ExtraData should match with the first parameter passed to processProfile.\n\nExample:\n\n\t:::java\n\tString[] extraData = new String[1];\n\textraData[0]=\n\t\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n\t\"<characteristic type=\\\"Profile\\\">\" +\n\t\"<parm name=\\\"ProfileName\\\" value=\\\" EMDKProfile1\\\"/>\" +\n\t\"<characteristic type=\\\"Clock\\\">\" +\n\t\"<parm name=\\\"emdk_name\\\" value=\\\"ck1\\\"/>\" +\n\t\"<parm name=\\\"Date\\\" value=\\\"2013-05-23\\\" />\" +\n\t\"<parm name=\\\"Time\\\" value=\\\"6:59:00\\\" />\" +\n\t\"<parm name=\\\"TimeZone\\\" value=\\\"America/Los_Angeles\\\" />\" +\n\t\"</characteristic>\"+\n\t\"</characteristic>\";\n\n\temdkStatus = mProfileManager.processProfile(\"EMDKProfile1\", ProfileManager.PROFILE_FLAG.SET, extraData);\n\n* If the ProfileName node is NOT given in extraData and the ProfileFlag is SET, the content will be merged with the profile given in the first parameter passed to processProfile.\n\n* If the ProfileFlag is SET and the profile given in the first parameter passed to processProfile does not exist in EMDKConfig.xml, the profile will be appended to the internal repository.\n\n* DataCapture content (Activity Selection, Barcode, MSR, Intent, Keystroke, IP) is considered as a whole and setting any individual feature will set as a whole. In other words, setting \"EmdkSampleProfile-1/Keystroke\" will push all the DataCapture features to the device.\n\n#### Feature Name Usage Notes\nEach specific profile feature can be named so that only that portion of the profile can be referenced. This can be accomplished by:\n\n1. Specifying a name for the specific feature within a profile.\n2. Using the fully qualified name as the first parameter of the processProfile method.\n\n* If the ProfileFlag is SET, the emdk_name given in ExtraData should match the third part of the profileName passed to the processProfile method (first parameter).\n\nIn the following example, we created a profile called `EMDKProfile1` and added the Clock feature with a name of `ck2`. Now we can modify that profile using the processProfile method, making sure we specify the `emdk_name` parameter as `ck2` and use a profileName of `EMDKProfile1/Clock/ck2` in the processProfile method:\n\n\t:::java\n\tString[] extraData = new String[1];\n\textraData[0]=\n\t\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n\t\"<characteristic type=\\\"Profile\\\">\" +\n\t\"<parm name=\\\"ProfileName\\\" value=\\\" EMDKProfile1\\\"/>\" +\n\t\"<characteristic type=\\\"Clock\\\">\" +\n\t\"<parm name=\\\"emdk_name\\\" value=\\\"ck2\\\"/>\" +\n\t\"<parm name=\\\"Date\\\" value=\\\"2013-05-23\\\" />\" +\n\t\"<parm name=\\\"Time\\\" value=\\\"6:59:00\\\" />\" +\n\t\"<parm name=\\\"TimeZone\\\" value=\\\"America/Los_Angeles\\\" />\" +\n\t\"</characteristic>\"+\n\t\"</characteristic>\";\n\n\temdkStatus = mProfileManager.processProfile(\"EMDKProfile1/Clock/ck2\", ProfileManager.PROFILE_FLAG.SET, extraData);\n\n* If the ProfileFlag is SET, the emdk_name is NOT given in ExtraData and if the first parameter passed to processProfileis has the fully qualified name (ex: EMDKProfile1/Clock/ck2) , content will be appended to the profile (this only applicable for non-DataCapture features).\n\nExample:  \n\n\t:::java\n\tString[] extraData = new String[1];\n\textraData[0]=\n\t\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n\t\"<characteristic type=\\\"Profile\\\">\" +\n\t\"<parm name=\\\"ProfileName\\\" value=\\\" EMDKProfile1\\\"/>\" +\n\t\"<characteristic type=\\\"Clock\\\">\" +\n\t\"<parm name=\\\"Date\\\" value=\\\"2013-05-23\\\" />\" +\n\t\"<parm name=\\\"Time\\\" value=\\\"6:59:00\\\" />\" +\n\t\"<parm name=\\\"TimeZone\\\" value=\\\"America/Los_Angeles\\\" />\" +\n\t\"</characteristic>\"+\n\t\"</characteristic>\";\n\n\temdkStatus = mProfileManager.processProfile(\"EMDKProfile1/Clock\", ProfileManager.PROFILE_FLAG.SET, extraData);\n\n#### PROFILE_FLAG.SET Usage Summary\nHere is a summary of the above scenarios when using PROFILE_FLAG.SET and XML in the extraData parameter:\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>profileName</th>\n\t\t<th>EMDKConfig.XML</th>\n\t\t<th>extraData</th>\n\t\t<th>Behavior</th>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>No</td>\n\t\t<td>Settings specified in XML will get applied to the device.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Barcode</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>No</td>\n\t\t<td>Settings specified in DataCapture nodes in XML will get applied to the device.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Barcode/Bar1</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>No</td>\n\t\t<td>Settings specified in DataCapture nodes in XML will get applied to the device given that the emdk_name is set as “Bar1”.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>No</td>\n\t\t<td>All the Clock feature nodes are applied to the device.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock/Clk1</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>No</td>\n\t\t<td>Settings defined in the Clk1 node will be applied to the device.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock/Clk2</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>No</td>\n\t\t<td>Settings defined in the Clk2 node will be applied to the device.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>Settings for Barcode and Clk2</td>\n\t\t<td>Settings in XML and in extraData gets applied to the device</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Barcode</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>Settings for Barcode and Clk2</td>\n\t\t<td>FAILURE is returned</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Barcode/Bar1</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>Settings for Barcode and Clk1</td>\n\t\t<td>FAILURE is returned</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>Settings for Barcode and Clk1</td>\n\t\t<td>FAILURE is returned</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>Settings for Barcode and Clk2</td>\n\t\t<td>FAILURE is returned</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock/Clk1</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>Settings for Barcode and Clk1</td>\n\t\t<td>FAILURE is returned</td>\n\t</tr>\n</table>\n"},{"key":"guide-profiles-access","name":" Access Manager Profile Feature Reference","md":"# Access Manager Profile Feature Reference\n## Overview\n\nThe Access Manager feature allows you to configure a set of applications that will be allowed to run and install on the device. When this feature is enabled, the device will only allow user installed applications on the Whitelist to be executed and/or installed (some applications that are part of the default operating system will still be available). To disable the Whitelist, you would select 'Single User Without Whitelist'.  \n\n>Note:  \n>It is important to include the executing EMDK application in the Whitelist otherwise your application will lose control of the Whitelist configuration and you will not be able to change the behavior.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Set Device Operation Mode to Single User without Whitelist\n* Set Device Operation Mode to Single User with Whitelist\n* Set System Settings Access to Full Access \n* Set System Settings Access to Reduced Access \n* Set Application Verification Mode to do not Verify App Signature\n* Set Application Verification Mode to Verify User App Signature\n* Set Application Verification Mode to Verify All App Signature\n* Delete Specified Packages \n* Delete All Packages \n* Delete Specified Signatures\n* Add Specified Package\n* Add Package to to List of Applications Allowed to Submit XML\n* Remove Package from List of Applications Allowed to Submit XML\n* Allow all Applications that can be Executed to Submit XML\n\n## Operation Mode\n>*WARNING* Enabling the `Whitelist` requires adding the EMDK package name `com.symbol.emdk.emdkservice` to the white list. Otherwise none of the EMDK APIs will work.\n\n* Single User Without Whitelist - Setting this feature will disable all Whitelist features.\n* Single User With Whitelist - Setting this feature will enable the Whitelist feature based on the details provided. You can choose to add or delete packages from the current Whitelist\n\n##System Settings Access\n>Note: This setting is available when the operation mode is `Single User With Whitelist`\n\n1. Full Access - The device's System Settings Menu will not be reduced\n2. Reduced Access - The device's System Settings menu will be reduced to a pre-selected group of options (Display, Volume, About)\n\n##Application Verification\nApplication Verification adds another level of security to whitelisting applications beyond just \nverifying a package name. Provide a signature for the package you are adding. The whitelist will then only allow\nthat exact package signature to launch.\n\n## Delete Packages\nOptions for deleting packages from the Whitelist\n\n* Delete No Packages - Does not delete any packages\n* Delete All Packages - Deletes all packages \n* Delete Specified Package - Delete specified package\n\t* Delete Package Name: Name of package(s) separated by a comma ex: com.mycompany.mypackage \n\n## Add Packages\nOptions for adding packages to the Whitelist\n\n> Note: Enabling the white list feature via access manager profile on TC70 KitKat device requires adding the EMDK package name `com.symbol.emdk.emdkservice` to the allowed packages white list to use EMDK APIs\n\n* Add No Packages - Does not add any packages\n* Add Specified Package - Add specified package\n\t* Add Package Name: Name of package(s) separated by a comma ex: com.mycompany.mypackage \n\n>Note: It is important to include the executing EMDK application in the Whitelist otherwise your application will lose control of the Whitelist configuration and you will not be able to change the behavior without an enterprise reset..\n\n## Allow Application To Submit XML\nYou can specify and restrict specific applications the ability to submit changes to the MX Framework. This feature is supported on devices that are running KitKat versions of Android like the TC70 and will only be used when the Whitelist feature is enabled.\n\n* **Allow Package Names** - Provide a comma separated list of package names that are allowed to submit XML to the MX framework.\n\n* **Disallow Package Names** - Provide a comma separated list of package names that are not allowed to submit XML to the MX framework.\n\n> NOTE: Enabling the white list feature via access manager profile on TC70 KitKat device requires adding the EMDK package name `com.symbol.emdk.emdkservice` to the allowed packages white list to use EMDK APIs and in the allow submit XML white list to use EMDK ProfileManager APIs to set profile.\n\n\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=AccessMgr&embed=true\"></iframe> \n"},{"key":"guide-profiles-analytics","name":" Analytics Manager Profile Feature Reference","md":"# Analytics Manager Profile Feature Reference\n\n## Overview\n\nThe Analytics Manager profile feature allows you to configure what data about a device should be collected, and where the collected data should be stored.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Enable/Disable Analytics \n* Set Transport Method\n* Configure Data sources\n* Configure Data Collection Levels for data sources\n\n##Group Action\nChoosing to configure levels for multiple Groups will allow you choose a collection level for each data group. For instance, you can set the CPU Usages data group to \"High\" \n\nChoosing to configure details for a single group will allow you choose an interval and which metrics should be collected for a group. For instance, you can set the system information group to collect every 5 minutes, and to include the memory load.\n\n##Transport Method\nThis profile feature allows your application to select where collected data logs are stored, Either, to a devices local storage or to a cloud based analytics provider.\n\n##Data sources\n  * **WWAN Performance**\n    * WWAN Signal Quality\n    * Outgoing Call Attempts\n    * WWAN Radio On Time\n    * Incoming Call Duration\n    * Successful Incoming Calls\n    * Incoming Call Attempts\n    * WWAN Error Rate\n    * Custom\n\n\n  * **WLAN Performance**\t\n    * WLAN Receive Packet Delta\n    * WLAN Signal Quality\n    * WLAN Transmit Package Delta\n    * WLAN Receive Byte Delta\n    * WLAN Transmit Byte Delta\n    * WLAN Radio On Time\n    * Custom\n\n\n  * **Battery and CPU Status**\t\n    * Battery Level Delta\n    * Battery Level\n    * AC Charge Count\n    * Display On Time\n    * AC Charge Time\n    * AC Charge Status\n    * Custom\n\n  * **System Information**\t\n    * Available (free) Storage Memory\n    * Available (free) Physical Memory\n    * Memory Load (% used) \n    * Total (installed) Storage Memory\n    * Total (installed) Physical Memory\n    * Custom\n\n\n  * **GPS Information**\n    * Current Altitude (in meters) from Sea Level\n    * GPS Device State\n    * GPS On Time Delta\n    * Current Course Heading (in degrees)\n    * Current Location (lat/Long)\n    * Position Dilution of Precision\n    * Custom\n\n  * **CPU Usage**\n    * Process CPU Time Delta\n    * Device CPU Time Delta\n    * Custom\n\n  \n##Data Collection Levels\n  * None\t\n  * Low\t\n  * Medium\t\n  * High \n\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=AnalyticsMgr&os=All&embed=true\"></iframe> \n"},{"key":"guide-profiles-app","name":" App Manager Profile Feature Reference","md":"# App Manager Profile Feature Reference\n\n## Overview\n\nThe App Manager feature allows you to install, upgrade, remove, enable, disable applications from the device. It also allows you to change the current application launcher, clear recent app list and much more.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Install Applications\n* Uninstall Applications\n* Upgrade Applications\n* Set a Default Launcher\n* Enable Application\n* Disable Application\n* Clear Recent Application List\n* Add Application to Protected List\n* Remove Application from Protected List\n* Clear Protected List\n* Enable Application Info\n* Disable Application Info\n\n## Install Application \nThis will install the specified application. The application must not exists on the device otherwise you will receive an error (Use the Upgrade parameter instead)\n\n* APK Path and Name: Must be the full path to the APK that will reside on the device. ex: '/storage/sdcard1/Herald.apk'\n\n## Uninstall Application \nThis will remove the specified application from the device.\n\n* Package Name: Provide the Android package name of the application ex: 'com.mycompany.mypackage'\n\n## Upgrade Application\nThis will upgrade/downgrade the specified application. The application must already exists on the device or you will receive an error (Use the Install parameter instead.\n\n* APK Path and Name: Must be the full path to the APK that will reside on the device. ex: '/storage/sdcard1/Herald.apk'\n\n## Default Launcher\nYou can provide a different application launcher to enable. The launcher application must reside on the device already.\n\n* Package Name: Provide the Android package name of the application ex: 'com.mycompany.mypackage'\n\n## Enable & Disable Application\nProvide a package name of the applications that you want to enable or disable. Disabling an application will disable the ability to launch the application.\n\n## Clear Recent Apps List\nIt will clear the list of recent apps that you opened. When you long press the menu button on symbol device, you will see a list of recently opened apps. After running your app using this feature, it will clear your device's recent app list including itself.  \n\n## Protected List\nYou can manage which applications are on the protected list. Applications on the protected list will not be force closed when the device is setup to run in multi-user mode and the current user logs off. Applications on the protected list are permitted to run across users.\n\n* Add Application - Specify the application's package name to add to the protected list.\n* Remove Application - Specify the application's package name to remove from the protected list.\n* Remove All - Removes all applications from the protected list\n\n## App Info\nThe application info dialog shows detailed information about the application as well as allow you to perform actions like: Force Stop, Enable/Disable, Clear Data, Clear Cache. You can specify whether you want to enable or disable access to this dialog for all applications.\n\n> Note: This feature is supported on devices that are running KitKat versions of Android like the TC70.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=AppMgr&os=All&embed=true\"></iframe> \n"},{"key":"guide-profiles-audio","name":" Audio Volume UI Manager Profile Feature Reference","md":"# Audio Volume UI Manager Profile Feature Reference\n\n## Overview\n\nThe Audio Manager feature allows you to manage enhanced audio volume control configurations\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Mute/Vibrate State\n* Current Active Profile \n* Audio UI Profile Action\n\n## Mute/Vibrate State\n\nSelect whether to mute the device or set the device to vibrate\n\n* **Mute** - Turn off audible sounds\n* **Vibrate** - Turn off audible sounds and turn on vibrate\n* **UnMute** - Turn on audible sounds and turn off Vibrate\n\n## Current Active Profile Action\n\nSpecify the Current Profile action to perform\n\n* **Set an Audio UI Profile as the current** \n\t* Name of the Current Audio UI Profile - Specify the name of the profile you wish to switch to.\n\t* Adjust current audio volume \n\t\t* Do not adjust the volume level - do not make audio volume setting take effect immediately \n\t\t* Adjust the volume level - make audio volume setting take effect immediately\n\n* **Adjust to the Preset volume level of the current Profile**\n\n* **Set the FactoryPreset Profile as the current Profile**\n\n\n## Audio UI Profile Action\n\n### Add an Audio UI Profile \nModify the following settings to customize your new Audio UI Profile. You do **not** need to provide values for all fields. Only fill in values you wish to modify.\n\n* **Name of the Audio UI Profile** - Provide a name to identify this profile\n* **UI Label of STREAM_MUSIC** - Provide the UI label for the music stream\n* **UI Icon of STREAM_MUSIC** - Provide the URL to the icon image for the music stream\n* **Control Parameters of STREAM_MUSIC** - Specify whether the stream is visible (1) or not (0) to the user\n* **Minimum, Maximum and Preset Volume Level for Speaker Mode** - Specify the volume levels for music stream in speaker mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Receiver Mode** - Specify the volume levels for music stream in receiver mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Wired Headset Mode** - Specify the volume levels for music stream in Wired Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Bluetooth Headset Mode** - Specify the volume levels for music stream in Bluetooth Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **UI Label of STREAM_RING** - Provide the UI label for the ring stream\n* **UI Icon of STREAM_RING** - Provide the URL to the icon image for the ring stream\n* **Control Parameters of STREAM_RING** - Specify whether the stream is visible (1) or not (0) to the user\n* **Minimum, Maximum and Preset Volume Level for Speaker Mode** - Specify the volume levels for ring stream in speaker mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Receiver Mode** - Specify the volume levels for ring stream in receiver mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Wired Headset Mode** - Specify the volume levels for ring stream in Wired Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Bluetooth Headset Mode** - Specify the volume levels for ring stream in Bluetooth Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **UI Label of STREAM_NOTIFICATION** - Provide the UI label for the NOTIFICATION stream\n* **UI Icon of STREAM_NOTIFICATION** - Provide the URL to the icon image for the NOTIFICATION stream\n* **Control Parameters of STREAM_NOTIFICATION** - Specify whether the stream is visible (1) or not (0) to the user\n* **Minimum, Maximum and Preset Volume Level for Speaker Mode** - Specify the volume levels for NOTIFICATION stream in speaker mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Receiver Mode** - Specify the volume levels for NOTIFICATION stream in receiver mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Wired Headset Mode** - Specify the volume levels for NOTIFICATION stream in Wired Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Bluetooth Headset Mode** - Specify the volume levels for NOTIFICATION stream in Bluetooth Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **UI Label of STREAM_SYSTEM** - Provide the UI label for the SYSTEM stream\n* **UI Icon of STREAM_SYSTEM** - Provide the URL to the icon image for the SYSTEM stream\n* **Control Parameters of STREAM_SYSTEM** - Specify whether the stream is visible (1) or not (0) to the user\t\n* **Minimum, Maximum and Preset Volume Level for Speaker Mode** - Specify the volume levels for SYSTEM stream in speaker mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Receiver Mode** - Specify the volume levels for SYSTEM stream in receiver mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Wired Headset Mode** - Specify the volume levels for SYSTEM stream in Wired Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Bluetooth Headset Mode** - Specify the volume levels for SYSTEM stream in Bluetooth Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **UI Label of STREAM_ALARM** - Provide the UI label for the ALARM stream\n* **UI Icon of STREAM_ALARM** - Provide the URL to the icon image for the ALARM stream\n* **Control Parameters of STREAM_ALARM** - Specify whether the stream is visible (1) or not (0) to the user\n* **Minimum, Maximum and Preset Volume Level for Speaker Mode** - Specify the volume levels for ALARM stream in speaker mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Receiver Mode** - Specify the volume levels for ALARM stream in receiver mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Wired Headset Mode** - Specify the volume levels for ALARM stream in Wired Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Bluetooth Headset Mode** - Specify the volume levels for ALARM stream in Bluetooth Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **UI Label of STREAM_VOICECALL** - Provide the UI label for the VOICECALL stream\n* **UI Icon of STREAM_VOICECALL** - Provide the URL to the icon image for the VOICECALL stream\t\n* **Control Parameters of STREAM_VOICECALL** - Specify whether the stream is visible (1) or not (0) to the user\n* **Minimum, Maximum and Preset Volume Level for Speaker Mode** - Specify the volume levels for VOICECALL stream in speaker mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Receiver Mode** - Specify the volume levels for VOICECALL stream in receiver mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Wired Headset Mode** - Specify the volume levels for VOICECALL stream in Wired Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Bluetooth Headset Mode** - Specify the volume levels for VOICECALL stream in Bluetooth Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **UI Label of Decode Beep Virtual Volume Scale** - Provide the UI label for Decode Beep Virtual Volume Scale\n* **UI Icon of Decode Beep Virtual Volume Scale** - Provide the URL to the icon image for Decode Beep Virtual Volume Scale\n* **Control Parameters of STREAM_VVS** - Specify whether the stream is visible (1) or not (0) to the user\n* **Minimum, Maximum and Preset Volume Level for Speaker Mode** - Specify the volume levels for Decode Beep Virtual Volume Scale in speaker mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Receiver Mode** - Specify the volume levels for Decode Beep Virtual Volume Scale in receiver mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Wired Headset Mode** - Specify the volume levels for Decode Beep Virtual Volume Scale in Wired Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n* **Minimum, Maximum and Preset Volume Level for Bluetooth Headset Mode** - Specify the volume levels for Decode Beep Virtual Volume Scale in Bluetooth Headset mode (in the order of &quot;min, max, preset&quot; separated by comma and as positive integers less than 256, e.g. &quot;10, 1, 5&quot;)\n\n### Remove an Audio UI Profile\n* **Name of the Audio UI Profile** - Provide a the name of the profile you wish to remove\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=AudioMgr&os=All&embed=true\"></iframe> \n\n\n\n\n\n\n\n\n"},{"key":"guide-profiles-battery","name":" Battery Manager Profile Feature Reference","md":"# Battery Manager Profile Feature Reference\n\n## Overview\nZebra's Device batteries store information in their internal memory, for instance, the number of charge cycles a battery has accumulated.  Zebra's Android devices expose this through a battery settings menu that displays the accumulated information.  These Android devices are configured with a Decommission Threshold Value that is the maximum number of charge cycles a battery can accumulate before being flagged as a battery that should be replaced. Battery Manager allows the developer to modify that Decommission Threshold from its factory setting.\n\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Set Battery Usage Decommissioned Threshold\n* Set Battery Percentage Decommissioned Threshold\n\n##Smart Battery Threshold\nThis setting would be used to modify the Decommissioned Threshold for Zebra Smart Batteries.\n\n* Set the threshold value of the Battery Usage Number as an Integer ranging from 0 to 65535 (value 0 for no change or not applicable)\n\n##Gifted Battery Threshold\nThis setting would be used to modify the Decommissioned Threshold for Zebra Gifted Batteries.\n\n* Set the threshold value of the Battery Health Percentage as an Integer ranging from 0 to 100 (value 0 for no change or not applicable)\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=BatteryMgr&os=All&embed=true\"></iframe>\n"},{"key":"guide-profiles-browser","name":" Browser Manager Profile Feature Reference","md":"# Browser Manager Profile Feature Reference\n\n## Overview\n\nThe Browser Manager feature allows your application to control the web browser on the device. For example you can set the browser homepage. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n* Set Default homepage\n* Turn on/off Remember Password\n* Turn on/off save form data\n\n## Set Default homepage\nWhen entering a url for the homepage, limit the string to 2000 characters.\n\n## Remember Password\nThe Android browser can save and recall values placed in a password field. This profile feature will \nallow you to enable/disable the browsers password save/recall feature.\n\n\n## Save form data\nThe Android browser can save and recall values placed into form fields. This profile feature will \nallow you to enable/disable the browsers form field save/recall feature.\n\n## Feature Compatibility\n\n<iframe src=\"compare.html#mx=4.3&csp=BrowserMgr&os=All&embed=true\"></iframe> \n\n\n\n"},{"key":"guide-profiles-camera","name":" Camera Manager Profile Feature Reference","md":"# Camera Manager Profile Feature Reference\n\n## Overview\n\nThe Camera Manager feature allows your application to control access to the cameras in the device. For example you can disable the user from using all cameras on the device. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Enable/Disable the use of all Cameras\n* Enable/Disable the use of the Front Camera\n* Enable/Disable the use of the Rear Camera\n\n## All Cameras\nThis option will allow you to enable or disable both front and rear cameras on a device. \n\n## Front Camera\nThis option will allow you to enable/disable the front camera.\n\n## Rear Camera\nThis option will allow you to enable/disable the rear camera.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=CameraMgr&os=All&embed=true\"></iframe> "},{"key":"guide-profiles-cellular","name":" Cellular Manager Profile Feature Reference","md":"# Cellular Manager Profile Feature Reference\n\n## Overview\n\nThe Cellular Manager feature allows you to configure options of the  cellular radio on your device. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Data Roaming State on/off\n* Data Roaming Enabled/Disabled \n* Background Data State on/off\n* Background Data Enabled/Disabled \n\n## Data Roaming\nThis feature will allow you to control a devices ability to use cellular data while roaming. You can independently set the state as well as if it is enabled or disabled.\n\n## Background Data\nThis feature will allow your application to control background data usage on devices equipped with a cellular radio. You can independently set the state as well as if it is enabled or disabled.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=CellularMgr&os=All&embed=true\"></iframe> "},{"key":"guide-profiles-cert","name":" Certificate Manager Profile Feature Reference","md":"# Certificate Manager Profile Feature Reference\n\n## Overview\n\nThe Cert Manager feature allows your application to install or uninstall certificates and initialize the Android key store. You can use digital certificates to identify your device for a variety of purposes, including VPN or Wi-Fi network access as well as authentication to servers by apps such as Email or Chrome. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Install Certificate\n* Uninstall Certificate\n* Initialize Android Keystore\n* Adjust System Clock\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Initialize Android Keystore\nWhen you initialize the Android keystore you create a new keystore replacing any previously existing one.  Before installing or uninstalling certificates, a keystore must exist. You can choose to perform this action as a separate EMDK profile or include the Certificate Manager feature multiple times in one profile.\n\n### Keystore Password\nKeystore Password is a password required to initialize the Android Keystore.\n\n## Install Certificate\n\n### Certificate Alias\n\n* Provide the name(alias) that will uniquely identify the certificate. The old certificate with same alias name will be replaced by the new certificate.\n* Dynamic - The name of the cert is dynamically generated (This is currently not supported)\n\n#### Alias Handling Issues\nDue to current limitations of the Certificate Manager Feature (in an EAP-TLS scenario), it is not possible to \"override\" the Alias that is assigned to a Client Certificate and Private Key when they are installed into the Android KeyStore\n\nThe only way to determine the actual Alias that is assigned to a Client Certificate and Private Key when they are installed into the Android KeyStore is to examine the Android KeyStore after installation to determine which Alias was used:\n\n1. The same Alias will ALWAYS be assigned to a given Client Certificate and Private Key, no matter when, or on which device, it is installed\n\n2. Whenever a different Client Certificate is used, a different Alias will generally be assigned to the Client Certificate and Private Key\n\n#### Manually Determining the Certificate Alias\nA device can be used to capture the alias being used for the certificate being installed. It is recommended that the key store be cleared before performing these steps (Settings/Security/Clear Credentials)\n\n1. Use Certificate Manager to install the certificate onto a device.\n2. Navigate to Settings/Wi-Fi/'+'' to add a network\n3. Scroll to security, tap and select 802.1x EAP\n4. Scroll to EAP method, tap and select TLS\n5. Scroll to client certificate, tap and note a drop down box with \"(unspecified)\" and the alias of the installed certificate. The alias listed can become the value to use as the certificate when using WiFiConfig to configure a profile that uses EAP-TLS.\n\n###Certificate Type  \nType of certificate to be installed:\n\n* CA Certificate (*.PEM)\n* Client Certificate (*.PEM)\n* Client Certificate and Private Key (*.PFX)\n* Client Certificate and Private Key (*.P12)\n* Client Certificate and Private Key (*.PKCS12)\n\n>Note: Be sure to initialize the keystore the first time when installing certificate types with private keys (.PFX,.P12,.PKCS12)\n\n### Certificate method\nReference certificate file - method used to install a certificate. A file must exists on the device that contains the certificate data.\n\n### Certificate File\nSpecify the path and name of the to the certificate file that resides on the device.\n\n### Private Key Password\nPassword required to decrypt the private key (*.PFX, *.P12, *.PKCS12).\n\n## Uninstall Certificate\n\n### Certificate Alias\nProvide the name(alias) that will uniquely identify the certificate. The key store or trusted CA store will be searched for a record with the same alias name. If the record is found, it removes the key store or trusted CA store. \n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=CertMgr&os=All&embed=true\"></iframe> \n"},{"key":"guide-profiles-clock","name":" Clock Manager Profile Feature Reference","md":"# Clock Manager Profile Feature Reference\n\n## Overview\n\nClock allows for a programmatic way to set the date and time. To account for time zone nuances including daylight saving time, Clock expects the values for date and time to be entered as normalized values to UTC (GMT) time. In other words, the date and time set as parameters for Clock must be the UTC (GMT) equivalent of the local time being set. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n### Main Functionality\n\n* Set the Time Zone\n* Set the Date\n* Set the Time\n* Enable Auto Time\n* Disable Auto Time\n* Set NTP Server Address\n* Set Sync Interval\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## AutoTime\nUse an NTP server to automatically set the time, date and timezone. The NTP server will be synced at the specified interval.\n\n* NTP Server - the IP address of the NTP server\n* SyncInterval - time will be automatically synced at this interval\n\n## TimeZone \nProvide the TimeZone that the device should be set to. Note: The supported values for time zone are the same as Android supported values. For example, GMT-5 or Olson name such as America/New_York.\n\n## Date \nProvide the Date the device will be set to when the profile is enabled. It must have a length of 10 and must be in the format 'yyyy-MM-dd' (for example : 2014-12-31). It must be specified in UTC (Universal Time Coordinates) and not in LTC (Local Time Coordinates).\n\n## Time\nProvide the Time the device will be set to when the profile is enabled. It must have a length of 8 and must be in the format HH:mm:ss (for example : 23:59:59). It must be specified in UTC (Universal Time Coordinates) and not in LTC (Local Time Coordinates).\n\n## Usage Notes\n\n###Example #1\nWe want to set the clock with the following settings:\n\n* Set the date to 15-Jan-2010\n* Set the time to 2:15PM local time\n* Set the time zone to New York, New York, USA\n\n15-Jan is eastern standard time in New York and not daylight saving time meaning it is GMT-04:00. So the parameters to use for Clock would be:\n\n* TimeZone = New York, New York, USA\n* Date = 15-Jan-2010 (2010-01-15)\n* Time = 6:15PM (18:15:00)\n\n###Example #2\nWe want to set the clock with the following settings:\n\n* Set the date to 11-Jul-2014\n* Set the time to 2:55AM local time\n* Set the time zone to Bangalore, India\n\nThe time zone for Bangalore is GMT+05:30. So the parameters to use for Clock would be:\n\n* TimeZone Bangalore, India\n* Date = 10-Jul-2010 (2010-07-10)\n* Time = 9:25PM (21:25:00)\n\nNote the change of date as well as time. In this case, as the device converts this to local time, the date and time will both automatically be set properly when the offset is applied.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=Clock&os=All&embed=true\"></iframe> \n"},{"key":"guide-profiles-component","name":" Component Manager Profile Feature Reference","md":"# Component Manager Profile Feature Reference\n\n## Overview\n\nThe Component Manager feature allows you to manage the state of Components, such as a devices Ethernet Port.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* EthernetUsage\n* EthernetState\n\n## EthernetUsage\nThis feature can be used to enable or disable Ethernet Port Usage.\n\n**Options**:\n\n* Enable\n* Disable\n\n## EthernetState\nOnce an Ethernet Port Usage enabled, This feature can be used to turn the Ethernet Port On or Off.\n\n**Options**:\n\n* On\n* Off\n\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=ComponentMgr&os=All&embed=true\"></iframe>\n"},{"key":"guide-profiles-devadmin","name":" Device Admin Profile Feature Reference","md":"# Device Admin Profile Feature Reference\n\n## Overview\n\nThe Device Admin feature allows your application to manage configuration settings on the device.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n* Set Screen-Lock timeout interval\n* Allow/Disallow Application Installs from Unknown sources\n* Turn on/off Device Administrator\n\n> NOTE: The actual policy effective on the device is the one set by the most restrictive result requested by all active device admin apps.\n\n\n\n## Screen-Lock Timeout\nThis profile feature will allow your application set the amount of time a device can be idle before the Screen is locked.\n\n## App Installs from Unknown sources\nThis profile feature will allow your application to control installation of applications from \"Unknown Sources\".  \n\n**Install methods considered Unknown**\n\n* Install from ADB\n* Download and install from locations other than Google play\n* Receive and install from email\n* Install via APIs\n* Install via File Browser, for packages that are obtained in various ways, e.g. from SD card, from USB (UMS, ADB, or others) or any other wired data connection, etc.\n\n\n\n## Device Administrator\nAn Android application that uses Android Device Admin API's must also be added to an Device Admin list on a device. This profile feature will allow you to add or remove an application from the Device Admin list. You must provide the package name of the application to be added as a Device Admin. You can also specify a specific class name of the application.\n\n> NOTE: The state of being a device admin or not for an application does not restrict an application from being installed or launched. \n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=DevAdmin&os=All&embed=true\"></iframe> \n\n"},{"key":"guide-profiles-dhcp","name":" DHCP Option Manager Profile Feature Reference","md":"# DHCP Option Manager Profile Feature Reference\n\n## Overview\n\nThe DHCP Option Manager feature allows you to control various DHCP configuration options.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Option code 12\n* Option code 77\n* Option code 28\n* Option code 42\n\n##Option code 12\n* **Send Host Name**\n\t* Host Name Option Value - Specify the host name you would like the client to send.\n\n>Note: HostName identifies a client on a network.\n\n##Option code 77\n* **Send User Class**\n\t* User Class Value - Specify the Class name you would like to send\n\n>Note: The class name value would allow a DHCP server to select an appropriate address pool to assign an address to the client and appropriate configuration parameters.\n\n##Option code 28\n* **Request Broadcast Address**\n\n##Option code 42\n* **Request NTP Server**\n* **Request TFTP Server Name**\n* **Request Boot File Name**\n* **Request Domain Search**\n* **Request TFTP Server Address**\n\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=DHCPMgr&os=All&embed=true\"></iframe> \n\n\n\n"},{"key":"guide-profiles-display","name":" Display Manager Profile Feature Reference","md":"# Display Manager Profile Feature Reference\n\n## Overview\n\nThe Display Manager feature allows your application to control the screen timeout value to conserve power.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n* Set the Screen Timeout Interval\n\n\n##Screen Timeout Interval\nThis profile feature will allow your application to set how many seconds a device can be inactive before the screen turns off.\n\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=DisplayMgr&os=All&embed=true\"></iframe> "},{"key":"guide-profiles-encrypt","name":" Encrypt Manager Profile Feature Reference","md":"# Encrypt Manager Profile Feature Reference\n\n## Overview\n\nThe Encrypt Manager allows the developer to set encryption policies on a device through MX XML. For example a developer can create an EFS for storing application data.  \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Install/Revoke Encryption Key\n* Create/Delete EFS (Encrypted File System)\n* Encrypt SD Card\n* Format SD Card\n\n##Install Key\nThis profile feature allows your application to install a new encryption key or revoke a named key that resides in the key store. When installing a key, the value is optional. A provided key value should be a HEX string with a length of 64 bytes. If a value is not provided, a random key will be generated for a given key name. This feature will fail to apply if a key of the same name already resides in the devices key store. After successfully installing a key, all EFS's using that key will be mounted. If multiple unmounted EFS use the same mount point, only the first will be mounted.\n\n\n### Install Key?\n* Install Key Name - Provide a name for the key you wish to install.\n* Install Key Value - Provide the key you wish to install.\n\n### Revoke Key?\n* Revoke Key Name(s) - Provide the key name or names (separated by commas) you wish to revoke.\n\n\n> Note: After successfully revoking a key, all EFS using that key will be unmounted.\n\n##Create EFS\nThis profile feature allows your application to create an Encrypted File System (EFS) on a device.  Provide a name for the new EFS, a mount point where the EFS should be mounted, a storage type (SDcard or Internal), the name of the key that will be used for encryption, and a size for the EFS stated in MB. The provided EFS size must be at least 1MB and cannot exceed 4096MB.\nThe process of creating the EFS takes time. Access to the EFS will be denied during the creation process.\n\n* **Create EFS**\n\t* EFS Name - Provide a name for the EFS you wish to create\n\t* EFS encryption Key Name - Provide the name of the encryption key you would like to use to encyrpt the new EFS\n\t* EFS Location (internal/SDcard) - Select a location where the new EFS should be created\n\t* Mount point for EFS - Provide a mount point for you wish to use for the new EFS\n\t* Size of EFS in MB - Provide a size in MB(1-4095) for the new EFS\n\n\n>Note: EFS creation may fail for any of the following conditions**\n\t* Duplicate EFS name; (EFS's with the same name can coexist on different supporting file systems, but cannot coexist on the same FS.)\n\t* EFS storage type is not available (e.g. no SD card inserted and mounted)\n\t* Not enough space on supporting file system\n\t* Key does not exist\n\t* Creating EFS on encrypted SDCard\n\t* Invalid parm values, e.g. EFS size too big or too small or not an integer number\n\t* Unmatched mount point and EFS storage type\n\n* **Delete EFS**\n\t* Delete EFS Name - Provide the name of the EFS you wish to delete.\n\t* EFS Location - Select a location of where the EFS you wish to delete resides.\n\n\n## SD Card Operation\n###Encrypt SD Card\n* **Encrypt SDcard**\n\t* key to encrypt SDcard - Provide the name of the key to use to encrypt the sdcard.\n\n>Note: This process will format and encrypt the SDcard, therefor all `existing data on the SDCard will be lost`.\n\n>The process of encrypting the SDCard takes time. Access to the encrypted SDCard will be denied during the creation process. When encrypting an SDCard that was previously encrypted, the SDCard will be re-formated and re-encrypted, as a result, all existing data will be lost.\n\n**Creation of an Encrypted SDCard may fail for any of the following conditions**\n\n* SDCard is not inserted;\n* SDCard is not mounted (e.g. UMS is in use)\n* Key name is invalid.\n\n###Format SD Card\nThis profile feature will allow your application format an SDCard. \n\n>Note: When formating an encrypted SDCard, the result would be a formated **un-encrypted** SDCard.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=EncryptMgr&os=All&embed=true\"></iframe> \n\n\n"},{"key":"guide-profiles-gprs","name":" GPRS Manager Profile Feature Reference","md":"# GPRS Manager Profile Feature Reference\n\n## Overview\n\nThe GPRS feature allows you to add or remove APNs to your device. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Add or Update Named APN\n* Remove APN\n* Remove all APNs\n* Set Default APN\n* Set Accesses Point Name, User Name, and Password\n\n## APN Action\nThis setting allows you to manage the APN configuration on the device:\n\n* Add/replace APN\n* Remove existing named APN\n* Remove all existing APNs\n\n## GPRS Carrier \nOptions for GPRS carrier for the APN.\n\n* ATT\n* T-Mobile\n* Custom\n\n>Note: For ATT and T-Mobile option the user and password filed are required.\n\n## APN Name \nProvide the name that the APN should be set to. Used to identify the APN settings for deleting existing APN or adding/replacing. Must be unique on the device. \n\n## Replace if Exists \nThis check box provides the option to replace an existing APN.\n\n* Check Box is marked: Delete the APN for the device and set the new APN.\n* Check Box is not marked: Don't add new APN if already there is an APN with the same name.\n\n## Make Default APN \nThis check box provides the option to set the new APN to be Preferred.\n\n## Access Point \nProvide the access point name that the APN should be set to (ex: internet3.voicestream.com).\n\n## User Name\nProvide the user name that the APN should be set to.\n\n## Password\nProvide the password that the APN should be set to.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=GprsMgr&os=All&embed=true\"></iframe> \n\n\n"},{"key":"guide-profiles-keymap","name":" Key Mapping Manager Profile Feature Reference","md":"# Key Mapping Manager Profile Feature Reference\n\n## Overview\n\nThe Key Mapping Manager feature allows you to modify what behavior a given key will exhibit when pressed.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Default all key mappings\n* Remap a key\n\n## Default all key mappings\nBy default, all keys are mapped to a specific behavior. For instance, when the the letter \"A\" is pressed, a lowercase \"a\" will be sent. If the behavior of a key was modified via the **Remap a key** function, then **Default all key mappings** would reset all modified keys to their original behavior in all tables.\n\n>NOTE:  When adding a custom key map, you may want to **Default all key mappings** before applying your new key map. This would insure that your key mappings are the only ones that exist after your profile is applied.\n\n## Remap a key\nThe **Remap a key** function allows you to modify the behavior a key will exhibit when pressed.\n\n### Key Tables\nA **Key Table** is a list of behaviors a key will exhibit when pressed. The **Base** table is a list of behaviors a key will have when a modifier key is **not** pressed. All devices support the **Base** key table, while other key tables may only be supported on devices that have the modifier key for that key table. For instance the **Blue Table** is only supported on devices that have a blue key.  While remapping a key, you can set the behavior for that key in each table supported by the device.\n\n>NOTE: If a profile containing a modified table that is not supported by a given device, that profile will fail when submitted.\n\n**Modifiable key tables:**\n\n* Base - no modifier key was pressed\n* Blue - blue key was pressed before a key was pressed\n* Orange - orange key was pressed before a key was pressed\n* Grey - grey key was pressed before a key was pressed\n* Shift - shift key was pressed before a key was pressed\n* Control - control key was pressed before a key was pressed\n\n\n###Send key-code\n\nSelect this behavior to modify which key-code is sent when a key is pressed. A list of possible key-codes are listed below. When modifying a key-code to be sent, you may also choose to select the state of a modifier key. For instance, if you where to modify the \"A\" key to send a \"B\" key-code, and set the **SHIFT state** to **Forced ON**, the physical Shift keys state would be disregard and a capital \"B\" would be sent. Enable modifier keys by clicking the **Andvanced** checkbox under send key-code.\n\n\n###Send trigger\nSelect this behavior to allow a key to act as a trigger. You can configure the key to send one of eight trigger options.\n\n###Launch application\nSelect this behavior to allow a key to start a specified Application. Just enter the name of an application as it appears in that applications title bar, or as it appears in Settings > Apps.  This options differs from **Send intent**, where you would have to supply an apps pakage name and the class name of the activity you wish to launch.\n\n>NOTE: It is possible that multiple apps could be named the same. In that case the first app found with that name will be launched.\n\n###Send intent\nSelect this behavior to allow a key to send an [Intent](http://developer.android.com/reference/android/content/Intent.html).\n\n**Intent Options:**\n\n* **Send Intent** - Select when the Intent should be sent.\n  * On key down - When pressed\n  * On key up - When released\n  * On both key down and key up - Send twice, once when pressed, once when released\n* **Intent type**\n  * Start Activity - An Explicit Intent sent directly to one activity class\n  * Broadcast - An Implicit Intent, broadcasted to all applications. Only applications that have registered a broadcast reciver for this intent will receive it.\n* **Action** - Enter the action for the intent.\n* **Category** - Enter the category for the intent\n* **Package** - Enter the the package name for the intent - i.e. (com.mycompany)\n* **Class** - Enter the class name vor the intent - i.e.  fully qualified Activity name (com.mycompany.MyActivity)\n* **Data URI** - Enter the data URI for the intent. This must be a valid URI format.\n* **MIME type** - Enter the MIME type for the Intent\n* **Extra parameter name** - Enter an extra parameter name to be attached to the intent\n* **Extra parameter value** - Enter an extra parameter string value to be attached to teh intent\n* **Add key event** - Select whether the key event should be added to the intent\n* **Include additional flags** - Enter flag bits in hex that should be sent\n\n\n###Suppress key\nSelect this behavior to disable the selected key.\n\n>NOTE:  If a key is suppressed in the **Base Table** the key can still be used in other Tables. i.e. You can still send a Capital \"A\" when selecting \"Shift\" > \"A\".\n\n###Reset to default\nSelect this behavior to reset any custom key mapping for the selected key. After which, pressing the selected key, will send its default key.\n\n##Modifiable Keys\n\n* **0-9**\n* **A-Z**\n* **F1**\n* **F2**\n* **F3**\n* **F4**\n* **F5**\n* **F6**\n* **F7**\n* **F8**\n* **F9**\n* **F10**\n* **F11**\n* **F12**\n* **ENTER**\n* **UP**\n* **DOWN**\n* **LEFT**\n* **RIGHT**\n* **ESC**\n* **BACKSPACE**\n* **DOT** (Period)\n* **STAR**\n* **POUND**\n* **SPACE**\n* **RETURN**\n* **CLR** (Clear)\n* **FIELD_EXIT**\n* **ALT**\n* **CTRL** (Control)\n* **SHIFT**\n* **BLUE**\n* **ORANGE**\n* **GREEN** (Green Dot)\n* **RED** (Red Dot)\n* **VOLUMEUP** (Volume Up)\n* **VOLUMEDOWN** (Volume Down)\n* **SCAN**\n* **GRIP_TRIGGER**\n* **LEFT_TRIGGER_1** (Button L1)\n* **LEFT_TRIGGER_2** (Button L2)\n* **RIGHT_TRIGGER_1** (Button R1)\n* **HEADSET_HOOK** (Headset Button)\n* **BACK**\n* **HOME**\n* **MENU**\n* **SEARCH**\n* **KEYLIGHT** (Keyboard Backlight)\n* **LAMP** (Display Backlight)\n\n##Key-Codes\n\n* **0-9**\n* **A-Z**\n* **Enter**\n* **Tab**\n* **Space**\n* **Escape**\n* **Delete**\n* **F1**\n* **F2**\n* **F3**\n* **F4**\n* **F5**\n* **F6**\n* **F7**\n* **F8**\n* **F9**\n* **F10**\n* **F11**\n* **F12**\n* **NUMPAD 0**\n* **NUMPAD 1**\n* **NUMPAD 2**\n* **NUMPAD 3**\n* **NUMPAD 4**\n* **NUMPAD 5**\n* **NUMPAD 6**\n* **NUMPAD 7**\n* **NUMPAD 8**\n* **NUMPAD 9**\n* **NUMPAD Divide**\n* **NUMPAD Multiply**\n* **NUMPAD Subtract**\n* **NUMPAD Add**\n* **NUMPAD Period**\n* **NUMPAD Comma**\n* **NUMPAD Enter**\n* **NUMPAD Equals**\n* **NUMPAD Left Parenthesis**\n* **NUMPAD Right Parenthesis**\n* **DPAD Up**\n* **DPAD Down**\n* **DPAD Left**\n* **DPAD Right**\n* **DPAD Center**\n* **Move Home**\n* **Move End**\n* **Page Up**\n* **Page Down**\n* **Insert**\n* **Forward Delete**\n* **Blue**\n* **Orange**\n* **Grey**\n* **Alt**\n* **Control**\n* **Shift**\n* **Left Shift**\n* **Right Shift**\n* **Left Alt**\n* **Right Alt**\n* **Left Control**\n* **Right Control**\n* **Meta Left**\n* **Meta Right**\n* **Caps Lock**\n* **Num Lock**\n* **Scroll Lock**\n* **SysRq**\n* **Break**\n* **Function**\n* **Plus**\n* **Minus**\n* **Equals**\n* **Left Bracket**\n* **Right Bracket**\n* **Grave**\n* **Slash**\n* **Backslash**\n* **Semicolon**\n* **Apostrophe**\n* **Comma**\n* **Period**\n* **Star**\n* **Pound**\n* **At**\n* **Back**\n* **Forward**\n* **Home**\n* **Menu**\n* **Calculator**\n* **Explorer**\n* **Envelope**\n* **Bookmark**\n* **Music**\n* **Call**\n* **Camera**\n* **Search**\n* **Contacts**\n* **Calendar**\n* **Volume Up**\n* **Volume Down**\n* **Volume Mute**\n* **Brightness Up**\n* **Brightness Down**\n* **Power**\n* **Sleep**\n* **Wakeup**\n* **Headset**\n* **Push-to-talk**\n* **Notification**\n* **Camera Focus**\n* **Media Play/Pause**\n* **Media Stop**\n* **Media Next**\n* **Media Previous**\n* **Media Rewind**\n* **Media Fast-Forward**\n* **Media Play**\n* **Media Pause**\n* **Media Close**\n* **Media Eject**\n* **Media Record**\n* **Button L1**\n* **Button R1**\n* **Button L2**\n* **Button R2**\n* **Button A**\n* **Button B**\n* **Button C**\n* **Button X**\n* **Button Y**\n* **Button Z**\n* **Left Thumb Button**\n* **Right Thumb Button**\n* **Start Button**\n* **Select Button**\n* **Mode Button**\n* **Gamepad Button 1**\n* **Gamepad Button 2**\n* **Gamepad Button 3**\n* **Gamepad Button 4**\n* **Gamepad Button 5**\n* **Gamepad Button 6**\n* **Gamepad Button 7**\n* **Gamepad Button 8**\n* **Gamepad Button 9**\n* **Gamepad Button 10**\n* **Gamepad Button 11**\n* **Gamepad Button 12**\n* **Gamepad Button 13**\n* **Gamepad Button 14**\n* **Gamepad Button 15**\n* **Gamepad Button 16**\n* **Zenkaku/Hankaku**\n* **Eisu**\n* **Muhenkan**\n* **Henkan**\n* **Katakana/Hiragana**\n* **Yen**\n* **Ro**\n* **Kana**\n* **Switch Charset**\n* **Picture Symbols**\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=KeyMapMgr&os=All&embed=true\"></iframe>\n"},{"key":"guide-profiles-persistence","name":" Persistence Manager Profile Feature Reference","md":"# Persistence Manager Profile Feature Reference\n\n## Overview\n\nThe Persist Manager is used to create and remove persistent profile features. These features and their parameters will survive and be automatically applied after a 'Enterprise Reset'. \n\n>Note:  \n>Data Capture Manager profile features will not be persisted.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Configure Dealt Device Settings After an Enterprise Reset\n* Add a Persistent Settings Profile\n* Remove a Persistent Settings Profile\n* Enable a Persistent Settings Profile\n* Disable a Persistent Settings Profile\n* Set if XML should Persist if Error\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Make Current XML Persistent\nThis will make the specified Profile features persistent. The combination of Name, Version and Order will be used to 'identify' the profile set to be persisted. The same combination must be used when trying to remove the features from being persisted.\n\n* Persist as Name - This name is used to identify the profile features that will be persisted, so that you can reference it for removal from the persist list.\n\t* Generic/Absolute - can be used to further clarify the name/scenario\n\t* Staging-Specific/Relative - can be used to further clarify the name/scenario\n* Persist as Version - Provide the version of the profile features that will be persisted, so that you can reference it for removal from the persist list.\n* Persist as Order - Provide the optional order in which the profile features with the specified name will be persisted.\n* Persist if Error - Specifies whether the profile features will be persisted if any errors occur.\n\n\n## Remove Persistent XML\nThis will remove the specified profile features from being persistent. The combination of the Name, Version and Order features must match a previously persisted profile with those same features.\n\n* Persist as Name - This name is used to identify the persisted profile setting to remove\n\t* Generic/Absolute \n\t* Staging-Specific/Relative \n* Persist as Version - The version of the persisted profile setting to be removed\n* Persist as Order - The optional order of the persisted profile setting to be removed\n\n## Enable the specified persistent profile\nIt will enable the persistent profile that you specify with the help of supply details about a specific persist action to be performed.\n\n## Disable the specified persistent profile\nIt will disable the specified persistent profile with the help of supply details about a specific persist action to be performed.\n\n## Usage Notes\n###Using PersistsManager on TC55 after performing a FactoryReset\nThe following issue is limited to the TC55 only: \n \nDuring the installation on the TC55, the EMDK Device Runtime package creates the \"enterprise/usr/persist/\" folder required for the PersistManager feature to function.  If a factory reset is done after installing the EMDK Device Runtime, this folder will get deleted and the PersistManager will no longer work. \n \nThis problem can be fixed by reinstalling the EMDK Device Runtime Package on the TC55.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=PersistMgr&os=All&embed=true\"></iframe> \n\n"},{"key":"guide-profiles-power","name":" Power Manager Profile Feature Reference","md":"# Power Manager Profile Feature Reference\n\n\n## Overview\n\nThis feature allows you to put the device into Sleep mode, re-power or perform an OS Update. The action will be performed when the configuration is set.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Put the Device to Sleep\n* Reboot the Device\n* Enterprise Reset a Device\n* Factory Reset a Device\n* Wipe a Device\n* Update the OS\n\n\n## Do Nothing\nWill not perform any action\n\n## Sleep Mode\nWill put the device into Sleep mode.\n\n## Reboot\nWill reboot or re-power the device.\n\n## Enterprise Reset\nWill perform an Enterprise Reset.\n\n> Note: This feature is supported on devices that are running KitKat versions of Android like the TC70.\n\n## Factory Reset\nWill perform a Factory Reset.\n\n> Note: This feature is supported on devices that are running KitKat versions of Android like the TC70.\n\n## Full Device Wipe\nWill perform a full device wipe.\n\n> Note: This feature is supported on devices that are running KitKat versions of Android like the TC70.\n\n## OS Update\nWill initiate an OS Update using the provided OS Update Zip File\n\n* OS Update Zip File - The full path to the OS Update Zip File that resides on the device\n\n> Note: The OS Update file should already exist on the device. When using this feature on the TC55 the update package must be placed on the external SD card. Any attempt to use the internal SD card for this purpose will fail.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=PowerMgr&os=All&embed=true\"></iframe> \n\n\n"},{"key":"guide-profiles-powerkey","name":" PowerKey Manager Profile Feature Reference","md":"# PowerKey Manager Profile Feature Reference\n\n\n## Overview\n\nThe PowerKey Manager feature allows your application to control which options appear on the power menu on the device.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Show/Hide Airplane Mode Power Menu Option\n* Show/Hide Touch Panel Power Menu Option\n* Show/Hide Safe Mode Power Menu Option\n* Enable/Disable Auto Screen Lock when Device is Powered off using the Power Key\n\n> The Power menu is displayed by holding down the power button on a device\n\n##Airplane Mode\nThis profile feature will allow your application to control the visibility of the Airplane Mode option in the Power Key Menu\n\n##Touch Panel\nThis profile feature will allow your application to control the visibility of the Touch Panel option in the Power Key Menu.\n\n##Safe Mode\nThis profile feature will allow your application to control the visibility of the Safe Mode option in the Power Key Menu.\n\n##Auto Screen Lock on Power Key Option\nThis profile feature will allow your application to control the visibility of the Auto Screen Lock option in the settings menu.\n\n##Auto Screen Lock on Power Key State\nThis profile feature will allow your application to control the visibility of the Auto Screen Lock option in the Power Key Menu( Menu that appears when power button is long pressed).\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=PowerKeyMgr&os=All&embed=true\"></iframe> "},{"key":"guide-profiles-profileactivity","name":" Activity Selection Profile Feature Reference","md":"# Activity Selection Profile Feature Reference\n\n## Overview\n\nWhen creating a profile for [Barcode](#guide-profiles-profilebarcode) or [MSR](#guide-profiles-profilemsr) data capture you can configure an Activity Selector to automate the process of activating and deactivating the profile. This allows for automated profile management of complex applications. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n##Activity Selector\n\n* Applications - List of applications this profile may be active during. \n\t* Applications names are the formal package definition of the application. For example \"com.symbol.profiledatacapturesample1\". \n* Activities -  List of activities within the selected application that a profile should be active for. \n\t*  For Example \"MainActivity\"."},{"key":"guide-profiles-profilebarcode","name":" Barcode Profile Feature Reference","md":"# Barcode Profile Feature Reference\n\n## Overview\nIn order to get Barcode data in your application, you must create a profile with two profile features selected:\n\n* Barcode\n* [Keystroke](#guide-profiles-profilekeystroke),[Intent](#guide-profiles-profileintent),[IP](#guide-profiles-profileIP) (Output)\n\nThe `Barcode` feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera. It also contains detailed parameters for scanner behavior as well as individual barcode symbology parameters.\n\nThe `Intent`, `Keystroke` or `IP` feature in the Profile Manager is used to define how the output from the Barcode scanner should be handled\n\n* Intent - The Intent feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application using the Android Intent mechanism. To use this, you should be familiar with how to register to receive intents in your application as well as handling the data that is passed in. You will have the ability to configure how the intent is sent to your application in the profile itself.\n\n* Keystroke - The Keystroke feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application by emulating keystrokes. You will have the option to control how the data is sent as well as if it should have any prefix or suffix automatically added using basic data formatting.\n\n* IP - IP Output allows DataWedge to send captured data to a host computer via a network connection. Captured data can be sent over an IP network to a specified IP address and port using either TCP or UDP transport protocols.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Enabled\nEnables or disables this feature. Default is enabled.\n\n## Scanner Selection\nConfigures which scanning device to use for data capture.\n\n* Auto - Automatically determines the best scanning device. If a Scan Module or Scan/MSR Module is installed on the MC40, then the 2D imager is selected. Otherwise the camera is selected.\n* Camera Scanner - Scanning is performed with the rear-facing camera.\n* 2D Imager - Scanning is performed using the installed Scan or Scan/MSR module.\n\n## Decoders\nConfigures which bar code decoders are enabled or disabled. For best performance disable all unnecessary decoders. By default the most commonly used decoders are enabled (shown below with an asterisk). The supported decoders are:\n\n* Australian Postal\n* Aztec\n* Canadian Postal\n* Chinese 2 of 5\n* Codabar*\n* Code 11\n* Code 39*\n* Code 93\n* Code 128*\n* Composite AB\n* Composite C\n* Datamatrix*\n* Discrete 2 of 5\n* Dutch Postal\n* EAN-8*\n* EAN-13*\n* GS1 DataBar*\n* GS1 DataBar Expanded*\n* GS1 DataBar Limited\n* HAN XIN\n* Japanese Postal\n* Korean 3 of 5\n* Interleaved 2 of 5\n* Matrix 2 of 5\n* Maxicode*\n* MAIL MARK\n* MicroPDF\n* MicroQR\n* MSI\n* PDF417*\n* QR Code*\n* Signature\n* TLC 39\n* Trioptic 39\n* UK Postal\n* UPC-A*\n* UPC-E0*\n* UPC-E1\n* US4State\n* US4state FICS\n* USPostnet\n* USPlanet\n* Webcode\n\n## UPCA\n* Report Check Digit - The check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option.\n* Preamble - Preamble characters are part of the UPC symbol consisting of Country Code and System Character. There are three options for transmitting a UPCA preamble:\n\t* Preamble None - Transmit no preamble.\n\t* Preamble Sys Char - Transmit System Character only (default).\n\t* Preamble Country and Sys Char - Transmit System Character and Country Code (\"0\" for USA). Select the appropriate option to match the host system.\n\n## UPCE0\n* Report Check Digit - The check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option.\n* Preamble - Preamble characters are part of the UPC symbol consisting of Country Code and System Character. There are three options for transmitting a UPCE0 preamble:\n\t* Preamble Sys Char - Transmit System Character only.\n\t* Preamble Country and Sys Char - Transmit System Character and Country Code (\"0\" for USA).\n\t* Preamble None - Transmit no preamble (default). Select the appropriate option to match the host system.\n* Convert UPCE0 To UPCA - Enable to convert UPCE0 (zero suppressed) decoded data to UPC-A format before transmission. After conversion, the data follows UPC-A format and is affected by UPC-A programming selections. Disable to transmit UPCE0 decoded data as UPCE0 data, without conversion (default - disabled).\n\n## Code128\n* Length1 - Use to set decode lengths (default - 0).\n* Length2 - Use to set decode lengths (default - 55).\n* Redundancy - Sets the reader to read the bar code twice before accepting data.\n* Enable Plain Code 128 - Flag to enable other 128 sub types (besides GS1-128 and ISBT-128).\n* Enable GS1-128 - Set the GS1 128 subtype.\n* Enable ISBT128 - Set the ISBT128 subtype.\n* ISBT128 Concatenation Mode - Select an option for concatenating pairs of ISBT code types:\n\t* Concat Mode Never - Do not concatenate pairs of ISBT codes encountered (default).\n\t* Concat Mode Always - There must be two ISBT codes in order to decode and perform concatenation. Does not decode single ISBT symbols.\n\t* Concat Mode Auto - Decodes and concatenates pairs of ISBT codes immediately. If only a single ISBT symbol is present, the device must decode the symbol the number of times set via Redundancy - Code128 before transmitting its data to confirm that there is no additional ISBT symbol.\n* Check ISBT Table - The ISBT specification includes a table that lists several types of ISBT bar codes that are commonly used in pairs. If ISBT128 Concat Mode is set, enable Check ISBT Table to concatenate only those pairs found in this table. Other types of ISBT codes are not concatenated.\n* Security Level - The scanner offers four levels of decode security for Code 128 bar codes. Select increasing levels of security for decreasing levels of bar code quality. There is an inverse relationship between security and scanner aggressiveness, so choose only that level of security necessary for any given application.\n\t* Security Level 0 - This setting allows the scanner to operate in its most aggressive state, while providing sufficient security in decoding most \"in-spec\" bar codes.\n\t* Security Level 1 - This setting eliminates most misdecodes.\n\t* Security Level 2 - Select this option if Security level 1 fails to eliminate misdecodes.\n\t* Security Level 3 - If Security Level 2 is selected and misdecodes still occur, select this security level. Be advised, selecting this option is an extreme measure against mis-decoding severely out of spec bar codes. Selecting this level of security significantly impairs the decoding ability of the scanner. If this level of security is needed, try to improve the quality of the bar codes.\n* Code128 Reduced Quiet Zone - \tCode128 Reduced Quiet Zone\n* Ignore Code128 FNC4 - Ignore Code128 FNC4\n\n\n## Code39\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths 4.\n* Verify Check Digit - Enable this feature to check the integrity of all Code 39 symbols to verify that the data complies with a specified check digit algorithm. The digital scanner decodes only those Code 39 symbols that include a modulo 43 check digit. Enable this feature only if the Code 39 symbols contain a modulo 43 check digit (default - disabled).\n* Report Check Digit - Transmit Code 39 data with or without the check digit.\n* Full ASCII - Code 39 Full ASCII is a variant of Code 39 that pairs characters to encode the full ASCII character set. To enable or disable Code 39 Full ASCII,\n* Redundancy - Sets the reader to read the bar code twice before accepting data.\n* Convert Code39 To Code32 - Code 32 is a variant of Code 39 used by the Italian pharmaceutical industry. Scan the appropriate bar code below to enable or disable converting Code 39 to Code 32.\n* Report Code32 Prefix - Scan the appropriate bar code to enable or disable adding the prefix character \"A\" to all Code 32 bar codes.\n* Security Level - Options: Security level 0, Security Level 1, Security Level 2 and Security Level 3.\n* Code39 Reduced Quite Zone - Code39 Reduced Quiet Zone\n\n## Interleaved 2of5\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data.\n* Check Digit\n\t* No Check Digit - A check digit is not used.\n\t* USS Check Digit - Select to check the integrity of all Interleaved 2 of 5 symbols to verify the data complies with either the Uniform Symbology Specification (USS) check digit algorithm.\n\t* OPCC Check Digit - Select to check the integrity of all Interleaved 2 of 5 symbols to verify the data complies with either the Optical Product Code Council (OPCC) check digit algorithm.\n* Report Check Digit - Transmit Interleaved 2 of 5 data with or without the check digit.\n* Convert ITF-14 To EAN13 - Convert 14-character Interleaved 2 of 5 bar codes to EAN-13, and transmit as EAN-13. The Interleaved 2 of 5 bar code must be enabled and must have a leading zero and a valid EAN-13 check digit.\n* Security Level - The scanner offers four levels of decode security. Select increasing levels of security for decreasing levels of barcode quality.\n* I2of5 Reduced Quiet Zone - I2of5 Reduced Quiet Zone\n\n##GS1 Data Bar Limited\n* Security Level - The scanner offers four levels of decode security. Select increasing levels of security for decreasing levels of barcode quality.\n\n\n## Composite AB\n* UCC Link Mode\n\t* Link Flag ignored - 1D component is transmitted regardless of whether a 2D component is detected.\n\t* Always Linked - 1D and the 2D components are transmitted. If 2D is not present, the 1D component is not transmitted.\n\t* Auto Discriminate - the digital scanner determines if there is a 2D portion, then transmits the 1D component, as well as the 2D portion if present. (default).\n\n## US Postnet\n* Report Check Digit - Transmits US Postnet data with or without the check digit\n\n## US Planet\n* Report Check Digit - Transmits US Planet data with or without the check digit\n\n## UK Postal\n* Report Check Digit - Transmit UK Postal data with or without the check digit\n\n## Codabar\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data.\n* CLSI Editing - Enable this parameter to strip the start and stop characters and insert a space after the first, fifth, and tenth characters of a 14-character Codabar symbol. Enable this feature if the host system requires this data format.\n* NOTIS Editing - Enable this parameter to strip the start and stop characters from a decoded Codabar symbol. Enable this feature if the host system requires this data format.\n\n## MSI\n* Length 1 - Use to set decode lengths.\n* Length 2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data.\n* Check Digit - With MSI symbols, one check digit is mandatory and always verified by the reader. The second check digit is optional.\n\t* One Check Digit - Verify one check digit.\n\t* Two Check Digits - Verify two check digits.\n* Check Digit Scheme - Two algorithms are possible for the verification of the second MSI check digit.\nSelect the algorithm used to encode the check digit.\n\t* Mod-11-10 - First check digit is MOD 11 and second check digit is MOD 10.\n\t* Mod-10-10 - Both check digits are MOD 10.\n* Report Check Digit - Transmit MSI data with or without the check digit.\n\n## Code93\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data.\n\n## Discrete 2 of 5\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data.\n\n## Code11\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data.\n* Verify Check Digit - Check the integrity of all Code 11 symbols to verify that the data complies with the specified check digit algorithm. This selects the check digit mechanism for the decoded Code 11 bar code.\n\t* No Check Digit - Do not verify check digit.\n\t* 1 Check Digit - Bar code contains one check digit.\n\t* 2 Check Digits - bar code contains two check digits.\n* Report Check DIgit - Transmit Code 11 data with or without the check digit.\n\n## HAN XIN\n* HAN XIN Inverse - HAN XIN Inverse\n\n##Matrix 2 of 5\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data.\n* Report Check Digit - Transmit Matrix 2 of 5 data with or without the check digit.\n* Verify Check Digit - Enable this feature to check the integrity of all Matrix 2 of 5 symbols to verify that the data complies with a specified check digit algorithm.\n\n## UPCE1\n* Report Check Digit - The check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option.\n* Preamble - Preamble characters are part of the UPC symbol consisting of Country Code and System Character. There are three options for transmitting a UPCE1 preamble:\n\t* Preamble Sys Char - Transmit System Character only.\n\t* Preamble Country and Sys Char - Transmit System Character and Country Code (\"0\" for USA).\n\t* Preamble None - Transmit no preamble (default). Select the appropriate option to match the host system.\n* Convert UPCE1 To UPCA - Enable this to convert UPCE1 decoded data to UPC-A format before transmission. After conversion, the data follows UPC-A format and is affected by UPC-A programming selections. Disable this to transmit UPCE1 decoded data as UPCE1 data, without conversion.\n\n## Decode Lengths\nThe allowable decode lengths are specified by options Length1 and Length2 as follows:\n\n* Variable length: Decode symbols containing any number of characters.\n\t* Set both Length1 and Length2 to 0.\n* Range: Decode a symbol with a specific length range (from a to b, including a and b).\n\t* Set Length1 to a and set Length2 to b.\n* Two Discrete Lengths: Decode only symbols containing either of two selected lengths.\n\t* Set either Length1 or Length2 to the specific lengths.\n* One Discrete Length: Decode only symbols containing a specific length.\n\t* Set both Length1 and Length2 to the specific length.\n\n## UPC EAN Params\nAllows the configuration of the parameters that apply to more than one UPC or EAN decoder.\n\n* Security Level - The scanner offers four levels of decode security for UPC/EAN bar codes. Select higher security levels for lower quality bar codes. There is an inverse relationship between security and decode speed, so be sure to choose only that level of security necessary for the application.\n\t* Level 0 - This default setting allows the scanner to operate fastest, while providing sufficient security in decoding \"in-spec\" UPC/EAN bar codes.\n\t* Level 1 - As bar code quality levels diminish, certain characters become prone to misdecodes before others (i.e., 1, 2, 7, 8). If the scanner is misdecoding poorly printed bar codes, and the misdecodes are limited to these characters, select this security level.\n\t* Level 2 - If the scanner is misdecoding poorly printed bar codes, and the misdecodes are not limited to characters 1, 2, 7, and 8, select this security level.\n\t* Level 3 - If the scanner is still misdecoding, select this security level. Be advised, selecting this option is an extreme measure against misdecoding severely out of spec bar codes. Selecting this level of security can significantly impair the decoding ability of the scanner. If this level of security is necessary, try to improve the quality of the bar codes.\n* Supplemental2 - Enables or disables this option.\n* Supplemental5 - Enables or disables this option.\n* Supplemental Mode\n\t* No Supplementals - the scanner is presented with a UPC/EAN plus supplemental symbol, the\n\tscanner decodes UPC/EAN and ignores the supplemental characters.\n\t* Supplemental Always - the scanner only decodes UPC/EAN symbols with supplemental characters, and ignores symbols without supplementals.\n\t* Supplements Auto - the scanner decodes UPC/EAN symbols with supplemental characters immediately. If the symbol does not have a supplemental, the scanner must decode the bar code the number of times set via UPC/EAN Supplemental Redundancy before transmitting its data to confirm that there is no supplemental.\n\t* Supplemental Smart - Enables smart supplementals. In this mode the decoder returns the decoded value of the main block right away if it does not belong to one of the following supplemental types: 378, 379, 977, 978, 979, 414, 419, 434 or 439. If the bar code starts with one of the prefixes it searches the image more aggressively for a supplemental. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\t* Supplemental 378-379 - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 378 or 379. Disables reading of supplementals for any other UPC/EAN bar code not starting with 378 or 379. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\t* Supplemental 978-979 - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 978 or 979. Disables reading of supplementals for another UPC/EAN bar code not starting with 978 or 979. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main barcode is returned.\n\t* Supplemental 414-419-434-439 - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 414, 419, 434 or 439. Disables reading of supplementals for another UPC/EAN bar code not starting with 414, 419, 434 or 439. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\t* Supplemental 977 - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 977. Disables reading of supplementals for another UPC/EAN barcode not starting with 977. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n* Retry Count - Retry count for auto-discriminating for supplementals. Possible values are 2 to 20 inclusive. Note that this flag is only considered if Supplemental Mode - UPC EAN is set to one of the following values: Supplementals Auto, Supplementals Smart, Supplementals 378-379, Supplementals 978-979, Supplementals 977 or Supplementals 414-419-434-439 (2 to 20).\n* Random Weight Check Digit - Enable random weight check digit verification.\n* Bookland - Enable or disable this option.\n* Coupon - Enables Coupon code decoding. Note that in order to successfully decode Coupon codes, all\nof the correct decoders must be enabled.\n* Coupon Report Mode - Enables one of the coupon report modes\n\t* Old Coupon Report Mode\n\t* New Coupon Report Mode\n\t* Both Coupon Report Mode\n* EAN Zero Extend - Enable this parameter to add five leading zeros to decoded EAN-8 symbols to make them compatible in format to EAN-13 symbols. Disable this to transmit EAN-8 symbols as is.\n\n* Bookland Format - if Bookland option is enabled, select on of the formats for Bookland data\n\t* Format ISBN-10\n\t* Format ISBN-13\n\n* Convert DataBar To UPC EAN - If this is set it converts DataBar bar codes to UPC/EAN format. For this setting to work UPC/EAN symbologies must be enabled.\n* UPC Reduced Quiet Zone - Enable decoding of marginless UPC barcodes\n\n## Reader Params\nAllows the configuration of parameters specific to the selected bar code reader.\n\n* Beam Timer - Sets the maximum amount of time that the reader remains on (0 - 60,000 ms in increments of 100 ms). A value of 0 sets the reader to stay on indefinitely.\n* Adaptive Scanning - Enable/Disable Adaptive Scanning\n* Beam Width - Set Beam Width\n\t* Narrow\n\t* Normal\n\t* Wide\n* Power Mode - Set scanner power mode\n\t* Low Power Mode\n\t* Optimized Power Mode\n\t* High Power Mode\n\t* Always On\n* Mobile Phone Display Mode - Defines finer reader by the DS457\n\t* Disable Mobile Display Mode\n\t* Enable Mobile Display Mode\n* Reader Mode - Defines how the SSI scanner triggers\n\t* Presentation Mode\n\t* Triggered Mode\n* Linear Security Level - Sets the number of times a bar code is read to confirm an accurate decode.\n\t* Security Redundancy and Length - Two times read redundancy based on redundancy flags and\n\tcode length.\n\t* Security Short or Codabar - Two times read redundancy if short bar code or Codabar.\n\t* Security All Twice - Two times read redundancy for all bar codes.\n\t* Security Long and Short - Two times read redundancy for long bar codes, three times for short bar codes.\n\t* Security All Thrice - Three times read redundancy for all bar codes.\n* Picklist - Allows the imager to decode only the bar code that is directly under the cross-hair/reticle (+) part of the pattern. This feature is useful in applications where multiple bar codes may appear in the field of view during a decode session and only one of them is targeted for decode.\n\t* Disable - Disables Picklist mode. Any bar code within the field of view can be decoded.\n\t* Centered - Enables the Picklist mode so that only the bar code in the center of the image is decoded. This is most useful when used in conjunction with the static and dynamic reticle viewfinder modes. Note: This mode is only valid for decoder modules that supports a viewfinder. If one tries to set this for a unsupported decoder then the device would issue an error. (Camera scanner only).\n\t* Reticle - Enables the Picklist mode so that only the bar code that is directly under the cross-hair (reticle) is decoded. This is useful when used in conjunction with the static and dynamic reticle viewfinder modes. (Scan Module Only)\n* Aim Type - Type Trigger Modes\n\t* Trigger\n\t* Continuous Read\n* Same Symbol Timeout - Suppress decoding same symbol within this time interval in Continuous Trigger Mode. From 0 to 5000, Steps of 500. Eg: 0, 500, 1000, 1500...\n* Different Symbol Timeout - Suppress decoding another symbol within this time interval in Continuous Trigger Mode. From 0 to 5000, Steps of 500. Eg: 0, 500, 1000, 1500...\n* Illumination mode - Enable/Disable illumination depending on ambient light conditions\n* LCD Mode - Enables or disables LCD mode. LCD mode enhances the ability of the imager to read bar codes from LCD displays such as cellphones (Scan Module Only).\n\t* Disable - Disables the LCD mode.\n\t* Enable - Enables LCD mode.\n\n\tNOTE When using the LCD mode, a degradation in performance may be observed and the aiming crosshair may blink until the bar code is decoded.\n* Time Delay to Low Power - Time delay for scanner to enter low power mode\n\t* 1 Second\n\t* 30 Seconds\n\t* 1 Minute\n\t* 5 Minutes\n* Illumination Brightness Value - Illumination Brightness of the Imager\n* Inverse 1D Mode - This parameter allows the user to select decoding on inverse 1D bar codes.\n\t* Disable - Disables decoding of inverse 1D bar codes.\n\t* Enable - Enables decoding of only inverse 1D bar codes.\n\t* Auto - Allows decoding of both positive and inverse 1D bar codes.\n* Poor Quality Decode Effort\n\t* Level 0\n\t* Level 1\n\t* Level 2\n\t* Level 3\n\n* Viewfinder Mode - Configures the Viewfinder modes supported for camera scanning.\n\t* Viewfinder Enabled - Enables only the viewfinder.\n\t* Static Reticle - Enables the viewfinder and a red reticle in the center of the screen which helps selecting the bar code.\n\n## Scan Params\nAllows the configuration of Code Id and decode feedback options.\n\n* Code ID Type - A Code ID character identifies the code type of a scanned bar code. This is useful when the reader is decoding more than one code type. Select a code ID character to insert between the prefix and the decoded symbol.\n\t* Code ID Type None - No prefix (default).\n\t* Code ID Type Aim - A standards based three character prefix.\n\t* Code ID Type Symbol - A Symbol defined single character prefix.\n\n\tNOTE Not all ringtones are fully supported as decode tones. Ringtones of longer length may be truncated when used as a decode tone. The recommendation is to test the selected tone for operation before deployment to a customer site.\n* Volume Type\n\t* Ringer\n\t* Music and Media\n\t* Alarms\n\t* Notification\n* Decode Audio Feedback - Select an audio tone to sound upon a good decode.\n\t* The audio tones stored as Application’s private data (i.e. cache, asset) should not be specified for this field to avoid access violation. Therefore any audio tones meant for this purpose must be stored under shared public directories (Music/ , Ringtones/) or shared “external storage”.\n* Decode Haptic Feedback - Enable the MC40 to vibrate upon a good decode.\n* BT Disconnect On Exit - Enable/Disable Bluetooth disconnect on exit.\n* Connection Idle Time - If a bluetooth scanner associated application is opened, Bluetooth scanner will be automatically disconnected after this Connection Time duration of inactivity. From 60 to 1800, Steps of 5. Eg: 60, 65, 70, 75...\n* Decode Feedback LED Timer - Time for which Good Decode LED Notification Runs\n* Display BT Address Barcode - If this value is set to true, the Bluetooth Pairing Utility Application will be opened when the enable method is called\n* Decoding LED Notification - Time for which Good Decode LED Notification Runs\n* Engine Decode LED - Controls Engines' decode LED behavior\n\t* Disabled\n\t* Off on power down\n\t* Power down only after LED off\n\n\n\n## Output Data\nIn order for your application to receive the barcode data, you must specify one or more Output features. Please  refer to their reference documentation for more information.\n\n* [Intent](#guide-profiles-profileintent)\n* [Keystroke](#guide-profiles-profilekeystroke)\n* [IP](#guide-profiles-profileIP)\n"},{"key":"guide-profiles-profileintent","name":" Intent Profile Feature Reference","md":"# Intent Profile Feature Reference\n\n## Overview\nIn order to get Barcode or MSR data in your application, you must create a profile that has both an Input feature and an Output feature:\n\n* [Barcode](#guide-profiles-profilebarcode) / [MSR](#guide-profiles-profilemsr) (Input)\n* [Keystroke](#guide-profiles-profilekeystroke),[Intent](#guide-profiles-profileintent),[IP](#guide-profiles-profileIP) (Output)\n\nThe `Barcode` feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera. It also contains detailed parameters for scanner behavior as well as individual barcode symbology parameters.\n\nThe `Intent`, `Keystroke` or `IP` feature in the Profile Manager is used to define how the output from the Barcode scanner should be handled\n\n* Intent - The Intent feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application using the Android Intent mechanism. To use this, you should be familiar with how to register to receive intents in your application as well as handling the data that is passed in. You will have the ability to configure how the intent is sent to your application in the profile itself.\n\n* Keystroke - The Keystroke feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application by emulating keystrokes. You will have the option to control how the data is sent as well as if it should have any prefix or suffix automatically added using basic data formatting.\n\n* IP - IP Output allows DataWedge to send captured data to a host computer via a network connection. Captured data can be sent over an IP network to a specified IP address and port using either TCP or UDP transport protocols.\n\n## Android Intent Overview\nThe core components of an Android application (its activities, services, and broadcast receivers) are activated by intents. An intent is a bundle of information (an Intent object) describing a desired action - including the data to be acted upon, the category of component that should perform the action, and other pertinent instructions. Android locates an appropriate component to respond to the intent, launches a new instance of the component if one is needed, and passes it the Intent object.\n\nComponents advertise their capabilities, the kinds of intents they can respond to, through intent filters. Since the system must learn which intents a component can handle before it launches the component, intent filters are specified in the manifest as &lt;intent-filter&gt; elements. A component may have any number of filters, each one describing a different capability.\n\nFor example, if the application manifest contains the following:\n\n\t:::xml\n\t<intent-filter . . . >  \n  \t\t<action android:name=\"com.symbol.emdksample.RECVR\" />  \n  \t\t<category android:name=\"android.intent.category.DEFAULT\" />  \n\t</intent-filter>\n\nIn the Intent Feature Profile configuration, the Intent action must be: \n\n\t:::java\n\tcom.symbol.emdksample.RECVR\n\nand the Intent category must be: \n\n\t:::java\n\tandroid.intent.category.DEFAULT\n\n\n## EMDK Intent Output\nAllows configuration of the Intent Feature for the profile. The Intent Output Feature allows the captured data to be sent to an application in the form of an implicit Intent. Refer to the Android Developer web site for more information, http://developer.android.com.\n\n* Name - The name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n* Enabled - Enables or disables this feature. \n* Intent action - Enter the Intent Action name (required). The Intent Filter action must match this.\n* Intent category - Enter the Intent Category name (required). The Intent Filter category must match this.\n* Intent delivery - Select the method by which the intent is delivered:\n\t* Send via StartActivity\n\t* Send via startService\n\t* Broadcast intent\n\n> Note: Most scanning applications might want the user to be able to decode data and for that decode data to be sent to the *current* activity but not necessarily displayed. If this is the case, then the activity needs to be marked as ‘singleTop’ in its AndroidManifest.xml file. If your activity is not defined as singleTop, then on every decode, the system will create another copy of your Activity and send the decode data to this second copy.\n\n\n## Basic Data Formatting\nAllows configuration of any data formatting. When disabled, any data is passed on without modification.\n\n* Enabled - Enables or disables Basic Data Formatting. \n* Prefix to data - Add characters to the beginning of the data when sent.\n* Suffix to data - Add characters to the end of the data when sent.\n* Send data - Set to transfer the captured data to the foreground application. Disabling this option prevents the actual data from being transmitted. However, the prefix and suffix strings, if present, are still transmitted even when this option is disabled (default - enabled).\n* Send as hex - Set to send the data in hexadecimal format. \n* Send TAB key - Set to append a tab character to the end of the processed data. \n* Send ENTER key - Set to append an Enter character to the end of the processed data. \n\n## EMDK Intent Return Parameters\nThe decode related data added to the Intent's bundle can be retrieved using the Intent.getStringtExtra() and Intent.getSerializableExtra() calls, using the following String tags:\n\n* `com.motorolasolutions.emdk.datawedge.label_type`: String contains the label type of the bar code.\n* `com.motorolasolutions.emdk.datawedge.data_string`:\nString contains the output data as a String. In the case of concatenated bar codes, the decode data is concatenated and sent out as a single string. In the case of MSR output, the data from the MSR tracks is concatenated and sent out as a single string.\n* `com.motorolasolutions.emdk.datawedge.decode_data`:\nDecode data is returned as a list of byte arrays. In most cases there will be one byte array per decode. For barcode symbologies that support concatenation e.g. Codabar, Code128, MicroPDF, etc., the decoded data is stored in multiple byte arrays (one byte array per bar code). Clients can get data in each byte array by passing an index.\n\nThe MSR related data added to the Intent's bundle can be retrieved using the Intent.getStringtExtra() and Intent.getSerializableExtra() calls, using the following String tags:\n\n* `com.motorolasolutions.emdk.datawedge.msr_data`:\nThe data from the MSR tracks is concatenated and sent out as a byte array. The Start/end sentinels and\ntrack separators are included as configured.\n* `com.motorolasolutions.emdk.datawedge.msr_track1`: MSR track 1 data is returned as a byte array.\n* `com.motorolasolutions.emdk.datawedge.msr_track2`: MSR track 2 data is returned as a byte array.\n* `com.motorolasolutions.emdk.datawedge.msr_track3`: MSR track 3 data is returned as a byte array.\n* `com.motorolasolutions.emdk.datawedge.msr_track1_status`: MSR track 1 decode status as an Integer where 0 indicates a successful decode.\n* `com.motorolasolutions.emdk.datawedge.msr_track2_status`: MSR track 2 decode status as an Integer where 0 indicates a successful decode.\n* `com.motorolasolutions.emdk.datawedge.msr_track3_status`: MSR track 3 decode status as an Integer where 0 indicates a successful decode.\n* `com.motorolasolutions.emdk.datawedge.msr_track1_encrypted`: MSR track 1 encrypted data is returned as a byte array.\n* `com.motorolasolutions.emdk.datawedge.msr_track2_encrypted`: MSR track 2 encrypted data is returned as a byte array.\n* `com.motorolasolutions.emdk.datawedge.msr_track3_encrypted`: MSR track 3 encrypted data is returned as a byte array.\n* `com.motorolasolutions.emdk.datawedge.msr_track1_hashed`: MSR track 1 hashed data is returned as a byte array.\n* `com.motorolasolutions.emdk.datawedge.msr_track2_hashed`: MSR track 2 hashed data is returned as a byte array.\n* `com.motorolasolutions.emdk.datawedge.msr_track3_hashed`: MSR track 3 hashed data is returned as a byte array.\n\n"},{"key":"guide-profiles-profileIP","name":" IP Output Profile Feature Reference","md":"# IP Output Profile Feature Reference\n\n## Overview\nIn order to get Barcode or MSR data in your application, you must create a profile that has both an Input feature and an Output feature:\n\n* [Barcode](#guide-profiles-profilebarcode) / [MSR](#guide-profiles-profilemsr) (Input)\n* [Keystroke](#guide-profiles-profilekeystroke),[Intent](#guide-profiles-profileintent),[IP](#guide-profiles-profileIP) (Output)\n\nThe `Barcode` feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera. It also contains detailed parameters for scanner behavior as well as individual barcode symbology parameters.\n\nThe `Intent`, `Keystroke` or `IP` feature in the Profile Manager is used to define how the output from the Barcode scanner should be handled\n\n* Intent - The Intent feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application using the Android Intent mechanism. To use this, you should be familiar with how to register to receive intents in your application as well as handling the data that is passed in. You will have the ability to configure how the intent is sent to your application in the profile itself.\n\n* Keystroke - The Keystroke feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application by emulating keystrokes. You will have the option to control how the data is sent as well as if it should have any prefix or suffix automatically added using basic data formatting.\n\n* IP - IP Output allows DataWedge to send captured data to a host computer via a network connection. Captured data can be sent over an IP network to a specified IP address and port using either TCP or UDP transport protocols.\n\n## IP Output\nUse to configure the Keystroke Output Feature for the profile.\n\n* Name - The name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n* Enabled - Enables or disables this feature. \n* Remote Wedge - Enable or disable the Remote Wedge option (default - enabled). Remote Wedge is used with the IPWedge application.\n* Protocol - Select the protocol used by the remote application. Options: TCP (default) or UDP.\n* IP address - Enter the IP address used by the remote application (default - 0.0.0.0).\n* Port - Enter the port number used by the remote application (default - 58627).\n\n## Basic Data Formatting \nAllows the configuration of any data formatting. When disabled, any data is passed on without modification.\n\n* Enabled - Enables or disables Basic Data Formatting. \n* Prefix to data - Add characters to the beginning of the data when sent.\n* Suffix to data - Add characters to the end of the data when sent.\n* Send data - Set to transfer the captured data to the foreground application. Disabling this option prevents the actual data from being transmitted. However, the prefix and suffix strings, if present, are still transmitted even when this option is disabled (default - enabled).\n* Send as hex - Set to send the data in hexadecimal format. \n* Send TAB key - Set to append a tab character to the end of the processed data. \n* Send ENTER key - Set to append an Enter character to the end of the processed data. \n\n"},{"key":"guide-profiles-profilekeystroke","name":" KeyStroke Profile Feature Reference","md":"# KeyStroke Profile Feature Reference\n\n## Overview\nIn order to get Barcode or MSR data in your application, you must create a profile that has both an Input feature and an Output feature:\n\n* [Barcode](#guide-profiles-profilebarcode) / [MSR](#guide-profiles-profilemsr) (Input)\n* [Keystroke](#guide-profiles-profilekeystroke),[Intent](#guide-profiles-profileintent),[IP](#guide-profiles-profileIP) (Output)\n\nThe `Barcode` feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera. It also contains detailed parameters for scanner behavior as well as individual barcode symbology parameters.\n\nThe `Intent`, `Keystroke` or `IP` feature in the Profile Manager is used to define how the output from the Barcode scanner should be handled\n\n* Intent - The Intent feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application using the Android Intent mechanism. To use this, you should be familiar with how to register to receive intents in your application as well as handling the data that is passed in. You will have the ability to configure how the intent is sent to your application in the profile itself.\n\n* Keystroke - The Keystroke feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application by emulating keystrokes. You will have the option to control how the data is sent as well as if it should have any prefix or suffix automatically added using basic data formatting.\n\n* IP - IP Output allows DataWedge to send captured data to a host computer via a network connection. Captured data can be sent over an IP network to a specified IP address and port using either TCP or UDP transport protocols.\n\n\n## Keystroke Output\nUse to configure the Keystroke Output Feature for the profile.\n\n* Name - The name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n* Enabled - Enables or disables this feature. \n* Action key character - Enabled decoding a special characters embedded within a bar code or MSR data.\n\t* None - Action key character feature is disabled (default).\n\t* Tab - Tab character (\\t) in a bar code is processed.\n\t* Line feed - Line feed character (\\t) in a bar code is processed.\n\t* Carriage return - Carriage return character (\\t) in a bar code is processed.\n\n## Basic Data Formatting \nAllows the configuration of any data formatting. When disabled, any data is passed on without modification.\n\n* Enabled - Enables or disables Basic Data Formatting. \n* Prefix to data - Add characters to the beginning of the data when sent.\n* Suffix to data - Add characters to the end of the data when sent.\n* Send data - Set to transfer the captured data to the foreground application. Disabling this option prevents the actual data from being transmitted. However, the prefix and suffix strings, if present, are still transmitted even when this option is disabled (default - enabled).\n* Send as hex - Set to send the data in hexadecimal format. \n* Send TAB key - Set to append a tab character to the end of the processed data. \n* Send ENTER key - Set to append an Enter character to the end of the processed data. \n\n"},{"key":"guide-profiles-profilemsr","name":" MSR Profile Feature Reference","md":"# MSR Profile Feature Reference\n\n## Overview\nIn order to get MagStripe (MSR) data in your application, you must create a profile with two profile features selected:\n\n* MSR\n* [Keystroke](#guide-profiles-profilekeystroke),[Intent](#guide-profiles-profileintent),[IP](#guide-profiles-profileIP) (Output)\n\nThe `MSR` feature in the Profile Manager is responsible for reading data from the device's integrated mag-stripe reader (if one such exists).\n\nThe `Intent`, `Keystroke` or `IP` feature in the Profile Manager is used to define how the output from the Barcode scanner should be handled\n\n* Intent - The Intent feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application using the Android Intent mechanism. To use this, you should be familiar with how to register to receive intents in your application as well as handling the data that is passed in. You will have the ability to configure how the intent is sent to your application in the profile itself.\n\n* Keystroke - The Keystroke feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application by emulating keystrokes. You will have the option to control how the data is sent as well as if it should have any prefix or suffix automatically added using basic data formatting.\n\n* IP - IP Output allows DataWedge to send captured data to a host computer via a network connection. Captured data can be sent over an IP network to a specified IP address and port using either TCP or UDP transport protocols.\n\n## MSR Settings Reference\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Enabled\nEnables or disables this feature. Default is disabled.\n\n## Output Data\nIn order for your application to receive the barcode data, you must specify one or more Output features. Please  refer to their reference documentation for more information.\n\n* [Intent](#guide-profiles-profileintent) \n* [Keystroke](#guide-profiles-profilekeystroke)\n* [IP](#guide-profiles-profileIP)\n"},{"key":"guide-profiles-sdcard","name":" SDCard Manager Profile Feature Reference","md":"# SDCard Manager Profile Feature Reference\n\n\n## Overview\n\nThe SdCard Manager allows your application to manage the use of the devices SD card.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Enable/Disable SdCard\n\n\n##Enable/Disable\nThis profile feature will allow your application to enable or disable use of external SDCards.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=SdCardMgr&os=All&embed=true\"></iframe> "},{"key":"guide-profiles-settings","name":" Settings Manager Profile Feature Reference","md":"# Settings Manager Profile Feature Reference\n\n## Overview\n\nSettings Manager feature allows you to manage settings UI configuration by providing the ability to invoke Enterprise Reset in Settings application of your device.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Enable/Disable the Ability to Perform an Enterprise Reset from the Settings Menu\n\n* Enable/Disable the Ability to turn Wi-Fi on or off from the Settings Menu\n\n* Enable/Disable the Ability to turn Install Apps from Unknown Sources on or off from the Settings Menu\n\n* Enable/Disable the Ability to to turn Airplane Mode on or off from the Settings Menu\n\n##Enterprise Reset\nEnable or disable the ability to access the `Enterprise Reset` option in the Settings application.\n\n##Wi-Fi \nEnable or disable the ability to access the `Wi-Fi` option in the Settings application.\n\n##Unknown Sources \nEnable or disable the ability to access the `Install Apps from Unknown Sources` option in the Settings application.\n\n##Airplane Mode\nEnable or disable the ability to access the `Airplane Mode` option in the Settings application.\n\n##Access Applications\nEnable or disable the ability to access the `Applications` option in the Settings application.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=SettingsMgr&os=All&embed=true\"></iframe> \n\n\n"},{"key":"guide-profiles-threat","name":" Threat Manager Profile Feature Reference","md":"# Threat Manager Profile Feature Reference\n\n## Overview\n\nThe Threat Manager feature allows your application to control what security threats a device actively monitors for and how to respond.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Enable Threat Detection\n* Disable Threat Detection\n* Perform Counter Measures when a Threat is Detected\n\n##Enable/Disable\nThis profile feature will allow your application to enable or disable Threat detection on a device.\n\n\n##Detectable threats:\n* **Max Password Attempts** - User tries to login with with the wrong password\n* **MDM Client Removal** - MDM client has been removed from the device\n  * MDM Client Package Name - Provide the package name of the MDM client to be observed (System app only)\n* **Externally Detected** - An intent has been received that signifies and a custom threat\n* **Exchange Active Sync Command** - While syncing with Exchange, and threat event occurred\n* **Device is Rooted** - Device has detected that it is rooted\n\n##Counter Measures\n* **Format SdCard** - This counter measure would format the external SDCard, all existing data on card would be lost.\n\n* **Factory Reset** - This counter measure would force the device to factory reset. Returning the device to its original configuration. \n\n* **Wipe Secure Storage Keys** - This counter measure would remove Secure Storage Keys\n\n* **Lock Device** - This counter measure would lock the device, requiring the user to perform any device unlock procedure configured for the device.\n\n* **Uninstall Application** - This counter measure would silently remove an application from the device. Provide the package name of the application to uninstall. \n\n* **Unsolicited Alert** - This counter measure would send an explicit intent to an application. Provide and alert message, and the package and class name of the application you would like to notify.\n\n* **Signal Occurrence of Threat** - Select whether the occurrence of an externally detected Threat should be signaled.\n  * Send threat message - Provide a message to be sent, stating what custom threat has occurred. \n\n## Feature Compatibility\n\n<iframe src=\"compare.html#mx=4.3&csp=ThreatMgr&os=All&embed=true\"></iframe> \n"},{"key":"guide-profiles-touch","name":" Touch Manager Profile Feature Reference","md":"# Touch Manager Profile Feature Reference\n\n\n## Overview\n\nTouch Manager feature allows you set the Touch Mode on your device in order to interact with User Interface.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Configure the Screen for Stylus and Finger Input\n* Configure the Screen for Glove and Finger Input\n\n## TouchAction\nSpecify Touch Mode to interact with User Interface on the device.\n\n* Do not change - Keep the existing Touch Mode settings.\n* Stylus and Finger - Set the Touch Mode to Stylus and Finger.\n* Glove and Finger - Set the Touch Mode to Glove and Finger.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=TouchMgr&os=All&embed=true\"></iframe> \n\n\n"},{"key":"guide-profiles-ui","name":" UI Manager Profile Feature Reference","md":"# UI Manager Profile Feature Reference\n\n## Overview\n\nThe UI Manager feature allows you to manage UI configurations using its UI Manager parameters. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Enable/Disable Clipboard\n* Clear Clipboard \n* Enable/Disable Auto Correct\n* Enable/Disable Home Key\n* Enable/Disable Bluetooth Paring Popup\n* Set Current Local\n* Set Default Input Method \n\n\n## Clipboard\nThis profile feature allows your application to enable or disable a devices clipboard.\n\n\n### Clear Clipboard\nThis profile feature allows your application to clear a devices clipboard.\n\n* Check Box is marked: Clear the clipboard.\n* Check Box is not marked: Don't clear the clipboard (leave unchanged).\n\n##Auto Correct\nThis profile feature allows your application to enable or disable a devices Auto Correct feature.\n\n##Home Key\nThis profile feature allows your application to enable or disable a devices Home Key.\n\n##Bluetooth Paring Popup\n\n\n\n\n\n\n\n\n##Set Current Local\nThis profile feature allows your application to set a devices local to one of the following values.\n\n  * Canada\n  * Canada French\n  * China \n  * Chines\n  * English \n  * France\n  * French\n  * German\n  * Germany\n  * Italian\n  * Italy\n  * Japan\n  * Japanese\n  * Korea\n  * Korean\n  * PRC\n  * Simplified Chines\n  * Taiwan \n  * Traditional Chines\n  * UK\n  * US\n\n##Set Default Input Method \nThis profile feature allows your application to set a devices Input Method to one of the following.\n  * English (US)\n  * Japanese\n  * Chinese (China)\n  * User Defined Input Method\n\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=UiMgr&os=All&embed=true\"></iframe> \n\n\n"},{"key":"guide-profiles-usb","name":" USB Manager Profile Feature Reference","md":"# USB Manager Profile Feature Reference\n\n## Overview\n\nThe USB Manager feature allows you to manage USB configurations of your device.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Enable/Disable USB Module Usage\n* Enable/Disable External USB Storage\n* Enable/Disable ADB (Android Debug Bridge) Over USB\n* Enable/Disable Device Storage Access over USB\n* Enable/Disable the Ability to Access the Device Using USM (USB Mass Storage) Mode\n* Enable/Disable the Ability to Access the Device Using MTP (Media Transfer Protocol) Mode\n* Enable/Disable the Ability to Access the Device Using PTP (Picture Transfer Protocol) Mode\n\n## USB Module Usage\nEnabling this feature would allow the use of external USB modules such as a barcode scanner module.  Disabling this feature will disable the use of any usb module attached to the device.\n\n## External USB Storage\nEnabling this feature would allow the device to access data an external USB mass storage device such as a flash drive through an OTG cable. Disabling would prevent access to an attached USB mass storage device.\n\n## ADB Over USB\nEnabling this feature will allow ADB (Android Debug Bridge)  access to a device from an external workstation via USB. Disabling would prevent adb connections to a device.\n\n## Device Storage Access over USB\nEnabling this feature would allow access to a devices storage via protocols such as USM, MTP and PTP. Disabling this feature would restrict any access to a devices storage via USB.\n\n## USB Mass Storage Mode\nEnabling the USM protocol would allow an external workstation to mount a devices storage, which disables a devices access to that storage until unmounted.  Device Storage Access over USB must first be enabled.\n\n## Media Transfer Protocol Mode\nEnabling the MTP protocol would allow an external workstation to access a devices storage without blocking the devices access to that storage.  Device Storage Access over USB must first be enabled.\n\n## Picture Transfer Protocol Mode\nEnabling the PTP protocol would allow an external workstation to access a devices storage without blocking the devices access to that storage.  Device Storage Access over USB must first be enabled.\n\n\n## Feature Compatibility\n\n<iframe src=\"compare.html#mx=4.3&csp=UsbMgr&os=All&embed=true\"></iframe> \n\n\n"},{"key":"guide-profiles-wifi","name":" Wi-Fi Manager Profile Feature Reference","md":"# Wi-Fi Manager Profile Feature Reference\n\n## Overview\n\nThe Wi-Fi feature allows you to manage your devices Wi-Fi settings as well as manage the network profiles to be used for connecting and remembering networks.\n\n>Note: In order for settings to be applied, Wi-Fi must be enabled. If you do not specify WiFi Enable in the profile you will get an error when attempting to apply other settings if the device's Wi-Fi is not already enabled.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Enable Wi-Fi\n* Disable Wi-Fi\n* Set Wi-Fi to Never Sleep\n* Set Wi-Fi to Never Sleep When Plugged In\n* Set Wi-Fi to Always Sleep\n* Use Network Notifications\n* Do Not User Network Notifications\n* Enable Auto Country Selection\n* Manually Select country\n* Set the RF Band\n* Enable Auto RF Band Selection\n* Enable the Device to set the Clock off the AP (Access Point) Time\n* Enable HF SR (Hyper Fast Secure Roam)\n* Disable HR SR (Hyper Fast Secure Roam)\n* Enable CCKM (Cisco Centralized Key Management)\n* Disable CCKM (Cisco Centralized Key Management)\n* Enable FT (Fast Transition)\n* Disable FT (Fast Transition)\n* Enable FTRIC (Fast Transition Resource Request)\n* Disable FTRIC (Fast Transition Resource Request)\n* Enable OKC (Opportunistic Key Caching)\n* Disable OKC (Opportunistic Key Caching)\n* Enable PreAuth\n* Disable PreAuth\n* Set Power Saving Mode to Fast Power Savings\n* Set Power Savings Mode to Always Active\n* Set Power Savings Mode to Maximum Power Savings\n* Enable Advanced Logging\n* Disable Advanced Logging\n* Enable FIPS Compliance\n* Disable FIPS Compliance\n* Enable Restricted WLAN Settings UI\n* Disable Restricted WLAN Settings UI\n* Add a Wi-Fi Network\n* Remove a Wi-Fi Network\n* Connect to a Wi-Fi Network\n* Disconnect from a Wi-Fi Network\n* Enable an Existing Wi-Fi Network\n* Disable an Existing Wi-Fi Network\n* Disable all Existing Wi-Fi Networks\n* Remove all Existing Wi-Fi Networks\n\n\n## Wi-Fi Enable\nEnable Disable Wi-Fi Radio.\n\n>Note: In order for other settings to be applied, Wi-Fi must be enabled. If you do not specify WiFi Enable in the profile you will get an error when attempting to apply other settings if the device's Wi-Fi is not already enabled.\n\n* Do not change - will use whatever the device is currently configured as.\n* Enable - enabled the Wi-Fi radio\n* Disable - disabled the Wi-Fi radio\n\n## Country Selection Auto/Manual\nBy leaving this option unchecked, the country may be determined by the router or access point setting. To manually select the country, you should select the checkbox. When doing this a country drop-down will appear.\n\n## Country\nCountry to use for Wi-Fi regulatory setting. 802.11d will not be enabled if you select 'U.S.A' in the Country drop-down. When you choose 'AUTO' in the drop-down, 802.11d will be enabled. \n\n## RF Band\nSpecifies the 802.11 band(s) to use.\n\n* Unchanged - will use whatever the device is currently configured as.\n* 2.4GHZ - enable 2.4GHz band\n* 5.0GHZ - enable 5.0GHz band\n* Auto - enable both bands and connect automatically to either.\n\n## Wi-Fi Channel\n* 2.4GHz Channels - enable the specified channels in the 2.4GHz band. \n    * String containing a set of valid channels. Comma separated and may contain a range specified with a dash '-'. Example: 1,7-10\n* 5.0GHz Channels - enable the specified channels in the 5.0GHz band.\n    * String containing a set of valid channels. Comma separated and may contain a range specified with a dash '-'. Example: 36-60\n\n## Sleep Policy\nSpecifies the state of the Wi-Fi radio when the device suspends.    \n\n* Do not change - will use whatever the device is currently configured as.\n* Always Sleep - Power down the Wi-Fi radio.\n* Never Sleep When Plugged - Leave Wi-Fi radio powered while it is connected to A/C power and power down the Wi-Fi radio while it is on battery.\n* Never Sleep - Leave Wi-Fi radio powered.\n\n## Network Notification\nSpecifies whether or not to notify the user when a open network comes in range.\n\n* Do not change - will use whatever the device is currently configured as.\n* Use network notification - Notify the user when a network comes in range.\n* Do not use network notification - Don't notify the user when a network comes in range.\n\n## Network Action\nUsed to manage the network profiles on the device.\n\n* Add a New Network - will add a new profile with the provided profile settings.\n* Remove an Existing Network - will remove the a network profile based on the SSID.\n* Connect to an Existing Network - will initiate a connection to the network based on the SSID.\n* Disconnect from an Existing Network - will disconnect from a network based on the SSID.\n* Enable an Existing Network - will enable a network profile based on the SSID.\n* Disable an Existing Network - will disable a network profile based on the SSID.\n* Disable All Existing Networks - will disable all network profiles.\n* Remove All Existing Networks - will remove all network profiles.\n\n## Wi-Fi Profiles\nParameters used for adding a network. SSID is used to identify the network profile to be acted on when choosing an '... an Existing Network' network action above.\n\n* SSID - the SSID name of the network\n* Security Mode \n    * Open - Open network\n    * Personal - PSK or WEP\n    * Enterprise - 802.1x EAP profiles\n* WPA Mode:  WPA mode used by the network. Ex: WPA, WPA2, WPA/WPA2, WEP\n>Note: WEP is not supported with a Enterprise Security Mode. It is only supported using Personal Security Mode.\n\n* Authentication Mode: Authentication mode used by the network. used with Enterprise Security Mode. Ex: EAP-TLS, EAP-FAST-GTC, EAP-FAST-MSCHAPV2, EAP-TTLS-PAP, EAP-TTLS-MSCHAP, EAP-TTLS-MSCHAPV2, LEAP, PEAP-MSCHAPV2, PEAP-GTC\n* DHCP: When selected DHCP will be used. When not selected, Static IP address is used and IP address settings should be provided ex: Static IP Address, Gateway IP Address, Subnet Mask, DNS Server IP Address\n* Proxy: When selected, a Proxy is used for network connections. Proxy settings should be supplied. Ex: Proxy Host Name, Port, Bypass Proxy\n\n## Encryption Details\n* Encryption Type: Type of encryption used by the network. The values in this drop-down will change based on the WPA Mode selected. Ex: TKIP, AES-CCMP, AES-CCMP/TKIP, WEP-40, WEP-104\n* Key Type: Passphrase or Hex Key\n* Protect Key: Enables encryption of the Key\n* Web Key Index: Only `wep[0]` is a valid option\n\n## Authentication Details\nSpecific authentication settings when Enterprise Mode and specific Authentication modes are selected.\n\n* Identity - the name that should be used to join the network.\n* Server Certificate - the name of the certificate alias that should be used to verify the server (Optional).\n* Client Certificate - the name of the certificate alias that should be used to join the network (Mandatory).\n* Anonymous Identity - the anonymous identity to be used to join the network.\n* Password - the password to be used to connect to the network.\n* Protect Password - when selected will encrypt the password.\n\n### EAP-TLS and Certificate Alias \nDue to current limitations of the Certificate Manager Feature (in an EAP-TLS scenario), it is not possible to \"override\" the Alias that is assigned to a Client Certificate and Private Key when they are installed into the Android KeyStore\n\nThe only way to determine the actual Alias that is assigned to a Client Certificate and Private Key when they are installed into the Android KeyStore is to examine the Android KeyStore after installation to determine which Alias was used:\n\n1. The same Alias will ALWAYS be assigned to a given Client Certificate and Private Key, no matter when, or on which device, it is installed\n\n2. Whenever a different Client Certificate is used, a different Alias will generally be assigned to the Client Certificate and Private Key\n\n#### Manually Determining the Certificate Alias\nA device can be used to capture the alias being used for the certificate being installed. It is recommended that the key store be cleared before performing these steps (Settings->Security->Clear Credentials)\n\n1. Use Certificate Manager to install the certificate onto a device.\n2. Navigate to Settings->Wi-Fi->'+'' to add a network\n3. Scroll to security, tap and select 802.1x EAP\n4. Scroll to EAP method, tap and select TLS\n5. Scroll to client certificate, tap and note a drop down box with \"(unspecified)\" and the alias of the installed certificate. The alias listed can become the value to use as the certificate when using WiFiConfig to configure a profile that uses EAP-TLS.\n\n## Advanced Options\n\n>Note: The following steps must be followed in order to use the Advanced Options under the WiFi feature:\n>\n>* PMKID must be enabled in order to enable PreAuth (PreAuth =1 and PMKID =1)\n>* FT must be enabled in order to enable FTRIC (FT=1 and FTRIC =1)\n>* OKC must be disabled (OKC =0 and PMKID =1) in order to use PMKID caching\n>\n> Important Note: The default \"Fast Power Savings\" value must be used for the \"Power Save\" parameter under the Advanced Options. Using the \"Do Not Change\" value will result in failure.\n\n* AutoTimeConfig- Enable AutoTimeConfig feature. Updates device timestamp based on based on Symbol IE in 802.11 beacon. This is a Symbol specific feature.\n* HFSR - Hyper Fast Secure Roam (HFSR) is a Symbol's fast roam algorithm. \n* CCKM - This is to enable / disable CCX roam algorithm (CCKM).\n* FT - This is to enable / disable Fast Transition roam algorithm (802.11r).\n* FTRIC - This is to enable / disable Fast Transition Resource Request (802.11r).\n* OKC- This is to enable / disable Opportunistic Key Caching (OKC).\n* PMKID - This is to enable / disable PMKID Caching. We need to disable OKC and enable PMKID for PMKID caching to work.\n* PreAuth- This is to enable / disable 802.1x Pre-Authentication.\n* PowerSave - This option is to configure different Power Save Modes of Radio.\n    * Do not change - will use whatever the device is currently configured as.\n    * Always Active: This will keep the radio in active\n    * Fast Power Savings: This will keep the radio in Auto Power Save.\n    * Maximum Power Savings: This will keep the radio in Auto Power Save.\n* Advanced Logging - Start or Stop advanced Wi-Fi logging.\n* FIPS - We can use this option to enable disable FIPS data in motion supported in WLAN. WLAN FIPS 140-2, level 1 compliance.\n* Enable Restricted Settings UI - When enabled the Wi-Fi settings will be in Read-Only mode.\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=Wi-Fi&os=All&embed=true\"></iframe> \n\n\n"},{"key":"guide-profiles-wireless","name":" Wireless Manager Profile Feature Reference","md":"# Wireless Manager Profile Feature Reference\n\n## Overview\n\nThe Wireless Manager allows you to configure wireless configurations on your device. (Ex. Configure device's Bluetooth)  \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Enable/Disable Bluetooth\n* Turn on/off Bluetooth\n* Turn on/off NFC\n* Turn on/off GPS\n* Turn on/off WWAN (Wireless WAN)\n\n\n## Bluetooth\nThis profile feature allows your application to enable or disable usage of bluetooth on a device.\n\n### Turn on/off Bluetooth\nThis profile feature allows your application to turn on or off a devices bluetooth radio. Bluetooth must be enabled\nbefore turning it on.\n\n## NFC\nThis profile feature allows your application to turn on or off a devices NFC radio.\n\n## GPS\nThis profile feature allows your application to turn on or off a devices GPS radio.\n\n## WWAN \nThis profile feature allows your application to turn on or off a devices WAN (Wireless WAN) radio.\n\n\n## Feature Compatibility\n\n<iframe src=\"compare.html#mx=4.3&csp=WirelessMgr&os=All&embed=true\"></iframe> \n\n\n"},{"key":"guide-profiles-xml","name":" XML Manager Profile Feature Reference","md":"# XML Manager Profile Feature Reference\n\n## Overview\n\nThe XML Manager feature allows you to specify various XML processing modes to be used.  \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Main Functionality\n\n* Specify the XML processing mode to use\n * Execute all to end\n * Execute until error, then stop\n * Try until error, then Skip to Catch\n * Catch error, Execute remainder\n\n\n## XML Processing Mode\nSpecify the XML processing mode to use\n\n* Execute all to end\n* Execute until error, then stop\n* Try until error, then Skip to Catch\n* Catch error, Execute remainder\n\n## Feature Compatibility\n<iframe src=\"compare.html#mx=4.3&csp=XmlMgr&os=All&embed=true\"></iframe> \n\n\n"},{"key":"guide-reference-EMDKList","name":"EMDK For Android API List","md":"#EMDK For Android API List\n\n## Core and ProfileManager APIs\nThe following APIs are to be used to process EMDK features and profiles using the [Profile Manager](#guide-profiles-usingwizard) as well as getting information about the EMDK.\n\n\n###EMDKBase\n\n* [EMDKBase](#api-EMDKBase)\n\n\n###EMDKManager\n\n* [EMDKManager](#api-EMDKManager)\n* [EMDKManager_FEATURE_TYPE](#api-EMDKManager_FEATURE_TYPE)\n* [EMDKManager_IEMDKListener](#api-EMDKManager_IEMDKListener)\n* [EMDKManager_OpenedEventArgs](#api-EMDKManager_OpenedEventArgs)\n\n\n###EMDKResults\n\n* [EMDKResults](#api-EMDKResults)\n* [EMDKResults_EXTENDED_STATUS_CODE](#api-EMDKResults_EXTENDED_STATUS_CODE)\n* [EMDKResults_STATUS_CODE](#api-EMDKResults_STATUS_CODE)\n\n\n###ProfileManager\n\n* [ProfileManager](#api-ProfileManager)\n* [ProfileManager_DataEventArgs](#api-ProfileManager_DataEventArgs)\n* [ProfileManager_IDataListener](#api-ProfileManager_IDataListener)\n* [ProfileManager_PROFILE_FLAG](#api-ProfileManager_PROFILE_FLAG)\n* [ProfileManager_ResultData](#api-ProfileManager_ResultData)\n\n\n###VersionManager\n\n* [VersionManager](#api-VersionManager)\n* [VersionManager_VERSION_TYPE](#api-VersionManager_VERSION_TYPE)\n\n\n## Barcode APIs\nThe following APIs are used when you wish to handle all barcode scanning entirely in Java. These API's work independently of any [Data Capture profiles.](#guide-profiles-profilebarcode)\n\n\n###BarcodeManager\n\n* [BarcodeManager](#api-BarcodeManager)\n* [BarcodeManager_ConnectionState](#api-BarcodeManager_ConnectionState)\n* [BarcodeManager_DeviceIdentifier](#api-BarcodeManager_DeviceIdentifier)\n* [BarcodeManager_IScannerConnectionListener](#api-BarcodeManager_IScannerConnectionListener)\n* [BarcodeManager_ScannerConnectionEventArgs](#api-BarcodeManager_ScannerConnectionEventArgs)\n\n\n###InterfaceConfig\n\n* [InterfaceConfig](#api-InterfaceConfig)\n\n\n###ScanDataCollection\n\n* [ScanDataCollection](#api-ScanDataCollection)\n* [ScanDataCollection_LabelType](#api-ScanDataCollection_LabelType)\n* [ScanDataCollection_ScanData](#api-ScanDataCollection_ScanData)\n\n\n###Scanner\n\n* [Scanner](#api-Scanner)\n* [Scanner_DataEventArgs](#api-Scanner_DataEventArgs)\n* [Scanner_IDataListener](#api-Scanner_IDataListener)\n* [Scanner_IStatusListener](#api-Scanner_IStatusListener)\n* [Scanner_StatusEventArgs](#api-Scanner_StatusEventArgs)\n* [Scanner_TriggerType](#api-Scanner_TriggerType)\n\n\n###ScannerConfig\n\n* [ScannerConfig](#api-ScannerConfig)\n* [ScannerConfig_AudioStreamType](#api-ScannerConfig_AudioStreamType)\n* [ScannerConfig_BooklandFormat](#api-ScannerConfig_BooklandFormat)\n* [ScannerConfig_CheckDigit](#api-ScannerConfig_CheckDigit)\n* [ScannerConfig_CheckDigitScheme](#api-ScannerConfig_CheckDigitScheme)\n* [ScannerConfig_CheckDigitType](#api-ScannerConfig_CheckDigitType)\n* [ScannerConfig_CodeIdType](#api-ScannerConfig_CodeIdType)\n* [ScannerConfig_CouponReport](#api-ScannerConfig_CouponReport)\n* [ScannerConfig_DecoderParams_AustralianPostal](#api-ScannerConfig_DecoderParams_AustralianPostal)\n* [ScannerConfig_DecoderParams_Aztec](#api-ScannerConfig_DecoderParams_Aztec)\n* [ScannerConfig_DecoderParams_BaseDecoder](#api-ScannerConfig_DecoderParams_BaseDecoder)\n* [ScannerConfig_DecoderParams_CanadianPostal](#api-ScannerConfig_DecoderParams_CanadianPostal)\n* [ScannerConfig_DecoderParams_Chinese2of5](#api-ScannerConfig_DecoderParams_Chinese2of5)\n* [ScannerConfig_DecoderParams_CodaBar](#api-ScannerConfig_DecoderParams_CodaBar)\n* [ScannerConfig_DecoderParams_Code11](#api-ScannerConfig_DecoderParams_Code11)\n* [ScannerConfig_DecoderParams_Code128](#api-ScannerConfig_DecoderParams_Code128)\n* [ScannerConfig_DecoderParams_Code39](#api-ScannerConfig_DecoderParams_Code39)\n* [ScannerConfig_DecoderParams_Code93](#api-ScannerConfig_DecoderParams_Code93)\n* [ScannerConfig_DecoderParams_CompositeAB](#api-ScannerConfig_DecoderParams_CompositeAB)\n* [ScannerConfig_DecoderParams_CompositeC](#api-ScannerConfig_DecoderParams_CompositeC)\n* [ScannerConfig_DecoderParams_D2of5](#api-ScannerConfig_DecoderParams_D2of5)\n* [ScannerConfig_DecoderParams_DataMatrix](#api-ScannerConfig_DecoderParams_DataMatrix)\n* [ScannerConfig_DecoderParams_DutchPostal](#api-ScannerConfig_DecoderParams_DutchPostal)\n* [ScannerConfig_DecoderParams_Ean13](#api-ScannerConfig_DecoderParams_Ean13)\n* [ScannerConfig_DecoderParams_Ean8](#api-ScannerConfig_DecoderParams_Ean8)\n* [ScannerConfig_DecoderParams_Gs1Databar](#api-ScannerConfig_DecoderParams_Gs1Databar)\n* [ScannerConfig_DecoderParams_Gs1DatabarExp](#api-ScannerConfig_DecoderParams_Gs1DatabarExp)\n* [ScannerConfig_DecoderParams_Gs1DatabarLim](#api-ScannerConfig_DecoderParams_Gs1DatabarLim)\n* [ScannerConfig_DecoderParams_HanXin](#api-ScannerConfig_DecoderParams_HanXin)\n* [ScannerConfig_DecoderParams_I2of5](#api-ScannerConfig_DecoderParams_I2of5)\n* [ScannerConfig_DecoderParams_JapanesePostal](#api-ScannerConfig_DecoderParams_JapanesePostal)\n* [ScannerConfig_DecoderParams_Korean3of5](#api-ScannerConfig_DecoderParams_Korean3of5)\n* [ScannerConfig_DecoderParams_MailMark](#api-ScannerConfig_DecoderParams_MailMark)\n* [ScannerConfig_DecoderParams_Matrix2of5](#api-ScannerConfig_DecoderParams_Matrix2of5)\n* [ScannerConfig_DecoderParams_MaxiCode](#api-ScannerConfig_DecoderParams_MaxiCode)\n* [ScannerConfig_DecoderParams_MicroPdf](#api-ScannerConfig_DecoderParams_MicroPdf)\n* [ScannerConfig_DecoderParams_MicroQr](#api-ScannerConfig_DecoderParams_MicroQr)\n* [ScannerConfig_DecoderParams_Msi](#api-ScannerConfig_DecoderParams_Msi)\n* [ScannerConfig_DecoderParams_Pdf417](#api-ScannerConfig_DecoderParams_Pdf417)\n* [ScannerConfig_DecoderParams_QrCode](#api-ScannerConfig_DecoderParams_QrCode)\n* [ScannerConfig_DecoderParams_Signature](#api-ScannerConfig_DecoderParams_Signature)\n* [ScannerConfig_DecoderParams_Tlc39](#api-ScannerConfig_DecoderParams_Tlc39)\n* [ScannerConfig_DecoderParams_TriOptic39](#api-ScannerConfig_DecoderParams_TriOptic39)\n* [ScannerConfig_DecoderParams_UkPostal](#api-ScannerConfig_DecoderParams_UkPostal)\n* [ScannerConfig_DecoderParams_Upca](#api-ScannerConfig_DecoderParams_Upca)\n* [ScannerConfig_DecoderParams_Upce0](#api-ScannerConfig_DecoderParams_Upce0)\n* [ScannerConfig_DecoderParams_Upce1](#api-ScannerConfig_DecoderParams_Upce1)\n* [ScannerConfig_DecoderParams_UpcEanParams](#api-ScannerConfig_DecoderParams_UpcEanParams)\n* [ScannerConfig_DecoderParams_Us4State](#api-ScannerConfig_DecoderParams_Us4State)\n* [ScannerConfig_DecoderParams_Us4StateFics](#api-ScannerConfig_DecoderParams_Us4StateFics)\n* [ScannerConfig_DecoderParams_UsPlanet](#api-ScannerConfig_DecoderParams_UsPlanet)\n* [ScannerConfig_DecoderParams_UsPostNet](#api-ScannerConfig_DecoderParams_UsPostNet)\n* [ScannerConfig_DecoderParams_WebCode](#api-ScannerConfig_DecoderParams_WebCode)\n* [ScannerConfig_DecoderParams](#api-ScannerConfig_DecoderParams)\n* [ScannerConfig_HanXinInverse](#api-ScannerConfig_HanXinInverse)\n* [ScannerConfig_IlluminationMode](#api-ScannerConfig_IlluminationMode)\n* [ScannerConfig_InterfaceParams](#api-ScannerConfig_InterfaceParams)\n* [ScannerConfig_Inverse1DMode](#api-ScannerConfig_Inverse1DMode)\n* [ScannerConfig_Isbt128ContactMode](#api-ScannerConfig_Isbt128ContactMode)\n* [ScannerConfig_LcdMode](#api-ScannerConfig_LcdMode)\n* [ScannerConfig_LinearSecurityLevel](#api-ScannerConfig_LinearSecurityLevel)\n* [ScannerConfig_PickList](#api-ScannerConfig_PickList)\n* [ScannerConfig_PowerMode](#api-ScannerConfig_PowerMode)\n* [ScannerConfig_Preamble](#api-ScannerConfig_Preamble)\n* [ScannerConfig_ReaderParams_ReaderSpecific_CameraSpecific](#api-ScannerConfig_ReaderParams_ReaderSpecific_CameraSpecific)\n* [ScannerConfig_ReaderParams_ReaderSpecific_ContinuousRead](#api-ScannerConfig_ReaderParams_ReaderSpecific_ContinuousRead)\n* [ScannerConfig_ReaderParams_ReaderSpecific_ImagerSpecific](#api-ScannerConfig_ReaderParams_ReaderSpecific_ImagerSpecific)\n* [ScannerConfig_ReaderParams_ReaderSpecific_LaserSpecific](#api-ScannerConfig_ReaderParams_ReaderSpecific_LaserSpecific)\n* [ScannerConfig_ReaderParams_ReaderSpecific](#api-ScannerConfig_ReaderParams_ReaderSpecific)\n* [ScannerConfig_ReaderParams](#api-ScannerConfig_ReaderParams)\n* [ScannerConfig_ScanParams](#api-ScannerConfig_ScanParams)\n* [ScannerConfig_SecurityLevel](#api-ScannerConfig_SecurityLevel)\n* [ScannerConfig_SkipOnUnSupported](#api-ScannerConfig_SkipOnUnSupported)\n* [ScannerConfig_SupplementalMode](#api-ScannerConfig_SupplementalMode)\n* [ScannerConfig_UccLinkMode](#api-ScannerConfig_UccLinkMode)\n* [ScannerConfig_VerifyCheckDigit](#api-ScannerConfig_VerifyCheckDigit)\n* [ScannerConfig_ViewFinderMode](#api-ScannerConfig_ViewFinderMode)\n\n\n###ScannerException\n\n* [ScannerException](#api-ScannerException)\n\n\n###ScannerInfo\n\n* [ScannerInfo](#api-ScannerInfo)\n* [ScannerInfo_ConnectionType](#api-ScannerInfo_ConnectionType)\n* [ScannerInfo_DecoderType](#api-ScannerInfo_DecoderType)\n* [ScannerInfo_DeviceType](#api-ScannerInfo_DeviceType)\n\n\n###ScannerResults\n\n* [ScannerResults](#api-ScannerResults)\n\n\n###StatusData\n\n* [StatusData](#api-StatusData)\n* [StatusData_ScannerStates](#api-StatusData_ScannerStates)\n"},{"key":"guide-reference-refbatteryintent","name":" Battery Intent API Reference","md":"# Battery Intent API Reference\n\n## Overview\nThe purpose of this document is to describe the functionality of the Battery Intent API Interface. Its intended audience are Android developers. \n \n## Requirements\nKnowledge of Android programming and familiarity with the Android intent mechanism are assumed. \n \n* Android Versions:\t\n\t* 2.3.4 and later.\n* Devices:\t\n\t* Symbol Android devices, such as the ET1 rev D, MC40 rev A.\n \n \n## Features\nOn Symbol devices like the MC40, extra battery information can be retrieved using the standard [Android Battery Intent](http://developer.android.com/training/monitoring-device-state/battery-monitoring.html). Setting up to receive this information is the same as with consumer Android devices. However, the data that is returned to your application includes some extra information like:\n\n* Backup Battery Voltage\n* Battery Manufacture Date\n* Battery Serial Number\n* Part Number for Battery\n* Unique ID for Battery\n* Rated Capacity of the Battery\n* Charge Cycle count of the Battery\n \n## Programming Interface\n \n#### Function Prototype\n\t\n\t:::java\n\tmIntent_Receiver = new Intent_Receiver();  \n\tmIntentFilter = new IntentFilter();  \n\tmIntentFilter.addAction(Intent.ACTION_BATTERY_CHANGED);  \n\tregisterReceiver(mIntent_Receiver,mIntentFilter); \n\n#### Parameters\n\nPlease reference the Android Battery Manager [API](http://developer.android.com/reference/android/os/BatteryManager.html). \n\n#### Return Values\n\nIn addition to the battery information Android returns by default, which can be found [here](http://developer.android.com/reference/android/os/BatteryManager.html), Symbol devices return the following additional parameters: \n\n* **bkvoltage** - Backup Battery Voltage\n* **mfd**  - Battery Manufacture Date\n* **serialnumber** - Battery Serial Number\n* **partnumber** - Part Number for Battery\n* **uniqueid** - Unique ID for Battery\n* **ratedcapacity** - Rated Capacity of the Battery\n* **cycle** - Charge Cycle count of the Battery\n\n#### Example\n\n\t:::java\n\tpublic void onReceive(Context context, Intent intent) {      \n\t\tif (BATTERY_STATE_CHANGED_INTENT.equals(intent.getAction())) {          \n\n\t\t\tint bkvoltage = intent.getExtras().getInt(\"bkvoltage\");  \n\t\t\tString mfd = intent.getExtras().getString(\"mfd\");  \n\t\t\tString serialnumber = intent.getExtras().getString(\"serialnumber\");  \n\t\t\tString partnumber = intent.getExtras().getString(\"partnumber\");  \n\t\t\tString uniqueid = intent.getExtras().getString(\"uniqueid\");  \n\t\t\tint ratedcapacity = intent.getExtras().getInt(\"ratedcapacity\");  \n\t\t\tint cycle = intent.getExtras().getInt(\"cycle\");  \n\t\t     \n\t\t}  \n\t} \n"},{"key":"guide-reference-refdatacaptureintent","name":" Data Capture Intent API Reference","md":"# Data Capture Intent API Reference\n## Overview\nThe purpose of this document is to describe the functionality of the Data Capture API. Its intended audience are Android developers. The Data Capture API is an application programming interface which provides a number of specific commands that another application can use to control certain aspects of data capture on Android devices.\n \n## Requirements\nKnowledge of Android programming and familiarity with the Android intent mechanism are assumed. Also assumed is some familiarity with DataWedge and that you have read the DataWedge section in the Integrator Guide for your device.\n \n* Android Versions:\t\n\t* 2.3.4 and later\n* Devices:\t\n\t* ET1 rev D, MC40 rev A, TC55, etc.\n \n \n## Features\nThe following is a list of the high-level API functions:\n\n* Start/stop/toggle the soft scan trigger.\n* Disable/enable the scanner plug-in in the currently active profile.\n* Provide a list of available scanners.\n* Make an un-associated user created profile the default profile.\n* Reset the default profile back to Profile0.\n* Switch the current profile to a user created profile that is un-associated.\n \n## DataWedge Profiles\nThe DataCapture APIs use the DataWedge profiles for collecting and formatting data.  For example, each user application can have a profile which outputs scanned data in the required format when that application comes to the foreground. DataWedge can be configured to process the same set of captured data differently based on the requirements of each application.  Refer to the DataWedge section in your devices Integrator Guide for more information on DataWedge profiles.\n \n## Programming Interface\nAn application will access the Data Capture API by broadcasting an intent. It will use the primary pieces of information in a intent, action and data, to specify the API function to perform.\n \n### SoftScanTrigger\n#### Description\nThe SoftScanTrigger API command can be used to start, stop or toggle the soft scan trigger.\n \n \n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\ti.putExtra(EXTRA_DATA, \"<parameter>\");\n\n#### Parameters\n\n* ACTION: String \"com.motorolasolutions.emdk.datawedge.api.ACTION_SOFTSCANTRIGGER\"\n* EXTRA_DATA: String \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PARAMETER\"\n* `<parameter>`:\tThe parameter as a string, either of the following:\n\t* \"START_SCANNING\" - to start scanning\n\t* \"STOP_SCANNING\" - to stop scanning\n\t* \"TOGGLE_SCANNING\" - to toggle between start scanning and stop scanning\n\n#### Return Values\n\n* None.\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n* `$ adb logcat -s DWAPI`\n* Error messages will be logged for invalid actions and parameters\n\n#### Example\n\n\t:::java\n\t// define action and data strings  \n\tString softScanTrigger = \"com.motorolasolutions.emdk.datawedge.api.ACTION_SOFTSCANTRIGGER\";  \n\tString extraData = \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PARAMETER\";  \n\t  \n\t// create the intent  \n\tIntent I = new Intent();  \n\t// set the action to perform  \n\ti.setAction(softScanTrigger);  \n\t// add additional info  \n\ti.putExtra(extraData, \"START_SCANNING\");  \n\t// send the intent to DataWedgecontext.this.sendBroadcast(i);  \n\n#### Comments\nThe received API commands are not queued; API commands are processed immediately. Commands received while the current API command is still being processed may be ignored. For example, attempting to send the soft scan trigger start command immediately after sending the scanner enable command will result in the soft scan trigger command being ignored because the scanner enable will not have had time to complete. In this case, the soft scan trigger command should be delayed sufficiently for the scanner enable to complete; one example of how this could be done is given below.\n\n\t:::java\n\tint triggerDelay = 250; // delay in milliseconds  \n\t  \n\tHandler handler = new Handler();  \n\thandler.postDelayed(new Runnable() {       \n\t      public void run()  \n\t      {               \n\t          // for clarity, assume the following method contains the code in the example above               \n\t          startSoftScan();       \n\t      }  \n\t}, triggerDelay);  \n\n### ScannerInputPlugin\n#### Description\nThe ScannerInputPlugin API command can be used to enable/disable the scanner plug-in in the currently active profile. Disabling the scanner plug-in effectively disables scanning in that profile (associated or un-associated).\n \n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\ti.putExtra(EXTRA_DATA, \"<parameter>\"); \n\n#### Parameters\n\n* ACTION: String \"com.motorolasolutions.emdk.datawedge.api.ACTION_SCANNERINPUTPLUGIN\"\n* EXTRA_DATA: String \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PARAMETER\"\n* `<parameter>`:\tThe parameter as a string, either of the following:\n\t* \"ENABLE_PLUGIN\" - enables the plug-in\n\t* \"DISABLE_PLUGIN\" - disables the plug-in\n\n#### Return Values\n\n* None.\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n\t* `$ adb logcat -s DWAPI`\n* Error messages will be logged for invalid actions and parameters\n\n#### Example\n\n\t:::java\n\t// define action and data strings  \n\tString scannerInputPlugin = \"com.motorolasolutions.emdk.datawedge.api.ACTION_SCANNERINPUTPLUGIN\";  \n\tString extraData = \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PARAMETER\";  \n\t  \n\tpublic void onResume() {       \n\t    // create the intent       \n\t    Intent I = new Intent();       \n\t    // set the action to perform       \n\t    i.setAction(scannerInputPlugin);       \n\t    // add additional info       \n\t    i.putExtra(extraData, \"DISABLE_PLUGIN\");       \n\t    // send the intent to DataWedge       \n\t    context.this.sendBroadcast(i);  \n\t}  \n\n#### Comments\nThis Data Capture API intent will allow you to enable/disable the scanner plug-in for the current profile. For example, let’s say that activity A launches and uses the Data Capture API intent to switch to profileA in which the scanner plug-in is enabled, then at some point it uses the Data Capture API to disable the scanner plug-in. Activity B is launched. In DataWedge, profileB is associated with activity B. DataWedge switches to profileB. When activity A comes back to the foreground, in the onResume method, activity A will need to use the Data Capture API intent to switch back to profileA, then use the Data Capture API intent again to disable the scanner plug-in, to return back to the state it was in.\n\n>Note: The above assumes that profileA is not associated to any applications/activities, therefore when focus switches back to activity A, DataWedge will not automatically switch to profileA therefore activity A must switch back to profileA in its onResume method. Because DataWedge will automatically switch profile when your activity is paused, it is recommended that this API function be called from the onResume method of your activity.\n\n### enumerateScanners\n#### Description\nThe enumerateScanners API command can be used to get a list of scanners available on the device.\n\n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\n#### Parameters\n\n* ACTION:\tString \"com.motorolasolutions.emdk.datawedge.api.ACTION_ENUMERATESCANNERS\"\n\n#### Return Values\n* The enumerated list of scanners will be returned via a broadcast intent. The broadcast intent action is \"com.motorolasolutions.emdk.datawedge.api.ACTION_ENUMERATEDSCANNERLIST\" and the list of scanners is returned as a string array (see the example below).\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n\t* $ adb logcat -s DWAPI\n* Error messages will be logged for invalid actions and parameters\n\n#### Example\n\n\t:::java\n\t// first send the intent to enumerate the available scanners on the device  \n\t// define action string  \n\tString enumerateScanners = \"com.motorolasolutions.emdk.datawedge.api.ACTION_ENUMERATESCANNERS\";  \n\t// create the intent  \n\tIntent I = new Intent();  \n\t// set the action to perform  \n\ti.setAction(enumerateScanners);  \n\t// send the intent to DataWedge  \n\tcontext.this.sendBroadcast(i);// now we need to be able to receive the enumerate list of available scanners  \n\tString enumeratedList = \"com.motorolasolutions.emdk.datawedge.api.ACTION_ENUMERATEDSCANNERLIST\";  \n\tString KEY_ENUMERATEDSCANNERLIST = \"DataWedgeAPI_KEY_ENUMERATEDSCANNERLIST\";  \n\t// Create a filter for the broadcast intentIntentFilter filter = new IntentFilter();  \n\tfilter.addAction(enumeratedList);registerReceiver(myBroadcastReceiver, filter);// now we need a broadcast receiver  \n\tprivate BroadcastReceiver myBroadcastReceiver = new BroadcastReceiver() {       \n\t      @Override        Public void onReceive(Context context, Intent intent) {               \n\t          String action = intent.getAction();               \n\t          if (action.equals(enumeratedList)) {                       \n\t                Bundle b = intent.getExtras();                       \n\t                String[] scanner_list = b.getStringArray(KEY_ENUMERATEDSCANNERLIST);               \n\t          }       \n\t      }  \n\t};  \n\n#### Comments\nThe scanner and its parameters are set based on the currently active profile.\n\n### setDefaultProfile\n#### Description\nThe setDefaultProfile API function can be used to set the specified profile as the default profile.\n\n#### Default Profile Recap\nProfile0 is the generic profile used when there are no user created profiles associated with an application. Profile0 can be edited but cannot be associated with an application. That is, DataWedge allows manipulation of plug-in settings for Profile0 but it does not allow assignment of a foreground application.\n\nThis configuration allows DataWedge to send output data to any foreground application other than applications associated with user-defined profiles when Profile0 is enabled.\n\nProfile0 can be disabled to allow DataWedge to only send output data to those applications which are associated in user-defined profiles. For example, create a profile associating a specific application, disable Profile0 and then scan. DataWedge only sends data to the application specified in the user-created profile. This adds additional security to DataWedge enabling the sending of data only to specified applications.\n\n#### Usage Scenario\nLet’s say a launcher application has a list of apps that a user can launch and that none of the listed apps has an associated DataWedge profile. Once the user has selected an app, the launcher needs to set the appropriate DataWedge profile for the selected app. This could be done by using setDefaultProfile to set the default profile to the required profile. Then when the user selected app is launched, DataWedge auto profile switching will switch to the default profile (which is now the required profile for that app).\n\nIf, for some reason, the launched app has an associated DataWedge profile then that will override the set default profile.\n\nWhen control is returned to the launcher application, resetDefaultProfile can be used to reset the default profile.\n\n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\ti.putExtra(EXTRA_DATA, \"<profile name>\");\n\n#### Parameters\n\n* ACTION:\tString \"com.motorolasolutions.emdk.datawedge.api.ACTION_SETDEFAULTPROFILE\"\n* EXTRA_DATA:\tString \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PROFILENAME\"\n* `<profile name>`:\tThe profile name to set as the default profile as a string (case-sensitive).\n\n#### Return Values\n\n* None.\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n\t* `$ adb logcat -s DWAPI`\n* Error messages will be logged for invalid actions, parameters and failures (e.g. profile not found or associated to an application).\n\n#### Example\n\n\t:::java\n\t// define action and data strings  \n\tString setDefaultProfile = \"com.motorolasolutions.emdk.datawedge.api.ACTION_SETDEFAULTPROFILE\";  \n\tString extraData = \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PROFILENAME\";  \n\t  \n\tpublic void onResume() {       \n\t    // create the intent       \n\t    Intent I = new Intent();       \n\t    // set the action to perform       \n\t    i.setAction(setDefaultProfile);       \n\t    // add additional info       \n\t    i.putExtra(extraData, \"myProfile\");       \n\t    // send the intent to DataWedge       \n\t    context.this.sendBroadcast(i);  \n\t}  \n\n#### Comments\n\n* The API command will have no effect if the specified profile does not exist or if the specified profile is already associated to an application.\n* Because DataWedge will automatically switch profile when your activity is paused, it is recommended that this API function be called from the onResume method of your activity.\n* It is recommended this profile be created to cater to all applications/activities that would otherwise default to using Profile0. This will ensure that these applications/activities continue to work with a consistent configuration.\n\nTo explain by example, let’s say that initially Profile0 is the default profile using the camera as the barcode scanner. Using the Browser application and scanning a barcode with the camera, DataWedge enters the data into the Browser. Now you launch an application that changes the default profile to a profile using the blockbuster as the barcode scanner. When you go back to the Browser application, since it is using the default profile, scanning will now be via the blockbuster not the camera as previously. To ensure that the Browser continues to use the camera as the barcode scanner a profile should be created and associated to the Browser that specifies the camera as the barcode scanner.\n\n### resetDefaultProfile\n#### Description\nThe resetDefaultProfile API function can be used to reset the default profile back to Profile0.\n\n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\ti.putExtra(EXTRA_DATA, \"<profile name>\");\n\n#### Parameters\n\n* ACTION:\tString \"com.motorolasolutions.emdk.datawedge.api.ACTION_RESETDEFAULTPROFILE\"\n* EXTRA_DATA:\tString \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PROFILENAME\"\n* `<profile name>`:\tThe profile name to set as the default profile as a string (case-sensitive).\n\n#### Return Values\n\n* None.\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n\t* `$ adb logcat -s DWAPI`\n* Error messages will be logged for invalid actions, parameters and failures (e.g. profile not found or associated to an application).\n\n#### Example\n\n\t:::java\n\t// define action string  \n\tString resetDefaultProfile = \"com.motorolasolutions.emdk.datawedge.api.ACTION_RESETDEFAULTPROFILE\";  \n\t  \n\tpublic void onResume() {       \n\t    // create the intent       \n\t    Intent I = new Intent();       \n\t    // set the action to perform       \n\t    i.setAction(resetDefaultProfile);       \n\t    context.this.sendBroadcast(i);  \n\t}  \n\n#### Comments\n\n* None.\n\n### switchToProfile\n\n#### Description\nThe switchToProfile API action can be used to switch to the specified profile.\n\n#### Profiles Recap\nDataWedge is based on profiles and plug-ins. A profile contains information on how DataWedge should behave with different applications.\n\nProfile information consists of:\n\n* Associated application\n* Input plug-in configurations\n* Output plug-in configurations\n* Process plug-in configurations\n\n\nDataWedge includes a default profile, Profile0, that is created automatically the first time DataWedge runs.Using profiles, each application can have a specific DataWedge configuration. For example, each user application can have a profile which outputs scanned data in the required format when that application comes to the foreground. DataWedge can be configured to process the same set of captured data differently based on the requirements of each application.\n\n>Note: A single profile may be associated with one or many activities/apps, however, given an acitivty, only one profile may be associated to it.\n\n#### Usage Scenario\nLet’s say an application has two activities. ActivityA only requires EAN13 barcodes to be scanned. ActivityB only requires MSR card data. ProfileB is configured to only scan EAN13 barcodes and is left unassociated. ProfileM is configured to only accept MSR input and is left unassociated. When ActivityA launches it uses switchToProfile to activate ProfileB. Similarily, when ActivityB launches it uses switchToProfile to activate ProfileM.\n\nIf another activity/app comes to the foreground, DataWedge auto profile switching will set the DataWedge profile accordingly either to the default profile or to an associated profile.\n\nWhen ActivityA (or ActivityB) comes back to the foreground it will use switchToProfile to reset the profile back to ProfileB (or ProfileM).\n\n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\ti.putExtra(EXTRA_DATA, \"<profile name>\");  \n\n#### Parameters\n\n* ACTION:\tString \"com.motorolasolutions.emdk.datawedge.api.ACTION_SWITCHTOPROFILE\"\n* EXTRA_DATA:\tString \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PROFILENAME\"\n* `<profile name>`:\tThe profile name to switch to as a string (case-sensitive).\n\n#### Return Values\n\n* None.\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n\t* `$ adb logcat -s DWAPI`\n* Error messages will be logged for invalid actions, parameters and failures (e.g. profile not found or associated to an application).\n\n#### Example\n\n\t:::java\n\t// define action and data strings  \n\tString switchToProfile = \"com.motorolasolutions.emdk.datawedge.api.ACTION_SWITCHTOPROFILE\";  \n\tString extraData = \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PROFILENAME\";  \n\t  \n\tpublic void onResume() {       \n\t    super.onResume();       \n\t    // create the intent       \n\t    Intent I = new Intent();       \n\t    // set the action to perform       \n\t    i.setAction(switchToProfile);       \n\t    // add additional info       \n\t    i.putExtra(extraData, \"myProfile\");       \n\t    // send the intent to DataWedge       \n\t    context.this.sendBroadcast(i);  \n\t}  \n\n#### Comments\n* This API function will have no effect if the specified profile does not exist or if the specified profile is associated to an application.\n* DataWedge has a one-to-one relationship between profiles and activities, i.e. only one profile can be associated to any given activity. When a profile is initially created, it is not associated to any application. Until this profile is associated to an activity it will never be activated. In this way it is possible to create multiple profiles that are un-associated.\n* This API function allows you to switch to one such unassociated profile.\n\nFor example, let's say that ProfileA is one such un-associated profile and ProfileB is associated with activity B. Now, activity A is launched and uses this Data Capture API intent to switch to profileA. ProfileA will be active whilst activity A is in foreground. When another activity, say activity B, comes to the foreground DataWedge will automatically switch profile (to profileB which is associated to activity B for example). Then when activity A comes back to the foreground again, the app will need to use this Data Capture API intent to switch back to profileA. This would be done in the onResume method of activity A.\n \n> Note: Because DataWedge will automatically switch profile when your activity is paused, it is recommended that this API function be called from the onResume method of your activity.\n\n> Note: After switching to a profile, this un-associated profile does not get assigned to the application/activity and is available to be used in the future with a different app/activity.\n\n> Note: DataWedge automatic profile switching\n\nFor backward compatibility, DataWedge's automatic profile switching is not affected by the above API commands, and this also why the above API commands only work with unassociated profiles and apps.\n\nDataWedge auto profile switching works as follows:\n\n* Every second:\n\t1. Set newProfileId to the associated profile id of the current foreground activity\n\t2. If no associated profile found then set newProfileId to the associated profile id of the current foreground app\n\t3. If no associated profile found then set newProfileId to the current default profile (note: this may not be Profile0)\n\t4. Check the newProfileId against the currentProfileId\n\t5. If they are different then...\n\t\t* deactivate current profile\n\t\t* activate new profile (newProfileId)\n\t\t* set currentProfileId = newProfileId"},{"key":"guide-reference-refnativeandroid","name":" Using Native Android APIs","md":"# Using Native Android APIs\n\n## Overview\nSymbol offers Android products that are built on Android Open Source Platform (AOSP). Two variants are now being offered on the TC55 and planned for certain future products.\n\n### \"Standard Configuration\"\nThis version of the operating system incorporates Google Mobile Services. All standard Google API's are available to use in your application. Please consult [http://developer.android.com](http://developer.android.com) for details of using these APIs. Your application also has access to the [EMDK For Android APIs](#guide-reference-EMDKList) as well.\n\n### \"Professional Configuration\" \nThis version of the operating system does not incorporate Google Mobile Services. Standard Google APIs that doe not rely on the availability of GMS services will work on our devices. Please consult [http://developer.android.com](http://developer.android.com) for details of using these APIs. Your application also has access to the [EMDK For Android APIs](#guide-reference-EMDKList) as well.\n\n## About GMS\nGoogle offers a variety of applications and services collectively known as Google Mobile Services (GMS). There are also optional Android API extensions that allow applications to interface with said services. GMS is independent of Android and under a separate license from Google. GMS runs as an add-on above AOSP (Android Open Source Platform)\n\n### GMS Applications and Services\n\n* Google Maps\n* Google Play Services\n* Google Cloud Messaging\n* Google Analytics\n* Google+\n* Google Mail - Gmail\n* Google Cloud Platform\n* Google Wallet Instant Buy\n* Google Play In-App Billing\n* Google Mobile Ads\n* Google Drive\n* Google Cast\n\n### Challenges with GMS\nCareful considering should be made when deciding if your application requires the use of GMS.\n\n* Security \n\t* Google Mobile Services requires devices to be identified with a specific GoogleID. \n\t* Any enterprise data (Gmail, Maps, Cloud etc) will be pushed through Google's servers.\n\t* Gmail content is read by Google servers to improve relevance of advertisements.\n* Privacy\n\t* Google revamped their privacy policy in early 2012 allowing for richer user profiling across all services, for targeted advertising.\n\t* Usage acceptance allows Google to track a device's every move.\n\t* Google may collect IP Addresses, location, nearby Wi-Fi info, local storage and device setting details.  \n* Configuration\n\t* Extra manual steps may be required to be performed when the device boots up for the first time. \n\n### GMS Alternatives\nDepending on the feature your application requires, you my want to consider alternative choices before declaring that your application requires GMS. \n\n* Mapping\n\t* Consider cloud based mapping solutions like MapQuest or OpenStreetMap.\n\t* Consider alternative device resident solutions like ALK CoPilot, Sygic and Tele Atlas to name a few.\n* Push Messaging\n\t* Consider cross-platform solutions like RhoConnect.\n\t* Consider other cloud based messaging providers like Parse, Amazon SNS, Pushwoosh and others.\n* Play Store\n\t* Consider MDM solutions for application distribution.\n\t* Consider cross-platform solutions like RhoGallery.\n"},{"key":"guide-sample-about","name":" Using Component Samples","md":"# Using Component Samples\nThe EMDK For Xamarin includes sample projects to explore and get familiar with it's features.\n\n## Prerequisites\n\n* [Visual Studio Extension Installed](#guide-vs-setup)\n* [Xamarin Component Installed and added to the project](#guide-component-install)\n* [Zebra Android Device with device update applied](#guide-deviceupdate)\n\n##Before you get Started\n###Project Folder\nThere is a known [issue](https://bugzilla.xamarin.com/show_bug.cgi?id=17662) that sometimes occurs when loading and building a sample project from the component details page. When a Xamarin component is added to your project, a copy of that component and its contents are copied to your project and placed in the `PROJECT/Components` folder. All the samples for that project reside three directories further into the project path  `PROJECT/Components/COMPONENTNAME/Samples/SampleName`. As you can see the full path to this sample can grow quite large. i.e. **C:\\Users\\USERNAME\\Documents\\Visual Studio 2013\\Projects\\PROJECTNAME\\Components\\emdk-component-0.0.1\\samples\\SAMPLENAME**.  In most cases the project will load correctly when launching the sample, but when you attempt to build the project you get get a PathTooLongException. This error happens because the windows operating system sets a maximum limit to how long a path can be (260 characters). This path may not be 260 long yet, but when the build process starts, it will generate files and paths inside that sample folder, which could exceed that limit.  To solve this issue, you simply need to copy the sample project that you wish to use, out of that embedded samples folder, up to the IDE's project folder, and then load the sample by clicking on its .sln (solution)file.\n\n## Opening a Sample\nAfter adding the EMDK for Xamarin component to your Android project, you can access the samples that come bundled with the component:\n\n1. Open the EMDK for Xamarin components detail page\n\n\t![img](images/component/details-button.png)\n\t![img](images/component/details.png)\n2. Select the `Samples` tab\n\n\t![img](images/component/samples.png)\n3. Click the `Open Sample` button\n\n\t![img](images/component/samples-openbutton.png)\n\nThe sample project will then open. You can choose to run it and review the associated code.\n\n![img](images/component/sample-opened.png)\n\n\n\n\n\n## Details of Samples\nBe sure to reference the details of each included sample as described in their associated guides:\n\n* [Profiles - Data Capture](#guide-sample-profile-datacapture) - Demonstrates use of base EMDK API's and using data capture using profiles generated from Profile Manager.\n"},{"key":"guide-sample-profile-datacapture","name":"Sample: Data Capture Profiles","md":"#Sample: Data Capture Profiles\n\nThis guide will provide details of the Data Capture sample project included with the EMDK for Xamarin component.\n\n## Opening the Sample Project\nBe sure to read the [Using Component Samples Guide](#sample-about) for instructions for accessing the sample project.\n\n\n\n## Running the Sample\nIf Visual Studio detects your device connected via USB, it will display the name of that device next to the \"Play\"\nbutton.\n\nFor Example (in Visual Studio ): ![img](images/samples/vsPlayButton.png)\n\nPress the \"Play\" button next to the devices name.  The IDE will build, deploy and start the sample app on your device.\n\n## Using the Sample\nWhen the Sample Application loads it will present the following screen. The user interface provides a means to configure the barcode type that the scanner is allowed to decode. In order to make best use of this sample you will need a barcode that represents each of the listed type.\n\nA successful scan of an enabled barcode symbology will append the barcode data to a list in the lower section of the user interface. Disabled type will not scan and will not append data to the barcode data list.\n\n\n\n![img](images/samples/ProfileDataCaptureScreen1.png)\n\nTo test this sample, change the barcode types that are allowed by checking, or un-checking the checkboxes next to the barcode types. Then press the `Set` button.\n\n![img](images/samples/ProfileDataCaptureScreen2.png)\n\nThe Status message should change, stating that the profile was successfully modified.\n\n![img](images/samples/ProfileDataCaptureScreen3.png)\n\nTo test that your settings have taken effect, scan a barcode type that was disabled previously, the barcode should not scan. Now scan a barcode that was previously disabled, the user interface should update with the decoded barcode data.\n\n##Code sample explanation\nThis seems like a very simple application, but looking at the source code will reveal a very important concept in developing applications that use EMDK profiles.\n\nThe EMDK Profile Manager and Wizard allow you to create profiles that are stored in an XML file (EMDKConfig.xml) in your project's Assets folder. You can programmatically submit this profile via the ProfileManager API's and the\nsettings configured in that profile will take effect.  The profile in this sample, `DataCaptureProfile-1` has several hardcoded barcode types that are enabled or disabled.  There are two ways to change those hardcoded values. one, at designed time, via the Profile Wizard, or programmatically by using a feature of the ProfileManager API's that allow you to replace hardcoded values in the static XML profile before submitting it.\n\nHave a look at the following method from our samples source. It builds an xml string that contains updates to specific values in our profile depending on the state of our user interface checkboxes. A global variable `extraDataXml` is initialized with that string for later use.\n\n    :::cs\n    void CreateExtraDataFromUI()\n    {\n        extraDataXML = \"\";\n\n        extraDataXML += \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n                        \"<characteristic type=\\\"Profile\\\">\" +\n                        \"<characteristic type=\\\"Barcode\\\" version=\\\"0.1\\\">\" +\n                        \"<characteristic type=\\\"Decoders\\\">\";\n\n        if (cbCode128.Checked)\n        {\n            extraDataXML += \"<parm name=\\\"decoder_code128\\\" value=\\\"true\\\"/>\";\n        }\n        else\n        {\n            extraDataXML += \"<parm name=\\\"decoder_code128\\\" value=\\\"false\\\"/>\";\n        }\n\n        if (cbCode39.Checked)\n        {\n            extraDataXML += \"<parm name=\\\"decoder_code39\\\" value=\\\"true\\\"/>\";\n        }\n        else\n        {\n            extraDataXML += \"<parm name=\\\"decoder_code39\\\" value=\\\"false\\\"/>\";\n        }\n\n        if (cbEAN8.Checked)\n        {\n            extraDataXML += \"<parm name=\\\"decoder_ean8\\\" value=\\\"true\\\"/>\";\n        }\n        else\n        {\n            extraDataXML += \"<parm name=\\\"decoder_ean8\\\" value=\\\"false\\\"/>\";\n        }\n\n        if (cbEAN13.Checked)\n        {\n            extraDataXML += \"<parm name=\\\"decoder_ean13\\\" value=\\\"true\\\"/>\";\n        }\n        else\n        {\n            extraDataXML += \"<parm name=\\\"decoder_ean13\\\" value=\\\"false\\\"/>\";\n        }\n\n        if (cbUPCA.Checked)\n        {\n            extraDataXML += \"<parm name=\\\"decoder_upca\\\" value=\\\"true\\\"/>\";\n        }\n        else\n        {\n            extraDataXML += \"<parm name=\\\"decoder_upca\\\" value=\\\"false\\\"/>\";\n        }\n\n        if (cbUPCE0.Checked)\n        {\n            extraDataXML += \"<parm name=\\\"decoder_upce0\\\" value=\\\"true\\\"/>\";\n        }\n        else\n        {\n            extraDataXML += \"<parm name=\\\"decoder_upce0\\\" value=\\\"false\\\"/>\";\n        }\n\n        extraDataXML += \"</characteristic>\" +\n                        \"</characteristic>\" +\n                        \"</characteristic>\";\n    }\n\n\nAfter the `extraDataXML` global string has been initialized, we can use it when submitting the profile via the ProfilManager's  ProcessProfile() method.\n\n    :::cs\n    void ModifyProfileXML()\n    {\n        CreateExtraDataFromUI();\n\n        String[] modifyData = new String[1];\n        modifyData[0] = extraDataXML;\n\n        EMDKResults results = profileManager.ProcessProfile(profileName, ProfileManager.PROFILE_FLAG.Set, modifyData);\n\n        if (results.StatusCode != EMDKResults.STATUS_CODE.Success)\n        {\n            tvStatus.Text = \"Profile modification failed ...\";\n        }\n        else\n        {\n            tvStatus.Text = \"Profile modification succeeded ...\";\n        }\n    }\n"},{"key":"guide-tutorial-helloxamarin","name":"Your First EMDK For Xamarin Application","md":"#Your First EMDK For Xamarin Application\n\nThis document contains step by step instructions for using EMDK Api's in a new Xamarin application from scratch. It covers adding the component to the project, using profile manager, using basic APIs\n\n##Prerequisites\nBefore starting this tutorial you must install the following software.\n\n- Visual Studio 2013 or later\n- [Xamarin Plaform](http://xamarin.com/download)\n- [Symbol EMDK for Xamarin Add-in for Visual Studio](#guide-vs-setup)\n\n\n##Create a new project\nWhen creating a project for this tutorial use the project name **GettingStartedTutorial**\n\nFollow this [guide](#guide-newprojectvisualstudio) to create a new project in Visual Studio.\n\n##Add Symbol EMDK Component\nFollow this [guide](#guide-component-install) to add the needed component you your project.\n\n##Build a Profile\nIn this project we will perform a simple task to demonstrate how to use the ProfileManager Wizard to create a profile\nand then submit that profile via the ProfileManager API.\n\nLets begin by creating a Profile that will set the Date and Time on our device.\n\n1. Open the ProfileManger Wizard by selecting EMDK > Profile Manager\n2. Create a new Profile by clicking the `Create` Button.\n3. In the Create a New Profile Dialog, enter **ClockProfile** as the Name, and then click `Create`\n4. Once the Profile Editor loads, select the Clock feature in the Available Features pane, and then click the `Right Arrow` (greater than symbol) to add the clock feature to the selected features list.\n5. Select the Clock feature in the selected features list, and Clock feature parameters will load in the far left pane.\n6. Click in the Date: field, and notice the instructions for that field at the bottom left of the Wizard. In this field lets\nenter a date that follows the formatting instructions for that field.\n7. Click in the Time: field, In this field lets enter a time that follows the formatting instructions for that field.\n8. Now click `Apply` and then `Finish`\n9. Now click the `Close` on the Profile Manger\n\nThe ProfileManager Wizard will generate the needed xml in a file call EMDKConfig.xml and place it in the Assets folder of our project. Now lets move on and write some code to submit the profile.\n\n\n##Setup AndroidManifest.xml\nIn order to use the Symbol EMDK for Android in your project we first need to add a few items to the AndroidManifest.xml in your project.\n\n**Perform the following steps to setup your AndroidManifest**\n\n1. Open the AndroidManifest.xml in your project from the **Solution pane** > \"Project Name\" > Properties\n2. Replace the `<uses-sdk />` line with  `<uses-sdk android:minSdkVersion=\"19\" />`\n3. Add a new android permission directly below the `uses-sdk` line.\n\n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\" />\n\n4. Now add a `uses-library` tag inside the `application` node.\n\n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\" />\n\n\n**Your completed AndroidManifest.xml should resemble the following:**\n\n    :::xml\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"GettingStartedTutorial.GettingStartedTutorial\" android:versionCode=\"1\" android:versionName=\"1.0\">\n      <uses-sdk android:minSdkVersion=\"19\" />\n      <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\" />\n    \t<application android:label=\"GettingStartedTutorial\" android:icon=\"@drawable/Icon\">\n        <uses-library android:name=\"com.symbol.emdk\"  />\n      </application>\n    </manifest>\n\n##Setup User Interface\nNow lets build our User Interface by opening our main layout file and dragging a dropping some UI elements into our Form.\n\n1. Open our main layout by selecting **Solution pane** > \"Project Name\" > Resources > layout > Main.axml\n2. After the layout loads in the Form Builder we can begin adding and modifying UI elements.\n  1. Select the **HELLO WORLD, CLICK ME!** button, and set its `text` property to the following value in the **Properties** pane.\n    - **MyButton** set **text** to `Apply Profile`\n  2. Add a new textview widget to the form directly below **MyButton** .\n  3. Select the new textview **textView1**, and set its `id` and `text` properties to the following values in the **Properties** pane.\n    -  **textView1** set **id** to `@+id/textViewStatus` and set **text** to `Status:`\n\n\n**Your completed Main.axml should resemble the following:**\n>NOTE: To veiw layout in as xml, switch from **Design** to **Source** view by selecting `Source` in the bottom left corner of the **Form Builder**\n\n    :::xml\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\">\n        <Button\n            android:id=\"@+id/MyButton\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Apply Profile\" />\n        <TextView\n            android:text=\"Status:\"\n            android:textAppearance=\"?android:attr/textAppearanceSmall\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/textViewStatus\" />\n    </LinearLayout>\n\n##Add Some Code\nNow lets add some code to our project.\n\n1. Start by opening up our MainActivity, select **Solution pane** > \"Project Name\" > MainActivity.cs\n2. Add a `using` directive that references the Symbol EMDK for Xamarin\n\n        :::cs\n        using Symbol.EMDK.Xamarin;\n\n3. Now lets add some global variables to the MainActivity class for later use.\n\n        :::cs\n        private EMDKManager emdkManager = null;\n        private ProfileManager profileManager = null;\n        private String profileName = \"ClockProfile\";\n        private TextView tvStatus = null;\n\n\n4. When our OnCreate Activity lifecycle method is called, we call the Activity's SetContentVeiw() method, which will pull in the layout we created previously in Main.axml. We now need to initialize our User Interface global variables so they can be referenced anywhere in the MainActivity class. We will do that inside our OnCreate method just below where SetContentVeiw() is called.\n\n            :::cs\n            tvStatus = FindViewById<TextView>(Resource.Id.textViewStatus);\n\n\n5. While we are initializing the User Interface lets modify setup our button call a method that will submit our profile. When we crated the profile from the Android Blank template, it added a few lines for us, but we need to modify one of them.\n\n  1. Change the line that finds the button, so it will find the button\n\n  Change:\n\n            :::cs\n            button.Click += delegate { button.Text = string.Format(\"{0} clicks!\", count++); };\n\n  To:\n\n            :::cs\n             button.Click += delegate { ApplyProfile(); };\n\n>Note: We will add the ApplyProfile() method later in this tutorial.\n\n6. Also in our OnCreate method, we will call the EMDKManager.GetEMDKManger() method to start the EMDKManger initialization process. Then we will check the result of the method and alert the user by updating the Status TextView.\n\n            :::cs\n            EMDKResults results = EMDKManager.GetEMDKManager(Android.App.Application.Context, this);\n            if (results.StatusCode != EMDKResults.STATUS_CODE.Success)\n            {\n                tvStatus.Text = \"Status: EMDKManager object creation failed ...\";\n            }\n            else\n            {\n                tvStatus.Text = \"Status: EMDKManager object creation succeeded ...\";\n            }\n\n\n7. Next we will to add and interface to our Activity that notifies the client ( MainActivity ) that the EMDKManager object is ready to use `OnOpened` or is no longer available for use `OnClosed`.\n  1. Add the the interface to our MainActivity\n\n            :::cs\n            public class MainActivity : Activity, EMDKManager.IEMDKListener\n\n  2. Add the IEMDKListener methods **OnOpened** and **OnClosed** to the MainActivity class\n\n            :::cs\n            void EMDKManager.IEMDKListener.OnOpened(EMDKManager emdkManager)\n            {\n\n            }\n\n            void EMDKManager.IEMDKListener.OnClosed()\n            {\n\n            }\n\n  3. When the OnOpened method is called, an instance of the EMDKManger is passed as its only argument. We will\n  use this instance of the EMDKManger to initialize our global EMDKManager object. We will also alert the user that EMDKManager was successfully Opened and is ready for use. This is also a good time to initialize the ProfileManager global variable, and alert the user if there are any issues while doing so.\n\n            :::cs\n            void EMDKManager.IEMDKListener.OnOpened(EMDKManager emdkManager)\n            {\n                tvStatus.Text = \"Status: EMDK Opened successfully ...\";\n\n                this.emdkManager = emdkManager;\n\n                try\n                {\n                    profileManager = (ProfileManager)emdkManager.GetInstance(EMDKManager.FEATURE_TYPE.Profile);\n                }\n                catch (Exception e)\n                {\n                    tvStatus.Text = \"Status: Exception <\" + e.Message + \">\";\n                }\n            }\n\n  4. We also need to make sure we clean up the EMDKManger references when they can no longer be used. We will do this in the OnClosed method.\n\n            :::cs\n            void EMDKManager.IEMDKListener.OnClosed()\n            {\n                tvStatus.Text = \"Status: EMDK Open failed unexpectedly. Please close and restart the application ...\";\n\n                if (emdkManager != null)\n                {\n                    emdkManager.Release();\n                    emdkManager = null;\n                }\n            }\n\n8. We need a way to pass the Profile to the ProfileManager to be processed, for this we will add a method to our MainActivity class called ApplyProfile.\n\n        :::cs\n        void ApplyProfile()\n        {\n            if (profileManager != null)\n            {\n                EMDKResults results = profileManager.ProcessProfile(profileName, ProfileManager.PROFILE_FLAG.Set, new String[] { \"\" });\n                if (results.StatusCode == EMDKResults.STATUS_CODE.Success)\n                {\n                    tvStatus.Text = \"Status: Profile applied successfully ...\";\n                }\n                else if (results.StatusCode == EMDKResults.STATUS_CODE.CheckXml)\n                {\n                    //Inspect the XML response to see if there are any errors, if not report success\n                    using (XmlReader reader = XmlReader.Create(new StringReader(results.StatusString)))\n                    {\n                        String checkXmlStatus = \"Status:\\n\\n\";\n                        while (reader.Read())\n                        {\n                            switch (reader.NodeType)\n                            {\n                                case XmlNodeType.Element:\n                                    switch (reader.Name)\n                                    {\n                                        case \"parm-error\":\n                                            checkXmlStatus +=  \"Parm Error:\\n\";\n                                            checkXmlStatus += reader.GetAttribute(\"name\") + \" - \";\n                                            checkXmlStatus += reader.GetAttribute(\"desc\") + \"\\n\\n\";\n                                            break;\n                                        case \"characteristic-error\":\n                                            checkXmlStatus += \"characteristic Error:\\n\";\n                                            checkXmlStatus += reader.GetAttribute(\"type\") + \" - \";\n                                            checkXmlStatus += reader.GetAttribute(\"desc\") + \"\\n\\n\";\n                                            break;\n                                    }\n                                    break;\n                            }\n                        }\n\n                        if (checkXmlStatus == \"Status:\\n\\n\")\n                        {\n                            tvStatus.Text = \"Status: Profile applied successfully ...\";\n                        }\n                        else\n                        {\n                            tvStatus.Text = checkXmlStatus;\n                        }\n\n                    }\n                }\n                else\n                {\n                    tvStatus.Text = \"Status: Profile initialization failed ... \" + results.StatusCode;\n                }\n            }\n            else\n            {\n                tvStatus.Text = \"Status: profileManager is null ...\";\n            }\n        }\n\n\n\n\n\n9. Lastly we need to make sure and clean up our references to ProfileManager and EMDKManager before our application exits.\n\n        :::cs\n        protected override void OnDestroy()\n        {\n            base.OnDestroy();\n\n            if (profileManager != null)\n            {\n                profileManager = null;\n            }\n\n            if (emdkManager != null)\n            {\n                emdkManager.Release();\n                emdkManager = null;\n            }\n        }\n\n##Running the application\nNow that we are finish with our first EMDK for Xamarin application, lets see how it runs.\n\n> NOTE: Make sure the device is connected to your development system via a USB cable, and that Developer Mode/USB debugging is enabled on the device.\n\n1. Make note of the current Time and Date on the device.\n\n2. Start the application by pressing the \"Play\" button on the toolbar in your IDE.\n   The IDE will install the new application on the device and run it.\n3. If all goes well, you should eventually see your application start and the status message change to `EMDK Opened successfully ...`\n4. Now press the `Apply Profile` button.\n5. The Status Message should now read `Profile applied successfully ...`. You should see the Time on the devices Notification Bar change to the time you set the Clock profile. You can also pull the Notification Bar down and see that the Date has changed to the Date you set in the Clock profile.\n\n\n##Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://github.com/EMDK/xamarin-samples/archive/GettingStartedTutorial.zip).\n"},{"key":"guide-tutorial-ProfileDtaCaptureTutorial","name":"Your First EMDK For Xamarin Application","md":"#Your First EMDK For Xamarin Application\n\nThis document will contain step by step instructions for using EMDK Api's in a new Xamarin application from scratch. It will cover adding the component to the project, using profile manager, using basic APIs\n\n\n##Create a new project\nWhen creating a project for this tutorial use the project name **ProfileDataCaptureTutorial**\n\nIf you are developing your project in Visual Studio, follow this [guide](#guide-newprojectvisualstudio) to create a new project.\n\n##Add Symbol EMDK Component\nFollow this [guide](#guide-component-install) to add the needed component you your project.\n\n##Setup AndroidManifest.xml\nIn order to use the Symbol EMDK for Android in your project we first need to add a few items to the AndroidManifest.xml in your project.\n\n**Perform the following steps to setup your AndroidManifest**\n\n1. Open the AndroidManifest.xml in your project from the **Solution pane** > \"Project Name\" > Properties\n2. Replace the `<uses-sdk />` line with  `<uses-sdk android:minSdkVersion=\"19\" />`\n3. Add a new android permission directly below the `uses-sdk` line.\n\n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\" />\n\n4. Now add a `uses-library` tag inside the `application` node.\n\n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\" android:required=\"false\" />\n\n  >NOTE: This tag uses an optional parameter `android:requred`. When set to false, this parameter allows your\n  application to load if it where to be run on a non-Zebra device( which would not have the EMDK libraries). This would allow you to create an application that can run on many devices and make use of other libraries on non-Zebra devices to perform similar tasks.\n\n\n**Your completed AndroidManifest.xml should resemble the following:**\n\n    :::xml\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              package=\"ProfileDataCaptureTutorial.ProfileDataCaptureTutorial\" android:versionCode=\"1\" android:versionName=\"1.0\">\n      <uses-sdk android:minSdkVersion=\"19\" />\n      <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\" />\n      <application android:label=\"ProfileDataCaptureTutorial\" android:icon=\"@drawable/Icon\">\n        <uses-library android:name=\"com.symbol.emdk\" android:required=\"false\" />\n      </application>\n    </manifest>\n\n##Build the User Interface\nNow lets build our User Interface by opening our main layout file and dragging a dropping some UI elements into our Form.\n\n1. Open our main layout by selecting **Solution pane** > \"Project Name\" > Resources > layout > Main.axml\n2. After the layout loads in the Form Builder we can begin adding and modifying UI elements.\n  1. Select the **HELLO WORLD, CLICK ME!** button, and set its `id` and `text` properties to the following values in the **Properties** pane.\n    - **MyButton** set **id** to `@+id/buttonSet` and set **text** to `Set`\n  2. Add 6 new checkboxes from the **Toolbox** pane above the **buttonSet** button.\n  3. Select each check box widget and set its `id` and `text` properties to one of the following values in the **Properties** pane.\n    - **checkbox1** set **id** to `@+id/checkBoxCode128` and set **text** to `Code128`\n    - **checkbox2** set **id** to `@+id/checkBoxCode39` and set **text** to `Code39`\n    - **checkbox3** set **id** to `@+id/checkBoxEAN8` and set **text** to `EAN8`\n    - **checkbox4** set **id** to `@+id/checkBoxEAN13` and set **text** to `EAN13`\n    - **checkbox5** set **id** to `@+id/checkBoxUPCA` and set **text** to `UPCA`\n    - **checkbox6** set **id** to `@+id/checkBoxUPCE0` and set **text** to `UPCE0`\n  4. Add a new textview widget to the form directly below the **buttonSet** button.\n  5. Select the new textview **textView1**, and set its `id` and `text` properties to the following values in the **Properties** pane.\n    -  **textView1** set **id** to `@+id/textViewStatus` and set **text** to `Status:`\n  6. Add a new EditText widget to the for directlty below *textView1** and set its properties to the following values in the **Properties** pane.\n    - set **id** to `@+id/editText1`\n    - set **layout_height** to `214dp`\n    - set **layout_marginBottom** to `173dp`\n    - set **layout_width** to `match_parent`\n\n**Your completed Main.axml should resemble the following:**\n>NOTE: To veiw layout in as xml, switch from **Design** to **Source** view by selecting `Source` in the bottom left corner of the **Form Builder**\n\n    :::xml\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\">\n        <CheckBox\n            android:text=\"Code128\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/checkBoxCode128\"\n            android:checked=\"true\" />\n        <CheckBox\n            android:text=\"Code39\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/checkBoxCode39\" />\n        <CheckBox\n            android:text=\"EAN8\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/checkBoxEAN8\"\n            android:checked=\"true\" />\n        <CheckBox\n            android:text=\"EAN13\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/checkBoxEAN13\" />\n        <CheckBox\n            android:text=\"UPCA\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/checkBoxUPCA\"\n            android:checked=\"true\" />\n        <CheckBox\n            android:text=\"UPCE0\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/checkBoxUPCE0\" />\n        <Button\n            android:text=\"Set\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/buttonSet\" />\n        <TextView\n            android:text=\"Status:\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/textViewStatus\" />\n        <EditText\n            android:inputType=\"textMultiLine\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"214.4dp\"\n            android:id=\"@+id/editText1\"\n            android:layout_marginBottom=\"173.4dp\" />\n    </LinearLayout>\n\n##Add Some Code\nNow lets add some code to our project.\n\n1. Start by opening up our MainActivity, select **Solution pane** > \"Project Name\" > MainActivity.cs\n2. Add a `using` directive that references the Symbol EMDK for Xamarin\n  > `using Symbol.EMDK.Xamarin;`\n\n3. Now lets add some global variables to the MainActivity class for later use.\n\n        :::cs\n        private EMDKManager emdkManager = null;\n        private ProfileManager profileManager = null;\n        private String profileName = \"DataCaptureProfile-1\";\n        private String extraDataXML = \"\";\n        private TextView tvStatus = null;\n        private CheckBox cbCode128 = null;\n        private CheckBox cbCode39 = null;\n        private CheckBox cbEAN8 = null;\n        private CheckBox cbEAN13 = null;\n        private CheckBox cbUPCA = null;\n        private CheckBox cbUPCE0 = null;\n\n4. When our OnCreate Activity lifecycle method is called, we call the Activity's SetContentVeiw() method, which will pull in the layout we created previously in Main.axml. We now need to initialize our User Interface global variables so they can be referenced anywhere in the MainActivity class. We will do that inside our OnCreate method just below where SetContentVeiw() is called.\n\n            :::cs\n            tvStatus = FindViewById<TextView>(Resource.Id.textViewStatus);\n            cbCode128 = FindViewById<CheckBox>(Resource.Id.checkBoxCode128);\n            cbCode39 = FindViewById<CheckBox>(Resource.Id.checkBoxCode39);\n            cbEAN8 = FindViewById<CheckBox>(Resource.Id.checkBoxEAN8);\n            cbEAN13 = FindViewById<CheckBox>(Resource.Id.checkBoxEAN13);\n            cbUPCA = FindViewById<CheckBox>(Resource.Id.checkBoxUPCA);\n            cbUPCE0 = FindViewById<CheckBox>(Resource.Id.checkBoxUPCE0);\n\n5. While we are initializing the User Interface lets also add a callback to our \"SET\" button which will call a method to collect our checkbox selections and modify our scanning profile to enable or disable barcode types. For this we will add a method to our MainActivity class that can be called in our OnCreate method.\n\n  1. Add the class method  \n\n            :::cs\n            void AddButtonListener()\n            {\n                Button btnSet = FindViewById<Button>(Resource.Id.buttonSet);\n\n                btnSet.Click += delegate { ModifyProfileXML();};\n            }\n\n  2. Call the method inside OnCreate\n\n            :::cs\n            AddButtonListener();\n\n\n6. Also in our OnCreate method, we will call the EMDKManager.GetEMDKManger() method to start the EMDKManger initialization process. Then we will check the result of the method and alert the user by updating the Status TextView.\n\n            :::cs\n            EMDKResults results = EMDKManager.GetEMDKManager(Android.App.Application.Context, this);\n            if (results.StatusCode != EMDKResults.STATUS_CODE.Success)\n            {\n                tvStatus.Text = \"Status: EMDKManager object creation failed ...\";\n            }\n            else\n            {\n                tvStatus.Text = \"Status: EMDKManager object creation succeeded ...\";\n            }\n\n\n7. Next we will to add and interface to our Activity that notifies the client ( MainActivity ) that the EMDKManager object is ready to use `OnOpened` or is no longer available for use `OnClosed`.\n  1. Add the the interface to our MainActivity\n\n            :::cs\n            public class MainActivity : Activity, EMDKManager.IEMDKListener\n\n  2. Add the IEMDKListener methods **OnOpened** and **OnClosed** to the MainActivity class\n\n            :::cs\n            void EMDKManager.IEMDKListener.OnOpened(EMDKManager emdkManager)\n            {\n\n            }\n\n            void EMDKManager.IEMDKListener.OnClosed()\n            {\n\n            }\n\n  3. When the OnOpened method is called, an instance of the EMDKManger is passed as its only argument. We will\n  use this instance of the EMDKManger to initialize our global EMDKManager object. We will also alert the user that EMDKManager was successfully Opened and is ready for use. This is also a good time to initialize the ProfileManager global variable, and alert the user if there are any issues while doing so.\n\n            :::cs\n            void EMDKManager.IEMDKListener.OnOpened(EMDKManager emdkManager)\n            {\n                tvStatus.Text = \"Status: EMDK Opened successfully ...\";\n\n                this.emdkManager = emdkManager;\n\n                try\n                {\n                    profileManager = (ProfileManager)emdkManager.GetInstance(EMDKManager.FEATURE_TYPE.Profile);\n                }\n                catch (Exception e)\n                {\n                    tvStatus.Text = \"Status: Exception <\" + e.Message + \">\";\n                }\n            }\n  4. We also need to make sure we clean up the EMDKManger references when they can no longer be used. We will do this in the OnClosed method.\n\n            :::cs\n            void EMDKManager.IEMDKListener.OnClosed()\n            {\n                tvStatus.Text = \"Status: EMDK Open failed unexpectedly. Please close and restart the application ...\";\n\n                if (emdkManager != null)\n                {\n                    emdkManager.Release();\n                    emdkManager = null;\n                }\n            }\n\n8. Later we will create a Profile via the ProfileManager Wizard. We need a way to pass that Profile to the ProfileManager to be processing, for this we will add a method to our MainActivity class.\n  1. Create the InitProfile method\n\n            :::cs\n            void InitProfile()\n            {\n\n                if(profileManager != null)\n                {\n                    EMDKResults results = profileManager.ProcessProfile(profileName, ProfileManager.PROFILE_FLAG.Set, new String[] {\"\"});\n                    if(results.StatusCode != EMDKResults.STATUS_CODE.Success)\n                    {\n                        tvStatus.Text = \"Status: Profile initialization failed ...\";\n                    }\n                    else\n                    {\n                        tvStatus.Text = \"Status: Profile initialization success ...\";\n                    }\n                }\n                else\n                {\n                     tvStatus.Text = \"Status: profileManager is null ...\";\n                }\n            }\n\n  2. Call the InitProfile method when right after the Profile manager is initialized in OnOpened\n\n            :::cs\n            void EMDKManager.IEMDKListener.OnOpened(EMDKManager emdkManager)\n            {\n                tvStatus.Text = \"Status: EMDK Opened successfully ...\";\n\n                this.emdkManager = emdkManager;\n\n                try\n                {\n                    profileManager = (ProfileManager)emdkManager.GetInstance(EMDKManager.FEATURE_TYPE.Profile);\n                    InitProfile();\n                }\n                catch (Exception e)\n                {\n                    tvStatus.Text = \"Status: Exception <\" + e.Message + \">\";\n                }\n            }\n\n9. The ProfileManager.ProcessProfile() method allows one to pass an xml structure that will serve as an update to a static xml profile. ProcessProfile() will take the update xml and apply it to the static Profile before summiting it to be processed.\nSo now we need a method that will check the status of our checkboxes and create an xml string that will update our extraDataXML global variable. We will add a method to the MainActivity class.\n\n        :::cs\n        void CreateExtraDataFromUI()\n        {\n            extraDataXML = \"\";\n\n            extraDataXML += \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n                            \"<characteristic type=\\\"Profile\\\">\" +\n                            \"<characteristic type=\\\"Barcode\\\" version=\\\"0.1\\\">\" +\n                            \"<characteristic type=\\\"Decoders\\\">\";\n\n            if (cbCode128.Checked)\n            {\n                extraDataXML += \"<parm name=\\\"decoder_code128\\\" value=\\\"true\\\"/>\";\n            }\n            else\n            {\n                extraDataXML += \"<parm name=\\\"decoder_code128\\\" value=\\\"false\\\"/>\";\n            }\n\n            if (cbCode39.Checked)\n            {\n                extraDataXML += \"<parm name=\\\"decoder_code39\\\" value=\\\"true\\\"/>\";\n            }\n            else\n            {\n                extraDataXML += \"<parm name=\\\"decoder_code39\\\" value=\\\"false\\\"/>\";\n            }\n\n            if (cbEAN8.Checked)\n            {\n                extraDataXML += \"<parm name=\\\"decoder_ean8\\\" value=\\\"true\\\"/>\";\n            }\n            else\n            {\n                extraDataXML += \"<parm name=\\\"decoder_ean8\\\" value=\\\"false\\\"/>\";\n            }\n\n            if (cbEAN13.Checked)\n            {\n                extraDataXML += \"<parm name=\\\"decoder_ean13\\\" value=\\\"true\\\"/>\";\n            }\n            else\n            {\n                extraDataXML += \"<parm name=\\\"decoder_ean13\\\" value=\\\"false\\\"/>\";\n            }\n\n            if (cbUPCA.Checked)\n            {\n                extraDataXML += \"<parm name=\\\"decoder_upca\\\" value=\\\"true\\\"/>\";\n            }\n            else\n            {\n                extraDataXML += \"<parm name=\\\"decoder_upca\\\" value=\\\"false\\\"/>\";\n            }\n\n            if (cbUPCE0.Checked)\n            {\n                extraDataXML += \"<parm name=\\\"decoder_upce0\\\" value=\\\"true\\\"/>\";\n            }\n            else\n            {\n                extraDataXML += \"<parm name=\\\"decoder_upce0\\\" value=\\\"false\\\"/>\";\n            }\n\n            extraDataXML += \"</characteristic>\" +\n                            \"</characteristic>\" +\n                            \"</characteristic>\";\n        }\n\n10. Now we need to add is a method to submit the extraDataXML Profile update. This method will be called by our \"SET\" button. Lets add a new method to the MainActivity class.\n\n        :::cs\n        void ModifyProfileXML()\n        {\n            CreateExtraDataFromUI();\n\n            String[] modifyData = new String[1];\n            modifyData[0] = extraDataXML;\n\n            EMDKResults results = profileManager.ProcessProfile(profileName, ProfileManager.PROFILE_FLAG.Set, modifyData);\n\n            if (results.StatusCode != EMDKResults.STATUS_CODE.Success)\n            {\n                tvStatus.Text = \"Profile modification failed ...\";\n            }\n            else\n            {\n                tvStatus.Text = \"Profile modification succeeded ...\";\n            }\n        }\n\n##Build a Profile\n"},{"key":"guide-vs-setup","name":"Visual Studio Setup","md":"#Visual Studio Setup\n\n## Watch This Guide\n![yt:4z1HQ1M3qJ0](images/video.png)\n\n\n##Adding Extension Gallery\nPrior to releasing the EMDK For Xamarin, we will be hosting a private Visual Studio Extension gallery to allow you to easily install the extension. To get access to the gallery, you need to add a configuration option to your Visual Studio settings.\n\n\n\n1. Open Visual Studio and select `Tools\\Options`.\n\n\t![img](images/vs/toolsoptions.png)\n2. Then select `Environment\\Extensions`.\n\n\t![img](images/vs/options-extensions-section.png)\n3. On the right hand side of the `Options` dialog, select the `Add` button.\n\n\t![img](images/vs/options-gallery-add.png)\n4. Enter `EMDK for Xamarin Beta` for the `Name` field.\n5. Enter `http://emdk.github.io/xamarin-docs/vs/atom.xml` for the `URL` field.\n6. Click `Ok` to close the Options dialog.\n\n\t![img](images/vs/options-gallery-complete.png)\n\n\n##Installing the Extension\nNow that the gallery has been added to Visual Studio, you will be able to use this to download new versions of the beta releases. To install the EMDK for Xamarin extension:\n\n1. Open Visual Studio and select `Tools\\Extensions and Updates`.\n\n\t![img](images/vs/toolsextensions.png)\n2. Select the `Online` section in the left hand side of the `Extensions and Updates` dialog.\n3. Choose the `EMDK For Xamarin Beta` item you just added.\n4. You should now be presented with a listing, showing the `EMDK For Xamarin Visual Studio Extension`.\n5. Click the `Download` button to install it.\n\n\t![img](images/vs/extension-download.png)\n6. Click `Yes` when prompted to allow the program to make changes to your computer.\n\n\t![img](images/vs/vsix-install-allow.png)\n7. Click `Install` when prompted to agree to the license terms.\n\n\t![img](images/vs/vsix-install-license.png)\n8. Click `Close` when the extension installer is complete.\n\n\t![img](images/vs/vsix-install-complete.png)\n9. Restart Visual Studio as directed\n\n\t![img](images/vs/vsix-restart.png)\n\n\n\n## What's Next\nIn order to fully enable the EMDK for Xamarin, you must [install the Xamarin Component](#guide-component-install)\n"},{"key":"guide-yttest","name":"You tube test","md":"#You tube test\n\n## Watch This Guide\n![yt:4z1HQ1M3qJ0](images/video.png)\n\nand this one\n![yt:q9Lf6GDqdWU](images/video.png)\n\n\nRegular Image\n![img](images/vs/toolsoptions.png)"}];